<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>My notes on CS Level 3</description>
    <link>http://localhost:4000/cs-notes/</link>
    <atom:link href="http://localhost:4000/cs-notes/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 26 Dec 2017 17:38:07 +0000</pubDate>
    <lastBuildDate>Tue, 26 Dec 2017 17:38:07 +0000</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>Professional Software Development</title>
        <description>&lt;h4 id=&quot;video-lecture-3&quot;&gt;Video Lecture 3&lt;/h4&gt;
&lt;!--excerpt--&gt;

&lt;h4 id=&quot;video-lecture-5&quot;&gt;Video Lecture 5&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-6&quot;&gt;Video Lecture 6&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-7&quot;&gt;Video Lecture 7&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-8&quot;&gt;Video Lecture 8&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-9&quot;&gt;Video Lecture 9&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-10&quot;&gt;Video Lecture 10&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-12&quot;&gt;Video Lecture 12&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-13&quot;&gt;Video Lecture 13&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-14&quot;&gt;Video Lecture 14&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-15&quot;&gt;Video Lecture 15&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-16&quot;&gt;Video Lecture 16&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-19&quot;&gt;Video Lecture 19&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-22&quot;&gt;Video Lecture 22&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-23&quot;&gt;Video Lecture 23&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-26&quot;&gt;Video Lecture 26&lt;/h4&gt;
&lt;h5 id=&quot;software-inspection-techniques&quot;&gt;Software Inspection Techniques&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;What are Inspections?&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Managing an Inspection&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;What can be the subject of an inspection?
    &lt;ul&gt;
      &lt;li&gt;application source code packages, classes or methods&lt;/li&gt;
      &lt;li&gt;source code documentation&lt;/li&gt;
      &lt;li&gt;test harnesses&lt;/li&gt;
      &lt;li&gt;design descriptions, such as UML component or class diagrams&lt;/li&gt;
      &lt;li&gt;requirements specications, such as user stories&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Why take inspections?
    &lt;ul&gt;
      &lt;li&gt;Deteck defects in software&lt;/li&gt;
      &lt;li&gt;identify opportunities for refactoring&lt;/li&gt;
      &lt;li&gt;as part of white/glass box testing process, or QA activities&lt;/li&gt;
      &lt;li&gt;develop a shared understanding of the purpose and function of a system&lt;/li&gt;
      &lt;li&gt;share good practice between team&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Dont use inspections for&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Identifying poor performance&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;inspections should be used to identify improvement&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;total defects = target method + other methods + + undetected&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;defect detection rate = (target method) / (total defects)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;How effective is it?
    &lt;ul&gt;
      &lt;li&gt;Fagan [1976] reported a DDR of 66% and 82% for two IBM case studies employing a comprehensive inspection process&lt;/li&gt;
      &lt;li&gt;Jones [1986] reported a DDR of 60% for design inspections alone, compared to a DDR of just 25% for unit testing&lt;/li&gt;
      &lt;li&gt;Boehm [1981] surveyed four case studies reported between1978 and 1980, finding that inspections discovered between 63% and 75% of defects&lt;/li&gt;
      &lt;li&gt;Wilkerson et al. [2012] found that inspections led to fewer defects left in a system than a test driven development approach to implementation&lt;/li&gt;
      &lt;li&gt;Runeson et al. [2006] reported a more complex picture from a survey of 12 case studies&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Cost of inspections?
    &lt;ul&gt;
      &lt;li&gt;Fagan [1986] reported several anecdotal case studies where
  development and/or maintenance costs were signicantly
  reduced as a net result of applying inspections. One project
  experienced a 95% reduction in maintenance costs&lt;/li&gt;
      &lt;li&gt;Boehm [1981]’s survey of case studies reported that code
  inspections could produce between 10 and 120 delivered lines
  of source code per person hour, compared with 5-24 lines for
  unit testing&lt;/li&gt;
      &lt;li&gt;Wilkerson et al. [2012] found that applying software
  inspections cost about three times a much in total time
  compared with test driven development&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;images/soft_insp1.PNG&quot; alt=&quot;initial costs of software inspections&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When to conduct an inspection?
    &lt;ul&gt;
      &lt;li&gt;Periodically as part of a clean-up or refactoring exercise&lt;/li&gt;
      &lt;li&gt;After a period of requirements gathering and specication&lt;/li&gt;
      &lt;li&gt;During staging of a new feature implementation&lt;/li&gt;
      &lt;li&gt;As a feature is implemented (pair programming)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Roles in inspection
    &lt;ul&gt;
      &lt;li&gt;Mod: responsible for coordinating the arrangements for the inspection&lt;/li&gt;
      &lt;li&gt;Author(s): &amp;gt;=1 team members who make &amp;gt;=1 software atifacts for inspection&lt;/li&gt;
      &lt;li&gt;Inspector(s): responsibel for identifying defects in artifact during inspection&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;../images/soft_insp2.PNG&quot; alt=&quot;software inspection process&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Choosing what to review
    &lt;ul&gt;
      &lt;li&gt;if artifact’s been changed, must be inspected before change can be committed to prod&lt;/li&gt;
      &lt;li&gt;if artifact is associated with high priority feature&lt;/li&gt;
      &lt;li&gt;if artifact has been associated with large no of defect reports&lt;/li&gt;
      &lt;li&gt;if artifact has been subject to a large number of recent changes&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Static analysis tools
    &lt;ul&gt;
      &lt;li&gt;Design metrics, used to identify parts of system that are poorly structured&lt;/li&gt;
      &lt;li&gt;Source code metrics
        &lt;ul&gt;
          &lt;li&gt;No. of lines of code per funct/module&lt;/li&gt;
          &lt;li&gt;Ratio btwn executable and comment lines of code&lt;/li&gt;
          &lt;li&gt;No. of spelling mistakes&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Soft process metrics
        &lt;ul&gt;
          &lt;li&gt;No. of changes per commit for module or over a period&lt;/li&gt;
          &lt;li&gt;No of defects discovered over a period for a module&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Rules for conducting an inspection
    &lt;ul&gt;
      &lt;li&gt;Focus on identifying imporovement opportunities, not recrimination&lt;/li&gt;
      &lt;li&gt;purposde of inspections is to uncover defects, not recommend remedial actions&lt;/li&gt;
      &lt;li&gt;allow inspectors to take breaks. too much concentration leads to defects being missed&lt;/li&gt;
      &lt;li&gt;desseminate and act on recommended actions quickly&lt;/li&gt;
      &lt;li&gt;monitor remedial action to make sure it addresses the identified problems&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Strats for identifying defects
    &lt;ul&gt;
      &lt;li&gt;adhoc&lt;/li&gt;
      &lt;li&gt;checklist directed&lt;/li&gt;
      &lt;li&gt;senarios&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Linus’ Law&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Given enough eyeballs, all bugs are shallow&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Key Point&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Inspections are an essential quality assurance tool&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;video-lecture-27&quot;&gt;Video Lecture 27&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-27a&quot;&gt;Video Lecture 27a&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-28&quot;&gt;Video Lecture 28&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-29&quot;&gt;Video Lecture 29&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-30&quot;&gt;Video Lecture 30&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-30a&quot;&gt;Video Lecture 30a&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-31&quot;&gt;Video Lecture 31&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-32&quot;&gt;Video Lecture 32&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-33&quot;&gt;Video Lecture 33&lt;/h4&gt;

</description>
        <pubDate>Sat, 23 Sep 2017 19:50:00 +0100</pubDate>
        <link>http://localhost:4000/cs-notes/level3/semester1/2017/09/23/professional-software-development.html</link>
        <guid isPermaLink="true">http://localhost:4000/cs-notes/level3/semester1/2017/09/23/professional-software-development.html</guid>
        
        
        <category>Level3</category>
        
        <category>Semester1</category>
        
      </item>
    
      <item>
        <title>Interactive Systems</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory - edit this post and re-build (or run with the &lt;code class=&quot;highlighter-rouge&quot;&gt;-w&lt;/code&gt; switch) to see your changes!
To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention: YYYY-MM-DD-name-of-post.ext.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sat, 23 Sep 2017 19:50:00 +0100</pubDate>
        <link>http://localhost:4000/cs-notes/level3/semester1/2017/09/23/interactive-systems.html</link>
        <guid isPermaLink="true">http://localhost:4000/cs-notes/level3/semester1/2017/09/23/interactive-systems.html</guid>
        
        
        <category>Level3</category>
        
        <category>Semester1</category>
        
      </item>
    
      <item>
        <title>Data Fundamentals</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory - edit this post and re-build (or run with the &lt;code class=&quot;highlighter-rouge&quot;&gt;-w&lt;/code&gt; switch) to see your changes!
To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention: YYYY-MM-DD-name-of-post.ext.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sat, 23 Sep 2017 19:50:00 +0100</pubDate>
        <link>http://localhost:4000/cs-notes/level3/semester1/2017/09/23/data-fundamentals.html</link>
        <guid isPermaLink="true">http://localhost:4000/cs-notes/level3/semester1/2017/09/23/data-fundamentals.html</guid>
        
        
        <category>Level3</category>
        
        <category>Semester1</category>
        
      </item>
    
      <item>
        <title>Algorithmics 1</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory - edit this post and re-build (or run with the &lt;code class=&quot;highlighter-rouge&quot;&gt;-w&lt;/code&gt; switch) to see your changes!
To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention: YYYY-MM-DD-name-of-post.ext.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sat, 23 Sep 2017 19:50:00 +0100</pubDate>
        <link>http://localhost:4000/cs-notes/level3/semester1/2017/09/23/algorithmics-1.html</link>
        <guid isPermaLink="true">http://localhost:4000/cs-notes/level3/semester1/2017/09/23/algorithmics-1.html</guid>
        
        
        <category>Level3</category>
        
        <category>Semester1</category>
        
      </item>
    
      <item>
        <title>Advanced Programming</title>
        <description>&lt;h4 id=&quot;lecture-1&quot;&gt;Lecture 1&lt;/h4&gt;
&lt;h4 id=&quot;introduction&quot;&gt;Introduction&lt;/h4&gt;

&lt;h5 id=&quot;application-level&quot;&gt;Application Level&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Java - Strong Types&lt;/li&gt;
  &lt;li&gt;Python - Auto Memory Mgt&lt;/li&gt;
  &lt;li&gt;Haskel - Abstract Resources&lt;/li&gt;
  &lt;li&gt;… - IDE
&lt;!--excerpt--&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;systems-level&quot;&gt;Systems Level&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Languages: C, Rust, OCaml&lt;/li&gt;
  &lt;li&gt;Used for:
    &lt;ul&gt;
      &lt;li&gt;OS&lt;/li&gt;
      &lt;li&gt;Communications&lt;/li&gt;
      &lt;li&gt;Numerical&lt;/li&gt;
      &lt;li&gt;Drivers&lt;/li&gt;
      &lt;li&gt;Embedded Systems&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;C/C++ most heavily used programming language&lt;/li&gt;
  &lt;li&gt;Used in OS and embeded systems&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;edit---compile---link---execute-cycle&quot;&gt;Edit - Compile - Link - Execute Cycle&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Source Files &amp;gt; Compiler &amp;gt; Bin &amp;gt; Linker &amp;gt; Executable
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;test.o
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;memory-layout&quot;&gt;Memory Layout&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Higher Mem address
    &lt;ul&gt;
      &lt;li&gt;stack&lt;/li&gt;
      &lt;li&gt;heap&lt;/li&gt;
      &lt;li&gt;bss segment
        &lt;ul&gt;
          &lt;li&gt;stores uninitialized variables&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;data segment
        &lt;ul&gt;
          &lt;li&gt;initialized data is stord&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;test segment
        &lt;ul&gt;
          &lt;li&gt;read-only, holds instructions that the processor understands&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Lower mem adress&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;stack &amp;amp; heap shared memory&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;makefiles&quot;&gt;Makefiles&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;makes compiling bigger programs easier
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; mod_a.c
gcc &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; mod_b.c
gcc &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; mod_a.o mod_b.o &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; app_x
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;becomes&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Makefile&quot;&gt;app_x: mod_a.o mod_b.o
	gcc mod_a.o mod_b.o -o app_x

mod_a.o: mod_a.c global.h
	gcc -c mod_a.c

mod_b.o: mod_b.c global.g
	gcc -c mod_a.c
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CFLAGS = -W -Wall
%.o : %.c
	gcc -c $(CFLAGS) $&amp;lt; -o $@
OBJECTS = mod_a.o mod_b.o

app_x: $(OBJECTS)
	gcc $(OBJECTS) –o app_x

mod_a.o: mod_a.c global.h
mod_b.o: mod_b.c global.h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;lecture-2&quot;&gt;Lecture 2&lt;/h1&gt;
&lt;h1 id=&quot;overview-of-c&quot;&gt;Overview of C&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Must contain main()
    &lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;int main(){
  // something
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
printf()
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;char - 8 bits&lt;/li&gt;
  &lt;li&gt;short - 16 bits&lt;/li&gt;
  &lt;li&gt;long - 32 bits&lt;/li&gt;
  &lt;li&gt;float - 32 bit&lt;/li&gt;
  &lt;li&gt;long long - 64 bits&lt;/li&gt;
  &lt;li&gt;double - 64-bit&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;printf-formatting&quot;&gt;printf formatting&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;%d - print as a decimal integer&lt;/li&gt;
  &lt;li&gt;%6d - print as a decimal integer at least 6 characters wide with leading blanks&lt;/li&gt;
  &lt;li&gt;%06d - print as a decimal integer at least 6 characters wide with leading zeros&lt;/li&gt;
  &lt;li&gt;%f - print as a floating point number&lt;/li&gt;
  &lt;li&gt;%6f - print as a floating point number at least 6 characters wide&lt;/li&gt;
  &lt;li&gt;%.2f - print as a floating point number with 2 digits after the decimal point&lt;/li&gt;
  &lt;li&gt;%6.2f - print as a floating point number at least 6 characters wide with 2 digits after the decimal point&lt;/li&gt;
  &lt;li&gt;%c - print as a character&lt;/li&gt;
  &lt;li&gt;%s - print as a string&lt;/li&gt;
  &lt;li&gt;%x - print as a hexadecimal integer&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;while(condition) {
	statement;
}

for (int = i; i &amp;lt; length; ++i) {
	statement;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;//Constant
#define LOWER 0
#define UPPER 300
#define STEP 20
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// Character input
#include &amp;lt;stdio.h&amp;gt;
...
for (c = getchar(); c!=EOF;c=getchar()){
	statement;
}
// or
while ((c = getchar()) != EOF) {
	statement;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;arrays&quot;&gt;Arrays&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;int numbers[10];
numbers[4];
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;functions&quot;&gt;Functions&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// Must use prototype before
return-type function-name (parameter declarations, if any);
....
return-type function-name (parameter declarations, if any) {
	statements;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;call by value
    &lt;ul&gt;
      &lt;li&gt;manipulate actual values&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;call by reference
    &lt;ul&gt;
      &lt;li&gt;cannot manipulate actual values&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;arrays passewd by reference&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;/// External Variables
extern type varName;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;signed
    &lt;ul&gt;
      &lt;li&gt;can be negative or positive ($2^-(n-1)$ to $2^(n-1)$)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;unsigned
    &lt;ul&gt;
      &lt;li&gt;always positive or 0&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;escape-sequences&quot;&gt;escape sequences&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\a - alert (bell) character
\b - backspace
\f - formfeed
\n - newline
\r - carriage return
\t - horizontal tab
\v - vertical tab
\\ - backslash
\?
\'
\&quot;
\ooo - octal number
\xhh - hexadecimal number
\0 - null character (EOS)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;‘x’ - integer representing value of letter x&lt;/li&gt;
  &lt;li&gt;“x” - array of 2 chars, ‘x’ and ‘\0’&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// enum
enum months {JAN = 1; FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC};
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;variables-default-initialized&quot;&gt;Variables default initialized&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;external
    &lt;ul&gt;
      &lt;li&gt;0&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;automatic
    &lt;ul&gt;
      &lt;li&gt;undefined&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;“const” can be used with array arguments to functions, to tell the function not to change the array
    &lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;int strlen(const char[])
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;Conversion takes place across assignments; the value of the right hand side is converted to the type of the left hand side, which is the type of the result&lt;/li&gt;
  &lt;li&gt;Longer integers are converted to shorter ones by dropping the excess high order bits&lt;/li&gt;
  &lt;li&gt;float to int conversions cause truncation of any fractional part&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;cast&quot;&gt;cast&lt;/h4&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expression&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;++n // increments before value us used
n++ // increments after value is used
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;bitwise-operations&quot;&gt;Bitwise operations&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&amp;amp; - AND&lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;- OR&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;^ - EXOR&lt;/li&gt;
  &lt;li&gt;« - left shift&lt;/li&gt;
  &lt;li&gt;
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;ul&gt;
          &lt;li&gt;right shift&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;~ - one’s complement&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;n = n &amp;amp; 0xff;
/*sets all bits of n to 0 except the low order 8 bits */
n = n &amp;amp; ~0xff;
/* zeroes the low order 8 bits */
n = n | 0x11;
/* sets bits 0 and 4 to 1, leaving all others alone */
n = n ^ 0x11;
/* if n’s bit 0 has a value of 0, set it to 1; if it is 1, set it to
0; same for bit 4 */
n = n &amp;lt;&amp;lt; 2;
/* shift n’s value 2 bits left, filling with 0’s; equivalent to
multiplying by 4 */
n = n &amp;gt;&amp;gt; 3;
/* shift n’s value 3 bits right; if n is signed, fill vacated
bits with the sign bit; if unsigned, fill with 0; equivalent
to division by 8 */
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;x = expr1 ? expr2 : expr3;
// is the same as
if (expr1) {
	x = expr2;
} else {
	x = expr3;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Operations&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Associativity&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;() [] -&amp;gt; .&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;! ~ ++ – + - * &amp;amp; (type) sizeof&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;right to left&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;* / %&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;+ -&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;« »&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&amp;lt; &amp;lt;= &amp;gt; &amp;gt;=&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;== !=&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&amp;amp;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;^&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;|&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&amp;amp;&amp;amp;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;||&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;?;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;right to left&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;= += -= *= /= %= &amp;amp;= ^= |= «= »=&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;right to left&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;,&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;chapter-3&quot;&gt;Chapter 3&lt;/h1&gt;
&lt;h2 id=&quot;control-statements&quot;&gt;Control statements&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;if (/* condition */) {
	/* code */
} else if (/* condition */) {
	/* code */
} else {
	/* code */
}

while (/* condition */) {
	/* code */
}

for (size_t i = 0; i &amp;lt; count; i++) {
	/* code */
}

do {
	/* code */
} while(/* condition */);

switch (/* expression */) {
	case /* value */:
		/* statement */;
		break;
	default /* value */ :
		/* statement */;
		break;
}

for (. . .)
	for (. . .) {
		. . .
		if (disaster)
			goto error;
		. . .
	}

error:
/* cleanup the mess */
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;chapter-4&quot;&gt;Chapter 4&lt;/h1&gt;
&lt;h2 id=&quot;functions-1&quot;&gt;Functions&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// always use prototypes
return-type name(/* arguments */);

return-type name(/* arguments */) {
	/* code */
	return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;if funciton doesn’t have a type, it is set to int as default&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;static-variables&quot;&gt;Static Variables&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;static int sp;
// can only use this variable inside the file it's declared in
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;internal static variables are local to a particular function, just as automatic variables are, but unlike automatics, they remain in existence rather than coming and going each time that the function is activated&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;register-variables&quot;&gt;Register Variables&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;The keyword register hints to compiler that a given variable can be put in a register. It’s compiler’s choice to put it in a register or not&lt;/li&gt;
  &lt;li&gt;Registers are faster than memory to access, so the variables which are most frequently used in a C program can be put in registers using register keyword&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;register int x;
int f(register unsigned m, register long n) {…}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;preprocessor&quot;&gt;Preprocessor&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// file inclusion
#include &quot;filename&quot;
#include &amp;lt;filename&amp;gt;

// macro substitution
#define name replacement-text
// use &quot;\&quot; to continue for multiple lines
#define name replacement-textreplacement-textreplacement-textreplacement-text\
replacement-textreplacement-textreplacement-text\
replacement-textreplacement-textreplacement-text
// ## can concatenate arguments
#define paste(front, back) front ## back
paste(name, 1);
// will give
name1;

// Conditional evaluation
#if
	#endif
	#else
	#elif
// eg
#if SYSTEM == SYSV
	#define HDR “sysv.h”
#elif SYSTEM == BSD
	#define HDR “bsd.h”
#elif SYSTEM == MSDOS
	#define HDR “msdos.h”
#else
	#define HDR “default.h”
#endif /* SYSTEM */
#include HDR


#ifdef
#ifndef
// ifdef/ifndef is the same as checks if contents of a header file is only included once
#if !defined(_HDR_H_)
#define _HDR_H_
/* contents of hdr.h go here */
#endif /*_HDR_H_ */
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;Automatic variable
    &lt;ul&gt;
      &lt;li&gt;lives inside function&lt;/li&gt;
      &lt;li&gt;allocated upon function call&lt;/li&gt;
      &lt;li&gt;deallocated upon function return&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;External variable
    &lt;ul&gt;
      &lt;li&gt;lives outside functions&lt;/li&gt;
      &lt;li&gt;allocated upon program start&lt;/li&gt;
      &lt;li&gt;never deallocated&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;visibility-of-variables&quot;&gt;Visibility of variables&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;As default all top-level names are visible everywhere&lt;/li&gt;
  &lt;li&gt;use static to restrict visibility&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;chapter-5&quot;&gt;Chapter 5&lt;/h2&gt;
&lt;h3 id=&quot;pointers&quot;&gt;pointers&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// points to a value of type int
int*;
// points to a value of type int*
int**;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;purpose&quot;&gt;purpose?&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;call-by-reference&lt;/li&gt;
  &lt;li&gt;linked data structures&lt;/li&gt;
  &lt;li&gt;array indexing&lt;/li&gt;
  &lt;li&gt;higher order functions - functions that call some of their own arguments&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// stores address of int X in P
int *P = &amp;amp;X;

// writes 42 to the address pointed to by P
*P = 42;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;&amp;amp; cannot be used for register variables or complex expressions&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;int x = 1, y = 2;
int z[10];
int *p, *q; /* p and q are pointers to int */

p = &amp;amp;x; /* p now points to x */
y = *p; /* y is now 1 */
*p = 0; /* x is now 0 */
q = &amp;amp;z[3]; /* q now points to z[3] */
p = q; /* p now points to z[3] */
while (p == q) /* loop exits on 1st iter */
	break;
if (p != NULL) /* address of z[3] != 0 */
	p = &amp;amp;z[0]; /* p now points to z[0] */
if (q)
	q = &amp;amp;z[0]; /* q now equals p; */
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;Use pointers to call by reference
    &lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;swap(&amp;amp;a[i], &amp;amp;a[j])
// instead of
swap(intx , int y)
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;int a[10];
int *pa;

pa = a; // points to a[0]
pa++; // points to a[1]

// given pointers q, p that points to the same array
q-p; // is the number of array elements between pointers p ad q

//-------------

char amsg[] = &quot;this is a string&quot;; // array of 17 characters including '\0'
char *pmsg = &quot;this is a string&quot; // pointer to an array of the same 17 chars
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;pmsg can be resized but amsg can’t;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;memory-management&quot;&gt;Memory management&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;malloc(); // requests given no. of bytes adn returns a void * to the first byte
sizeof(t); // no. of bytes required to store a value of type t

free(); // deallocates memory that was malloced;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;given
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./program hello world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// in int main(int argc *argv[]);
argc == 3
argv[0] == &quot;./program&quot;;
argv[1] == &quot;hello&quot;;
argv[2] == &quot;world&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;function-pointers&quot;&gt;Function pointers&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;void sort(char *lineptr[], int left, int right, int (*comp)(void *, void *));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;chapter-7&quot;&gt;Chapter 7&lt;/h2&gt;
&lt;h4 id=&quot;standard-input-and-output&quot;&gt;Standard Input and output&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;#include &amp;lt;stdio.h&amp;gt;

int getchar(void); // read one character at a time
int getchat(); // return next input char, returns EOF on end
int putchar(int ch); // prints ch to stdout
printf(); // prints to stdout
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;formated-io&quot;&gt;Formated I/O&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// Format string determines type of remaining arguments
int printf(const char *format, ...);
printf(&quot;%d\n&quot;, 8);

int scanf(char *format, ...); // same as printf formatting
int day, year;
char monthname[20];
scanf(“%d %s %d”, &amp;amp;day, monthname, &amp;amp;year);
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Character&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Input Data&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;d&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;decimal int&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;i&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;integer. integer may be octal(leading 0) or hexadecimal(leading 0x/0X)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;o&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;octal int(with/without leading 0)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;u&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;unsigned int&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;x&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;hexadecimal int&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;c&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;char&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;s&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;string&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;e,f,g&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;floating point with optional sight/decimal point/exponential&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;%&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;literal %, no assignment is made&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;file-io&quot;&gt;File I/O&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;FILE *fopen(char *name, char *mode);
int getc(FILE *fp);
int putc(int c, FILE *fp);
int fclose(FILE *fp);

// printf and scanf variants
int fscanf(FILE *fp, char *format, ...);
int fprintf(FILE *fp, char *format, ...);

// line buffered input/output
char *fgets(char *line, int maxline, FILE *fp);
int fputs(char *line, FILE *fp);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;chapter-6&quot;&gt;Chapter 6&lt;/h2&gt;
&lt;h4 id=&quot;structs&quot;&gt;Structs&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;struct [tag] {
	member declarations
};

struct point {
	int x;
	int y;
};

struct point p = {320, 200};
struct point q;
struct point *r;

q = p; // struct assignment
r = &amp;amp;q; // address of struct variable q

q.y; // access struct member y
r-&amp;gt;x; // dereference
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;Legal Operations
    &lt;ul&gt;
      &lt;li&gt;copying&lt;/li&gt;
      &lt;li&gt;passing to a function&lt;/li&gt;
      &lt;li&gt;returning from a function&lt;/li&gt;
      &lt;li&gt;taking the address with &amp;amp;&lt;/li&gt;
      &lt;li&gt;accessing members&lt;/li&gt;
      &lt;li&gt;assigning to members&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Illegal Operations
    &lt;ul&gt;
      &lt;li&gt;arithmetic&lt;/li&gt;
      &lt;li&gt;comparisons&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;self-referential-structs&quot;&gt;Self-referential structs&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;struct tnode {
	int value; // payload
	struct tnode *left; // ptr to left child
	struct tnode *right; // ptr to right child
};

struct tnode *;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;typedefs&quot;&gt;Typedefs&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;create new data type synonyms
    &lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;typedef type synonym;
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;```C
typedef int Length; // Length is synonym for int
typedef char *String; // String is synonym for char *&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Length len, maxlen; // Length variables
Length *lengths; // ptr to (array of) Length
String lineptr[MAXLINES]; // array of String
Length strlen(String s); // prototype&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
#### Unions
- Variable that may hold objects of different types and sizes
```C
union const_value { // type declaration
	int ival;
	double dval;
	char *sval;
};
union const_value val; // variable definition
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;assignment to any union member turns all other members into garbage&lt;/li&gt;
  &lt;li&gt;compiler doesn’t track this&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;differences-between-java-and-c&quot;&gt;Differences between Java and C&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Interface support
    &lt;ul&gt;
      &lt;li&gt;Java compiler checks that a class implements its interface&lt;/li&gt;
      &lt;li&gt;C compiler doesn’t check that .c file defines what .h declares&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Memory management
    &lt;ul&gt;
      &lt;li&gt;Java garbage collector&lt;/li&gt;
      &lt;li&gt;In C unused memory mused be freed explicitly&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Memory protection
    &lt;ul&gt;
      &lt;li&gt;Java - private attributes cannot be tampered with&lt;/li&gt;
      &lt;li&gt;Pointers to opaque structs can still be dereferenced
        &lt;ul&gt;
          &lt;li&gt;never leak pointers to internal data structures, for security reasons.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;threads-and-concurrency&quot;&gt;Threads and Concurrency&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Concurency&lt;/em&gt; means multiple computations are happening at the same time.&lt;/p&gt;

&lt;h4 id=&quot;process&quot;&gt;Process&lt;/h4&gt;
&lt;p&gt;A &lt;em&gt;process&lt;/em&gt; is an instance of a running program that is isolated from other processes on the same machine. In particular, it has its own private section of the machine’s memory.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Processes has:
    &lt;ul&gt;
      &lt;li&gt;An address space&lt;/li&gt;
      &lt;li&gt;A collection of OS state&lt;/li&gt;
      &lt;li&gt;A CPU context - a thread of control&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;threads&quot;&gt;Threads&lt;/h4&gt;
&lt;p&gt;A &lt;em&gt;thread&lt;/em&gt; is a locus of control inside a running program. Think of it as a place in the program that is being run, plus the stack of method calls that led to that place (so the thread can go back up the stack when it reaches return statements).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Why use threads?
    &lt;ul&gt;
      &lt;li&gt;Split program into routines to execute in parallel&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Shares a process address space with &amp;gt;= 0 threads&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;thread-models&quot;&gt;Thread Models&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Manager/Worker
    &lt;ul&gt;
      &lt;li&gt;Manager handles I/O and assignes work to worker threads&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Peer
    &lt;ul&gt;
      &lt;li&gt;similar to manager/worker, but after the main thread creates other threads it participates in the work&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Pipeline
    &lt;ul&gt;
      &lt;li&gt;Each thread handles a different stage of an assemply line&lt;/li&gt;
      &lt;li&gt;Threads hand word to each other in producer-consumer relationship&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;generic-threading-concepts&quot;&gt;Generic Threading Concepts&lt;/h2&gt;

&lt;h2 id=&quot;java-support-for-multi-threading&quot;&gt;Java support for multi-threading&lt;/h2&gt;

&lt;h2 id=&quot;pthreads&quot;&gt;PThreads&lt;/h2&gt;

&lt;h2 id=&quot;thread-safe-adts&quot;&gt;Thread Safe ADTs&lt;/h2&gt;

&lt;h2 id=&quot;memory-management-1&quot;&gt;Memory Management&lt;/h2&gt;

&lt;h2 id=&quot;openmp&quot;&gt;OpenMP&lt;/h2&gt;

</description>
        <pubDate>Sat, 23 Sep 2017 19:50:00 +0100</pubDate>
        <link>http://localhost:4000/cs-notes/level3/semester1/2017/09/23/advanced-programming.html</link>
        <guid isPermaLink="true">http://localhost:4000/cs-notes/level3/semester1/2017/09/23/advanced-programming.html</guid>
        
        
        <category>Level3</category>
        
        <category>Semester1</category>
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory - edit this post and re-build (or run with the &lt;code class=&quot;highlighter-rouge&quot;&gt;-w&lt;/code&gt; switch) to see your changes!
To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention: YYYY-MM-DD-name-of-post.ext.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sun, 10 Nov 2013 10:18:00 +0000</pubDate>
        <link>http://localhost:4000/cs-notes/thriller/comedy/horror/2013/11/10/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">http://localhost:4000/cs-notes/thriller/comedy/horror/2013/11/10/welcome-to-jekyll.html</guid>
        
        
        <category>Thriller</category>
        
        <category>Comedy</category>
        
        <category>Horror</category>
        
      </item>
    
  </channel>
</rss>
