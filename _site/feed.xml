<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>My notes on CS Level 3</description>
    <link>http://localhost:4000/cs-notes/</link>
    <atom:link href="http://localhost:4000/cs-notes/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 30 Dec 2017 02:03:11 +0000</pubDate>
    <lastBuildDate>Sat, 30 Dec 2017 02:03:11 +0000</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>Algorithmics 1</title>
        <description>&lt;h3 id=&quot;contents&quot;&gt;Contents&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;#section_0&quot;&gt;Introduction&lt;/a&gt;&lt;br /&gt;
   &lt;a href=&quot;#section_1&quot;&gt;Fundamental Algorithms and Data Structures&lt;/a&gt;&lt;br /&gt;
   &lt;a href=&quot;#section_2&quot;&gt;Sorting Algorithms&lt;/a&gt;&lt;br /&gt;
   &lt;a href=&quot;#section_3&quot;&gt;Strings and text algorithms&lt;/a&gt;&lt;br /&gt;
   &lt;a href=&quot;#section_4&quot;&gt;Graphs and graph algorithms&lt;/a&gt;&lt;br /&gt;
   &lt;a href=&quot;#section_5&quot;&gt;NP Completeness&lt;/a&gt;&lt;br /&gt;
   &lt;a href=&quot;#section_6&quot;&gt;Computability&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;section_0&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;introduction&quot;&gt;Introduction&lt;/h4&gt;

&lt;h5 id=&quot;useful-textbooks&quot;&gt;Useful Textbooks&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;M.T. Goodrich &amp;amp; R. Tamassia, Algorithm Design: Foundations, Analysis, and Internet Examples, Wiley, 2002&lt;/li&gt;
  &lt;li&gt;D. Harel &amp;amp; Y. Feldman, Algorithmics: the Spirit of Computing, Addison Wesley, 2004 (also earlier 1992 edition by D. Harel)&lt;/li&gt;
  &lt;li&gt;M. Sipser, Introduction to the Theory of Computation, Course Technology, 2006
&lt;!--excerpt--&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;revision---algorithm-analysis&quot;&gt;Revision - Algorithm Analysis&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;Time and space complexity is written as a function of input size&lt;/li&gt;
  &lt;li&gt;Worst case - gives a guarantee of algorithm’s performance&lt;/li&gt;
  &lt;li&gt;Asymptotic behaviour indicates what will happen as input size grows&lt;/li&gt;
  &lt;li&gt;Expressed using Big O notation&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;big-o-notation&quot;&gt;Big O notation&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;f(n) = O(g(n))&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; grows no faster than &lt;code class=&quot;highlighter-rouge&quot;&gt;g&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;there exists a real constant &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt; and integer constant &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; such that &lt;code class=&quot;highlighter-rouge&quot;&gt;|f(n)| &amp;lt;= |c*g(n)|&lt;/code&gt; for all &lt;code class=&quot;highlighter-rouge&quot;&gt;n =&amp;gt; N&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; is usually a complex function, which is not known precisely&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;g&lt;/code&gt; is a known function eg O(1), O(n) etc&lt;/li&gt;
  &lt;li&gt;use the “tightest” &lt;code class=&quot;highlighter-rouge&quot;&gt;g&lt;/code&gt; we can find for an algorithm&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;log-function&quot;&gt;Log function&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;x = log&lt;sub&gt;a&lt;/sub&gt;n if n = a&lt;sup&gt;x&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;log&lt;sub&gt;a&lt;/sub&gt; m * n = log&lt;sub&gt;a&lt;/sub&gt;m + log&lt;sub&gt;a&lt;/sub&gt;n&lt;/li&gt;
  &lt;li&gt;log&lt;sub&gt;a&lt;/sub&gt; m / n = log&lt;sub&gt;a&lt;/sub&gt;m - log&lt;sub&gt;a&lt;/sub&gt;n&lt;/li&gt;
  &lt;li&gt;log&lt;sub&gt;a&lt;/sub&gt;n&lt;sup&gt;c&lt;/sup&gt; = c * log&lt;sub&gt;a&lt;/sub&gt;n&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;time-complexities&quot;&gt;Time complexities&lt;/h6&gt;

&lt;p&gt;&lt;strong&gt;For some constant &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Polynomial-time = O(n&lt;sup&gt;c&lt;/sup&gt;)&lt;/li&gt;
  &lt;li&gt;Exponential-time = no better than O(c&lt;sup&gt;n&lt;/sup&gt;) where &lt;code class=&quot;highlighter-rouge&quot;&gt;c &amp;gt; 1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;section_1&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;fundamental-algorithms-and-data-structures&quot;&gt;Fundamental Algorithms and Data Structures&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#stack_topic&quot;&gt;Stacks&lt;/a&gt;, &lt;a href=&quot;#queue_topic&quot;&gt;queues&lt;/a&gt; and &lt;a href=&quot;#priority_queue_topic&quot;&gt;priority queues&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cbt_topic&quot;&gt;Complete binary trees&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heap_topic&quot;&gt;Heaps and heap operations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#java_heap&quot;&gt;Java class&lt;/a&gt; for (integer) heaps&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heap_sort_topic&quot;&gt;Heap sort&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;stack_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;stack-abstract-data-type-lifo&quot;&gt;Stack abstract data type (LIFO)&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;Basic operations:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;create&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;isEmpty&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;push&lt;/em&gt; (to top of stack)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;pop&lt;/em&gt; (delete and return from top of stack)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Represent it as:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;an array - all operations are O(1)&lt;/li&gt;
  &lt;li&gt;a linked list - all operations are O(1)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;queue_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;queue-abstract-data-type-fifo&quot;&gt;Queue abstract data type (FIFO)&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;Basic operations:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;create&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;isEmpty&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;insert&lt;/em&gt; (to the back of queue)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;delete&lt;/em&gt; (delete and return item at front of queue)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Represent it as:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;an array - all operations are O(1) and it must be “wrapped around”, treated as circular&lt;/li&gt;
  &lt;li&gt;a linked list - all operations are O(1)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;priority_queue_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;priority-queue-abstract-data-type&quot;&gt;Priority queue abstract data type&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;Basic operations:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;create&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;isEmpty&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;insert&lt;/em&gt; (new item with given priority)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;delete&lt;/em&gt; (delete and return item with highest priority)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Represent it as:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;unordered list - &lt;em&gt;insert&lt;/em&gt; O(1), &lt;em&gt;delete&lt;/em&gt; O(n)&lt;/li&gt;
  &lt;li&gt;ordered list - &lt;em&gt;insert&lt;/em&gt; O(n), &lt;em&gt;delete&lt;/em&gt; O(1)&lt;/li&gt;
  &lt;li&gt;heap - &lt;em&gt;insert&lt;/em&gt; and &lt;em&gt;delete&lt;/em&gt; are O(logn)&lt;/li&gt;
  &lt;li&gt;in all cases &lt;em&gt;create&lt;/em&gt; and &lt;em&gt;isEmpty&lt;/em&gt; are O(1)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;cbt_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;complete-binary-trees&quot;&gt;Complete Binary Trees&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;Height of a node:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;length of the longest path from the node to a leaf&lt;/li&gt;
  &lt;li&gt;height of a heap is the height of its root node&lt;/li&gt;
  &lt;li&gt;a binary tree of height &lt;code class=&quot;highlighter-rouge&quot;&gt;h&lt;/code&gt; can contain maximum 2&lt;sup&gt;h+1&lt;/sup&gt; - 1 nodes&lt;/li&gt;
  &lt;li&gt;therefore the height of a CBT with &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; nodes is é log&lt;sub&gt;2&lt;/sub&gt;( n + 1 ) - 1 ù&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;A complete binary tree with &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; nodes has:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the minimum possible height&lt;/li&gt;
  &lt;li&gt;the maximum possible number of nodes at each level &lt;em&gt;except the last&lt;/em&gt; (ie for &lt;code class=&quot;highlighter-rouge&quot;&gt;i = 0, ... , h - 2&lt;/code&gt;, level &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; has 2&lt;sup&gt;i&lt;/sup&gt; nodes&lt;/li&gt;
  &lt;li&gt;the nodes on the &lt;em&gt;last&lt;/em&gt; level are as far to the left as possible&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Properties of a CBT:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;with a height &lt;code class=&quot;highlighter-rouge&quot;&gt;h&lt;/code&gt;, it has at &lt;em&gt;most&lt;/em&gt; 2&lt;sup&gt;h+1&lt;/sup&gt; - 1 nodes&lt;/li&gt;
  &lt;li&gt;with &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; nodes, its height is é log&lt;sub&gt;2&lt;/sub&gt;( n + 1 ) - 1 ù&lt;/li&gt;
  &lt;li&gt;then it has é n / 2 ù leaf nodes&lt;/li&gt;
  &lt;li&gt;and it has ⌊ n / 2 ⌋ branch nodes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;heap_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;heaps&quot;&gt;Heaps&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;Def:&lt;/strong&gt; A CBT where each node stores an item, and has a priority value&lt;br /&gt;
   &lt;strong&gt;Heap property:&lt;/strong&gt; Every node’s priority is greater than or equal to the priorities of all its descendent nodes&lt;br /&gt;
   &lt;strong&gt;Min-heap:&lt;/strong&gt; Inverted so that the minimum priority is at the root
&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;For a node &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;its children are nodes &lt;code class=&quot;highlighter-rouge&quot;&gt;2i + 1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;2i + 2&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;its parent is the node &lt;code class=&quot;highlighter-rouge&quot;&gt;⌊ (i - 1) / 2 ⌋&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Basic operations:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;insert&lt;/em&gt; an item&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;build&lt;/em&gt; a heap containing a given set of items&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;delete&lt;/em&gt; the item with highest priority&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;impose&lt;/em&gt; the heap property on a given node&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Complexity:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;build&lt;/em&gt; is O(n log n) and there is an O(n) alternative&lt;/li&gt;
  &lt;li&gt;all other operations are O(log n) for algorithms which take O(1) steps at each level of the heap&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Insertion:&lt;/strong&gt;&lt;br /&gt;
   &lt;code class=&quot;highlighter-rouge&quot;&gt;while (new_value NOT in root &amp;amp;&amp;amp; new_value &amp;gt; parent_value)  
   swap new_value with parent_value&lt;/code&gt;&lt;br /&gt;
   &lt;strong&gt;Imposing:&lt;/strong&gt;&lt;br /&gt;
   Pre-condition - a specified node may violate the heap property, but all its descendents satisfy the property&lt;br /&gt;
   Post-condition - the specified node and all of its descendents satisfy the property&lt;br /&gt;
   &lt;code class=&quot;highlighter-rouge&quot;&gt;while (bad_value NOT in leaf &amp;amp;&amp;amp; bad_value &amp;lt; larger_child)  
   swap bad_value with larger_child&lt;/code&gt;&lt;br /&gt;
   &lt;strong&gt;Deletion:&lt;/strong&gt;&lt;br /&gt;
   &lt;code class=&quot;highlighter-rouge&quot;&gt;swap root with node in last (bottom-right) leaf  
delete last leaf  
impose heap property on bad value now in root&lt;/code&gt;&lt;br /&gt;
   &lt;strong&gt;Building:&lt;/strong&gt;&lt;br /&gt;
   Pre-condition - values are in arbitrary order&lt;br /&gt;
   Post-condition - values form a heap&lt;br /&gt;
   &lt;code class=&quot;highlighter-rouge&quot;&gt;for each non-leaf node in bottom-to-top right-to-left order  
   impose heap propery&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;java_heap&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;an-integer-heap-class&quot;&gt;An integer heap class&lt;/h5&gt;

&lt;p&gt;Represent using an array, where:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;children of a node &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; are in the array at &lt;code class=&quot;highlighter-rouge&quot;&gt;2i + 1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;2i + 2&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;parent of a node &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; are in the array at &lt;code class=&quot;highlighter-rouge&quot;&gt;(i - 1) / 2&lt;/code&gt; (floored automatically in Java)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Heap class &lt;a href=&quot;#heap_class&quot;&gt;implementation in Java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;heap_sort_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;heap-sort&quot;&gt;Heap Sort&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;more efficient than selection sort&lt;/li&gt;
  &lt;li&gt;O(n log n) in the worst case&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heap_sort&quot;&gt;pseudocode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;section_2&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;sorting-algorithms&quot;&gt;Sorting Algorithms&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#comparison_topic&quot;&gt;Comparison-based sorting&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#radix_topic&quot;&gt;Radix&lt;/a&gt; sort&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#trie_topic&quot;&gt;Tries&lt;/a&gt; (re&lt;strong&gt;trie&lt;/strong&gt;val)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Common sorts:&lt;/strong&gt;&lt;br /&gt;
   O(n&lt;sup&gt;2&lt;/sup&gt;) - selection, insertion, bubble&lt;br /&gt;
   O(n log n) - merge, heap&lt;br /&gt;
   Quicksort is O(n log n) on average (but no better than O(n&lt;sup&gt;2&lt;/sup&gt;) in the worst case&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;comparison_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;comparison-based-sorting&quot;&gt;Comparison-based sorting&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;Claim:&lt;/strong&gt; No sorting algorithm that is based on pairwise comparison can be better than O(n log n) in the worst case&lt;br /&gt;
   &lt;strong&gt;Justification:&lt;/strong&gt; Draw out the algorithm using a binary decision tree, where each node represents a comparison between two elements&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;leaf nodes represent the possible outcomes of the algorithm&lt;/li&gt;
  &lt;li&gt;so the number of leaf nodes = the possible ordering of &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; items&lt;/li&gt;
  &lt;li&gt;so there are at least &lt;code class=&quot;highlighter-rouge&quot;&gt;n!&lt;/code&gt; and maximum 2&lt;sup&gt;h+1&lt;/sup&gt; leaf nodes&lt;/li&gt;
  &lt;li&gt;its worst case complexity is O(h) where &lt;code class=&quot;highlighter-rouge&quot;&gt;h&lt;/code&gt; = its height&lt;/li&gt;
  &lt;li&gt;it follows that n! &amp;lt;= 2&lt;sup&gt;h+1&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/decision_tree.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Reversing inequality and taking log&lt;sub&gt;2&lt;/sub&gt; of both sides:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/comparison_based_complexity.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Giving a complexity of O(n log n) as required&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;radix_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;radix-sorting&quot;&gt;Radix sorting&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;O(n) complexity&lt;/li&gt;
  &lt;li&gt;exploits the structure of items to be sorted to achieve this&lt;/li&gt;
  &lt;li&gt;faster than O(n log n) only for very large &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;How it works:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;each iteration the items are distributed into buckets (lists)&lt;/li&gt;
  &lt;li&gt;during an &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;&lt;sup&gt;th&lt;/sup&gt; iteration an item is placed in the bucket corresponding to the integer represented by its bits&lt;/li&gt;
  &lt;li&gt;at the end of an iteration the buckets are concatenated to give a new sequence which will be used as the starting point of the next iteration&lt;/li&gt;
  &lt;li&gt;there are &lt;code class=&quot;highlighter-rouge&quot;&gt;m / b&lt;/code&gt; iterations, where &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; is the length of bit-sequences representing an item, and &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; is a chosen factor of &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To sort the following sequence: &lt;code class=&quot;highlighter-rouge&quot;&gt;15 43 5 27 60 18 26 2&lt;/code&gt;&lt;br /&gt;
   Where binary encodings are given by:&lt;br /&gt;
   &lt;code class=&quot;highlighter-rouge&quot;&gt;15 = 001111  43 = 101011  5 = 000101  27 = 011011&lt;/code&gt;&lt;br /&gt;
   &lt;code class=&quot;highlighter-rouge&quot;&gt;60 = 111100  18 = 010010  26 = 011010  2 = 000010&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Items have bit positions 0, …, 5 so &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; = 6&lt;br /&gt;
   &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; must be a factor of &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt;, so choose &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; = 2&lt;br /&gt;
   So we have 2&lt;sup&gt;b&lt;/sup&gt; = 2&lt;sup&gt;2&lt;/sup&gt; = 4 buckets labelled 0, 1, 2, 3 (or 00, 01, 10, 11)
   And &lt;code class=&quot;highlighter-rouge&quot;&gt;m / b = 3&lt;/code&gt; iterations are required&lt;/p&gt;

&lt;p&gt;See radix sorting pseudocode &lt;a href=&quot;#radix_sort&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Correctness:&lt;/strong&gt; For two items &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; where &lt;code class=&quot;highlighter-rouge&quot;&gt;x &amp;lt; y&lt;/code&gt;, we need to show that &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; precedes &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; in the final sequence&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;During the last iteration&lt;/strong&gt; where some bits of &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; differ:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the bits of &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; must be smaller than &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;so &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; goes into a bucket before &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; does&lt;/li&gt;
  &lt;li&gt;so &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; precedes &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; in the sequence after this iteration&lt;/li&gt;
  &lt;li&gt;in later iterations, &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; go in the same bucket as they don’t have any more differing bits&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Complexity:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;during each of the &lt;code class=&quot;highlighter-rouge&quot;&gt;m / b&lt;/code&gt; iterations, the sequence is scanned –&amp;gt; O(n) time, and buckets are concatenated –&amp;gt; O(2&lt;sup&gt;b&lt;/sup&gt;) time&lt;/li&gt;
  &lt;li&gt;overall, O(m / b (n + 2&lt;sup&gt;b&lt;/sup&gt;)) –&amp;gt; O(n)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Time-space trade-off:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the larger the value of b, the smaller the multiplicative constant (m / b) in the complexity function and so the faster the algorithm will become&lt;/li&gt;
  &lt;li&gt;an array of size 2&lt;sup&gt;b&lt;/sup&gt; is required, so increasing &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; will increase space requirements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;trie_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;tries&quot;&gt;Tries&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;stored items have a key that is interpreted as a sequence of bits/characters&lt;/li&gt;
  &lt;li&gt;there is a multiway branch at each node where each branch has an associated symbol&lt;/li&gt;
  &lt;li&gt;no two siblings have the same symbol&lt;/li&gt;
  &lt;li&gt;the branch to be taken at level &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; is determined by the &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;&lt;sup&gt;th&lt;/sup&gt; element of the key&lt;/li&gt;
  &lt;li&gt;tracing a path from root to a node spells out the key of the item&lt;/li&gt;
  &lt;li&gt;eg, used to store strings&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/trie.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Search&lt;/em&gt; and &lt;em&gt;insert&lt;/em&gt; algorithms for the trie found &lt;a href=&quot;#trie_alg&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Represent it as:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;an array of pointers, which represent children&lt;/li&gt;
  &lt;li&gt;linked lists, containing children of each node&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/trie_list.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#trie_class&quot;&gt;Example&lt;/a&gt; trie class to represent a dictionary&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;section_3&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;strings-and-text-algorithms&quot;&gt;Strings and text algorithms&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#compression_topic&quot;&gt;Text compression&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#huffman_topic&quot;&gt;Huffman&lt;/a&gt; and &lt;a href=&quot;#lzw_topic&quot;&gt;LZW&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#string_comparison_topic&quot;&gt;String comparison&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#string_distance_topic&quot;&gt;String distance&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#pattern_topic&quot;&gt;String/pattern search&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#brute_topic&quot;&gt;Brute force&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#kmp_topic&quot;&gt;KMP&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#bm_topic&quot;&gt;BM&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;compression_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;text-compression&quot;&gt;Text compression&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;lossless&lt;/li&gt;
  &lt;li&gt;compression ratio is &lt;code class=&quot;highlighter-rouge&quot;&gt;x / y&lt;/code&gt; where &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; = compressed and &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; = original&lt;/li&gt;
  &lt;li&gt;space saved = &lt;code class=&quot;highlighter-rouge&quot;&gt;1 - (x / y) * 100%&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;huffman_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;huffman-encoding&quot;&gt;Huffman encoding&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;statistical method&lt;/li&gt;
  &lt;li&gt;unique, variable-length codeword for each character&lt;/li&gt;
  &lt;li&gt;no codeword is the prefix of another&lt;/li&gt;
  &lt;li&gt;each character is a leaf node&lt;/li&gt;
  &lt;li&gt;codeword is the path from root to appropriate leaf&lt;/li&gt;
  &lt;li&gt;when going down the path, left route = 0, right route = 1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Huffman tree construction:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;add leaf nodes containing the character represented and its frequency&lt;/li&gt;
  &lt;li&gt;while there are &amp;gt; 1 parentless nodes
    &lt;ul&gt;
      &lt;li&gt;add new parent to the two nodes of smallest weight (frequency)&lt;/li&gt;
      &lt;li&gt;weight of the parent node = sum of child weights&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The tree for a file with char frequencies:&lt;br /&gt;
   &lt;code class=&quot;highlighter-rouge&quot;&gt;Space = 15  E = 11  A = 9  T = 8  I = 7  S = 7&lt;/code&gt;&lt;br /&gt;
   &lt;code class=&quot;highlighter-rouge&quot;&gt;R = 7  O = 6  N = 4  U = 3  H = 2  C = 1  D = 1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/huffman_1.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tree construction &lt;a href=&quot;#huff_contruct&quot;&gt;pseudocode&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Generating the codewords:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;following left and right paths down the constructed tree
    &lt;ul&gt;
      &lt;li&gt;Space &lt;code class=&quot;highlighter-rouge&quot;&gt;10&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;E &lt;code class=&quot;highlighter-rouge&quot;&gt;010&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;111&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;T &lt;code class=&quot;highlighter-rouge&quot;&gt;110&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;I &lt;code class=&quot;highlighter-rouge&quot;&gt;0000&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;S &lt;code class=&quot;highlighter-rouge&quot;&gt;0001&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;R &lt;code class=&quot;highlighter-rouge&quot;&gt;0011&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;O &lt;code class=&quot;highlighter-rouge&quot;&gt;0110&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;N &lt;code class=&quot;highlighter-rouge&quot;&gt;0111&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;U &lt;code class=&quot;highlighter-rouge&quot;&gt;00101&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;H &lt;code class=&quot;highlighter-rouge&quot;&gt;001001&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;C &lt;code class=&quot;highlighter-rouge&quot;&gt;0010000&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;D &lt;code class=&quot;highlighter-rouge&quot;&gt;0010001&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Weighted path length of tree T:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SUM( weight * distance from root )&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;sum is over all leaf nodes&lt;/li&gt;
  &lt;li&gt;this gives the number of bits in the compressed file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Complexity:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;building tree - O(n)&lt;/li&gt;
  &lt;li&gt;compression - O(n)&lt;/li&gt;
  &lt;li&gt;decompression - O(n)&lt;/li&gt;
  &lt;li&gt;use &lt;strong&gt;adaptive&lt;/strong&gt; Huffman coding
    &lt;ul&gt;
      &lt;li&gt;same tree built and adapted by compressor and decompressor&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;lzw_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;lzw-compression&quot;&gt;LZW compression&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;dictionary method&lt;/li&gt;
  &lt;li&gt;collection of strings, each with a bit pattern that represents it&lt;/li&gt;
  &lt;li&gt;dictionary built dynamically during compression and decompression&lt;/li&gt;
  &lt;li&gt;if string &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; is represented, so is every prefix of &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;a &lt;strong&gt;trie&lt;/strong&gt; is an ideal representation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At any given time during comp./decomp. there is a &lt;strong&gt;current codeword length &lt;code class=&quot;highlighter-rouge&quot;&gt;k&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2&lt;sup&gt;k&lt;/sup&gt; distinct codewords available&lt;/li&gt;
  &lt;li&gt;limits size of dictionary, but can be incremented as necessary (so doubling the codeword availability)&lt;/li&gt;
  &lt;li&gt;initial &lt;code class=&quot;highlighter-rouge&quot;&gt;k&lt;/code&gt; should be large enough to encode all strings of length &lt;code class=&quot;highlighter-rouge&quot;&gt;l&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;LZW compression &lt;a href=&quot;#lzw&quot;&gt;pseudocode&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/lzw_1.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LZW variants:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;constant - fixed capacity dictionary&lt;/li&gt;
  &lt;li&gt;dynamic - add 1 to current length whenever dictionary becomes full&lt;/li&gt;
  &lt;li&gt;LRU - when full, current string replaces the least recently used string in the dictionary&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;LZW decompression:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;builds same dictionary as compression but &lt;strong&gt;1 step out of phase&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;may encounter codeword that is not in dictionary
    &lt;ul&gt;
      &lt;li&gt;if (lookup fails) newS = oldS + oldS.charAt(0);&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;LZW decompression &lt;a href=&quot;#lzw_decomp&quot;&gt;pseudocode&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/lzw_2.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Complexity:&lt;/strong&gt; O(n) for comp. and decomp. each&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;string_comparison_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;string-comparison&quot;&gt;String comparison&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;given strings &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; of lengths &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;, what is the smallest number of basic operations needed to transform &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; into &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt;?&lt;/li&gt;
  &lt;li&gt;use
    &lt;ul&gt;
      &lt;li&gt;insertion&lt;/li&gt;
      &lt;li&gt;deletion&lt;/li&gt;
      &lt;li&gt;subsitution&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;String distance:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/distance_1.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prefixes:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;&lt;sup&gt;th&lt;/sup&gt; prefix of string &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; is first &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; chars of &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;let &lt;code class=&quot;highlighter-rouge&quot;&gt;d( i,j )&lt;/code&gt; = distance between prefix &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; and prefix &lt;code class=&quot;highlighter-rouge&quot;&gt;j&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;then distance between &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; = &lt;code class=&quot;highlighter-rouge&quot;&gt;d( m,n )&lt;/code&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;len(s) = m&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;len(t) = n&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Optimal alignment:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The last position of the alignment must either be of the form&lt;br /&gt;
   &lt;img src=&quot;/cs-notes/assets/images/algs/optimal_alignment.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In other words,&lt;br /&gt;
   &lt;img src=&quot;/cs-notes/assets/images/algs/optimal_alignment_alt.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;string_distance_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;distance-with-dynamic-programming&quot;&gt;Distance with dynamic programming&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;fill in entries of an &lt;code class=&quot;highlighter-rouge&quot;&gt;m * n&lt;/code&gt; table row by row, and column by column&lt;/li&gt;
  &lt;li&gt;time and space complexity = O(mn)&lt;/li&gt;
  &lt;li&gt;keep most recent entry in each column of the table
    &lt;ul&gt;
      &lt;li&gt;space complexity = O(m + n)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Distances table:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/distance_table.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;entries calculated one by one by applying formula above&lt;/li&gt;
  &lt;li&gt;final entry &lt;code class=&quot;highlighter-rouge&quot;&gt;d( 7,8 ) = 4&lt;/code&gt; so string distance is &lt;strong&gt;4&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;trace back to entry &lt;code class=&quot;highlighter-rouge&quot;&gt;( 0,0 )&lt;/code&gt; to find optimal alignment
    &lt;ul&gt;
      &lt;li&gt;vertical = deletion&lt;/li&gt;
      &lt;li&gt;horizontal = insertion&lt;/li&gt;
      &lt;li&gt;diagonal = match/substitution&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;pattern_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;stringpattern-search&quot;&gt;String/pattern search&lt;/h5&gt;

&lt;p&gt;Given a text &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; of length &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;, and a string/pattern &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; of length &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt;, find the position of the last occurence of &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;brute_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;brute-force-algorithm&quot;&gt;Brute force algorithm&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;current starting position in text = 0&lt;/li&gt;
  &lt;li&gt;compare chars from &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; left to right until the entire string is matched&lt;/li&gt;
  &lt;li&gt;if mismatch, advance starting position by 1 and repeat&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Brute force &lt;a href=&quot;#brute_force&quot;&gt;pseudocode&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Effectiveness:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;expressed using char arrays rather than strings in Java&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; char comparisons needed at each &lt;code class=&quot;highlighter-rouge&quot;&gt;n - (m + 1)&lt;/code&gt; positions in text before the pattern is found&lt;/li&gt;
  &lt;li&gt;worse case O(mn)&lt;/li&gt;
  &lt;li&gt;average case O(n)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;kmp_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;kmp-algorithm&quot;&gt;KMP algorithm&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;online - removes need to back-up in text&lt;/li&gt;
  &lt;li&gt;worst case O(n)&lt;/li&gt;
  &lt;li&gt;need to pre-process the string into a border table (an array &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; with an entry &lt;code class=&quot;highlighter-rouge&quot;&gt;b[j]&lt;/code&gt; for each position &lt;code class=&quot;highlighter-rouge&quot;&gt;j&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;if mismatch at &lt;code class=&quot;highlighter-rouge&quot;&gt;j&lt;/code&gt;, remain at current text char&lt;/li&gt;
  &lt;li&gt;the border table says what to compare next&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Border of a string &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a substring that
    &lt;ul&gt;
      &lt;li&gt;is a prefix&lt;/li&gt;
      &lt;li&gt;is a suffix&lt;/li&gt;
      &lt;li&gt;cannot be the string itself&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;eg for string &lt;code class=&quot;highlighter-rouge&quot;&gt;s = a c a c g a t a c a c&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;borders are &lt;code class=&quot;highlighter-rouge&quot;&gt;ac&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;acac&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;acac&lt;/code&gt; is the longest border&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Border table:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/border_table.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;b[j]&lt;/code&gt; is
    &lt;ul&gt;
      &lt;li&gt;the length of the longest border of &lt;code class=&quot;highlighter-rouge&quot;&gt;s[0...j-1]&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;max { k | s[0...k-1] = s[j-k...j-1] }&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;KMP seach :&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#kmp&quot;&gt;implementation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;this is O(n) worst case&lt;/li&gt;
  &lt;li&gt;naive method requires O(j&lt;sup&gt;2&lt;/sup&gt;) steps to find &lt;code class=&quot;highlighter-rouge&quot;&gt;b[j]&lt;/code&gt;, so O(m&lt;sup&gt;2&lt;/sup&gt;) overall&lt;/li&gt;
  &lt;li&gt;can be implemented in O(m + n) time (to set up border table and to conduct search)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;bm_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;boyer-moore-algorithm&quot;&gt;Boyer-Moore algorithm&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;string scanned left-to-right&lt;/li&gt;
  &lt;li&gt;mismatched char used to decide next comparison&lt;/li&gt;
  &lt;li&gt;need to pre-process string to record position of last occurence of each char in the alphabet&lt;/li&gt;
  &lt;li&gt;alphabet must be fixed in advance of search&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Position of last occurence of char &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt; in string &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;max { k | s[k] = c }&lt;/code&gt; if such a &lt;code class=&quot;highlighter-rouge&quot;&gt;k&lt;/code&gt; exists, &lt;code class=&quot;highlighter-rouge&quot;&gt;-1&lt;/code&gt; otherwise&lt;/li&gt;
  &lt;li&gt;store last occurence position of &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt; in array element &lt;code class=&quot;highlighter-rouge&quot;&gt;p[c]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Jump steps on a mismatch:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;if mismatch between &lt;code class=&quot;highlighter-rouge&quot;&gt;s[j]&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;t[i]&lt;/code&gt;, move &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; along so &lt;code class=&quot;highlighter-rouge&quot;&gt;p[t[i]]&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; aligns with &lt;code class=&quot;highlighter-rouge&quot;&gt;t[i]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;if this moves &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; in the “wrong direction”, instead move &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; one position to the right&lt;/li&gt;
  &lt;li&gt;if &lt;code class=&quot;highlighter-rouge&quot;&gt;t[i]&lt;/code&gt; doesn’t appear in the string, slide the string past &lt;code class=&quot;highlighter-rouge&quot;&gt;t[i]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Jump step cases:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;p[t[i]] &amp;lt; j and =&amp;gt; 0&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;new &lt;code class=&quot;highlighter-rouge&quot;&gt;i = i + m - 1 - p[t[i]]&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;new &lt;code class=&quot;highlighter-rouge&quot;&gt;j = m - 1&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;new &lt;code class=&quot;highlighter-rouge&quot;&gt;sp = sp + j - p[t[i]]&lt;/code&gt; (starting position)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;p[t[i]] &amp;gt; j&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;new &lt;code class=&quot;highlighter-rouge&quot;&gt;i = i + m - j&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;new &lt;code class=&quot;highlighter-rouge&quot;&gt;j = m - 1&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;new &lt;code class=&quot;highlighter-rouge&quot;&gt;sp = sp + 1&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;p[t[i]] = -1&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;new &lt;code class=&quot;highlighter-rouge&quot;&gt;i = i + m&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;new &lt;code class=&quot;highlighter-rouge&quot;&gt;j = m - 1&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;new &lt;code class=&quot;highlighter-rouge&quot;&gt;sp = sp + j + 1&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;BM &lt;a href=&quot;#bm&quot;&gt;implementation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BM complexity:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;worst case O(mn)&lt;/li&gt;
  &lt;li&gt;search for &lt;code class=&quot;highlighter-rouge&quot;&gt;s = ab...aa&lt;/code&gt; of length &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;t = aa...aaaa..aa&lt;/code&gt; of length &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;m - 1&lt;/code&gt; char comparisons needed at each &lt;code class=&quot;highlighter-rouge&quot;&gt;n - (m + 1)&lt;/code&gt; positions in text&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;section_4&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;graphs-and-graph-algorithms&quot;&gt;Graphs and graph algorithms&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#graph_basics_topic&quot;&gt;Graph basics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#graph_representations_topic&quot;&gt;Graph representations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#graph_search_topic&quot;&gt;Searching and traversal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#graph_weight_topic&quot;&gt;Weighted graphs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#topological_topic&quot;&gt;Topological ordering&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;graph_basics_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;graph-basics&quot;&gt;Graph basics&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;Undirected graphs:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;G = (V,E)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;each vertex is a point&lt;/li&gt;
  &lt;li&gt;each edge is a line joining a pair of vertices&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Connected:&lt;/strong&gt; every vertex pair is joined by a path&lt;br /&gt;
   &lt;strong&gt;Non-connected:&lt;/strong&gt; graph has 2+ connected components&lt;br /&gt;
   &lt;strong&gt;Tree:&lt;/strong&gt; connected and acyclic (no cycles)&lt;br /&gt;
   &lt;strong&gt;Forest:&lt;/strong&gt; acyclic and components are trees&lt;br /&gt;
   &lt;strong&gt;Complete (clique):&lt;/strong&gt; every vertex pair is joined by an edge&lt;br /&gt;
   &lt;strong&gt;Bipartite:&lt;/strong&gt; vertices are in two dijoint sets &lt;code class=&quot;highlighter-rouge&quot;&gt;U&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;W&lt;/code&gt; and &lt;strong&gt;every&lt;/strong&gt; edge joins a vertex in &lt;code class=&quot;highlighter-rouge&quot;&gt;U&lt;/code&gt; to one in &lt;code class=&quot;highlighter-rouge&quot;&gt;W&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/undirected_1.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For the graphs above:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;adjacent - &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;a,z&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Î&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;E&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;non-adjacent - &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;a,b&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;∉&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;E&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; is &lt;strong&gt;incident to&lt;/strong&gt; edge &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;a,z&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a, x, b, y, c&lt;/code&gt; is a path of length 4&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a, x, b, y, a&lt;/code&gt; is a cycle of length 4&lt;/li&gt;
  &lt;li&gt;all vertices have &lt;strong&gt;degree&lt;/strong&gt; 3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Directed graphs (digraphs):&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;D = (V,E)&lt;/code&gt; where &lt;code class=&quot;highlighter-rouge&quot;&gt;V&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;E&lt;/code&gt; are &lt;strong&gt;finite&lt;/strong&gt; sets&lt;/li&gt;
  &lt;li&gt;edges are ordered pairs&lt;/li&gt;
  &lt;li&gt;drawn as arrows&lt;/li&gt;
  &lt;li&gt;vertices have &lt;strong&gt;in-degrees&lt;/strong&gt; and &lt;strong&gt;out-degrees&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;paths and cycles must follow edge directions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/directed_1.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the graph above:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;u&lt;/code&gt; is adjacent &lt;strong&gt;to&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt; is ajdacent &lt;strong&gt;from&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;u&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; has in-degree 2 and out-degree 1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;graph_representations_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;graph-representations&quot;&gt;Graph representations&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;Representing the undirected graph G:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/undirected_2.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Representing the directed graph D:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/directed_2.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Implementing adjaceny lists:&lt;/strong&gt;&lt;br /&gt;
   Define classes representing&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;an entry of adjacency lists&lt;/li&gt;
  &lt;li&gt;a vertex (with a linked list representing its adjacency list)&lt;/li&gt;
  &lt;li&gt;a graph (with a size and an array of vertices)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Java &lt;a href=&quot;#adjacency_list&quot;&gt;implementation&lt;/a&gt; of an adjacency list&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;graph_search_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;graph-searching-and-traversal-algorithms&quot;&gt;Graph searching and traversal algorithms&lt;/h5&gt;

&lt;p&gt;Graph traversal is efficient if it visits all vertices of the graph in &lt;code class=&quot;highlighter-rouge&quot;&gt;O( |V| + |E| )&lt;/code&gt; time (by travelling along edges)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Depth-first search:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;follow a path of unvisited vertices until path can be extended no further&lt;/li&gt;
  &lt;li&gt;backtrack until an unvisited vertex is reached&lt;/li&gt;
  &lt;li&gt;repeat until there are no unvisited vertices (in all components of graph)&lt;/li&gt;
  &lt;li&gt;edges used form a &lt;strong&gt;depth-first spanning tree&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Represent it as:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;explicit stack&lt;/li&gt;
  &lt;li&gt;containing vertices on the path to the current vertex&lt;/li&gt;
  &lt;li&gt;popping corresponds to backtracking&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;DFS example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/dfs_1.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;DFS &lt;a href=&quot;#dfs&quot;&gt;implementation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DFS complexity:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;each vertex is visited ( &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; )&lt;/li&gt;
  &lt;li&gt;each element in adj. list is processed ( &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; )&lt;/li&gt;
  &lt;li&gt;O(n + m)&lt;/li&gt;
  &lt;li&gt;can adapt to adj. matrix representation, but this increases complexity to O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Applications of DFS:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;determine if graph is connected and/or identify its connected components&lt;/li&gt;
  &lt;li&gt;determine if a graph is bipartite&lt;/li&gt;
  &lt;li&gt;determine if a graph contains a cycle&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Breadth-first search:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;visit all adjacent vertices of current vertex (processing)&lt;/li&gt;
  &lt;li&gt;vertices processed in the order in which they are visited (queue)&lt;/li&gt;
  &lt;li&gt;continue until all vertices in current component have been processed&lt;/li&gt;
  &lt;li&gt;edges used form a &lt;strong&gt;breadth-first spanning tree&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Represent it as:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;queue&lt;/li&gt;
  &lt;li&gt;visited vertices are added&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;BFS example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/bfs_1.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;BFS &lt;a href=&quot;#bfs&quot;&gt;implementation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BFS complexity:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;each vertex visited and queued exactly once&lt;/li&gt;
  &lt;li&gt;each adj. list traversed once&lt;/li&gt;
  &lt;li&gt;O(n + m)&lt;/li&gt;
  &lt;li&gt;can adapt to adj. matrix as with DFS, but also O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Applications of BFS:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;finding distance between two vertices&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Distance between two vertices:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;assign distance &lt;code class=&quot;highlighter-rouge&quot;&gt;v = 0&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;carry out BFS from &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;when visiting a new vertex
    &lt;ul&gt;
      &lt;li&gt;assign its distance to be &lt;code class=&quot;highlighter-rouge&quot;&gt;1 + distance to its predecessor&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/bfs_2.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;graph_weight_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;weighted-graphs&quot;&gt;Weighted graphs&lt;/h5&gt;

&lt;p&gt;Each edge &lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt; has an integer weight given by &lt;code class=&quot;highlighter-rouge&quot;&gt;wt( e ) &amp;gt; 0&lt;/code&gt; (undirected or directed)&lt;br /&gt;
   Can represent weighted graphs using adj. lists and matrices as before&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/weighted_1.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/weighted_2.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dijkstra’s algorithm:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;finds shortest path from one vertex &lt;code class=&quot;highlighter-rouge&quot;&gt;u&lt;/code&gt; to all other vertices&lt;/li&gt;
  &lt;li&gt;maintains a set containing all vertices for which shortest path from &lt;code class=&quot;highlighter-rouge&quot;&gt;u&lt;/code&gt; is currently known&lt;/li&gt;
  &lt;li&gt;each vertex &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt; not in the set has a label &lt;code class=&quot;highlighter-rouge&quot;&gt;d(v)&lt;/code&gt; = length of a shortest path from &lt;code class=&quot;highlighter-rouge&quot;&gt;u -&amp;gt; v&lt;/code&gt; passing &lt;strong&gt;only&lt;/strong&gt; through vertices in the set&lt;/li&gt;
  &lt;li&gt;after adding &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt; to the set, carry out &lt;strong&gt;edge relaxation&lt;/strong&gt; (updating distance &lt;code class=&quot;highlighter-rouge&quot;&gt;d(w)&lt;/code&gt; for all vertices &lt;code class=&quot;highlighter-rouge&quot;&gt;w&lt;/code&gt; still not in the set)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Edge relaxation:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;suppose &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;w&lt;/code&gt; are not in &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt;, then we know
    &lt;ul&gt;
      &lt;li&gt;the shortest path from &lt;code class=&quot;highlighter-rouge&quot;&gt;u -&amp;gt; v&lt;/code&gt; passing only through &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;d(v)&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;the shortest path from &lt;code class=&quot;highlighter-rouge&quot;&gt;u -&amp;gt; w&lt;/code&gt; passing only through &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;d(w)&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;suppose &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt; is added to &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; and the edge &lt;code class=&quot;highlighter-rouge&quot;&gt;e = { v,w }&lt;/code&gt; has weight &lt;code class=&quot;highlighter-rouge&quot;&gt;wt( e )&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;calculate the shortest path &lt;code class=&quot;highlighter-rouge&quot;&gt;u -&amp;gt; w&lt;/code&gt; passing only through &lt;code class=&quot;highlighter-rouge&quot;&gt;S ∪ { v }&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/dijkstra_1.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is either:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the original path through &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; of length &lt;code class=&quot;highlighter-rouge&quot;&gt;d(w)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;the path combining edge &lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt; and shortest path &lt;code class=&quot;highlighter-rouge&quot;&gt;v -&amp;gt; u&lt;/code&gt; with length &lt;code class=&quot;highlighter-rouge&quot;&gt;wt( e ) + d(v)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Therefore, the distance is: &lt;br /&gt;
   &lt;code class=&quot;highlighter-rouge&quot;&gt;d(w) = min{ d(w), d(v) + wt( e ) }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Dijkstra’s algorithm &lt;a href=&quot;#dijkstra&quot;&gt;implementation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dijkstra complexity:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;with &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; vertices and &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; edges, using an &lt;strong&gt;unordered array&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;O(n) to initialise distances&lt;/li&gt;
      &lt;li&gt;O(n&lt;sup&gt;2&lt;/sup&gt;) to find minimum&lt;/li&gt;
      &lt;li&gt;O(m) for relaxation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;hence, O(n&lt;sup&gt;2&lt;/sup&gt;) overall&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;with &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; vertices and &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; edges, using a &lt;strong&gt;heap&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;O(n) to initialise distances and create heap&lt;/li&gt;
      &lt;li&gt;O(n log n) to find minimum&lt;/li&gt;
      &lt;li&gt;O(m log n) for relaxation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;hence, O(m log n) overall (more edges than vertices)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Dijkstra example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/dijkstra_2.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spanning tree:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;subgraph which is both a tree and spans every vertex&lt;/li&gt;
  &lt;li&gt;obtained from a connected graph by &lt;strong&gt;deleting edges&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;its weight = sum of weights of its edges&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;topological_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;topological-ordering&quot;&gt;Topological ordering&lt;/h5&gt;

&lt;p&gt;&lt;a name=&quot;section_5&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;np-completeness&quot;&gt;NP Completeness&lt;/h4&gt;

&lt;p&gt;&lt;a name=&quot;section_6&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;computability&quot;&gt;Computability&lt;/h4&gt;

&lt;p&gt;&lt;a name=&quot;heap_class&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;heap-class-implementation-in-java&quot;&gt;Heap class implementation in Java&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Heap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;// create empty heap of max capacity n&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  
    &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;// create heap of capacity n containing items from array a&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// impose heap property&lt;/span&gt;
    
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// build a heap on current items&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// for each non-leaf node in bottom-to-top right-to-left order&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// start at parent of final leaf&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;impose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// insert item k&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  
  &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// current position(starting at new leaf node)&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//swap with parent&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// new position is position of parent&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// finalise location of item&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// delete and return the max&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;deleteMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// root&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// swap root with last leaf&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;impose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// on bad value in root&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// impose property on node i&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;impose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;finished&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;finished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  
    &lt;span class=&quot;c1&quot;&gt;// find larger child&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// assume left child first&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// change if right exists and is larger&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// bad node&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// swap&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// new position&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;finished&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// not bad node&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// finalise location&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a name=&quot;heap_sort&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;heapsort-pseudocode&quot;&gt;Heapsort pseudocode&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Build&lt;/strong&gt; sequence into a heap; // O(n)
    &lt;ul&gt;
      &lt;li&gt;for (int k = 0; k &amp;lt; n-1; k++)&lt;/li&gt;
      &lt;li&gt;// invariant: items 0,…,n-k-1 form a heap&lt;/li&gt;
      &lt;li&gt;// invariant: items n-k,…,n-1 are sorted&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Find&lt;/strong&gt; the largest unsorted item; // is in position 0, so O(1)&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Swap&lt;/strong&gt; it into position n-1-k; // its correct place O(1)&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Reduce&lt;/strong&gt; the size of the heap by 1; // O(1)&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Impose&lt;/strong&gt; the heap property on position 0; // this is O(log n)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Restore&lt;/strong&gt; size to original value;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Loop is iterated &lt;code class=&quot;highlighter-rouge&quot;&gt;n - 1&lt;/code&gt; times&lt;br /&gt;
   Each iteration takes O(log n) time&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;radix_sort&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;radix-sort-pseudocode&quot;&gt;Radix sort pseudocode&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// helper method which would return the value represented by the b bits of x when starting at position p&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// a is the sequence to be sorted&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// m is the number of bits in each item of a&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// b is the block length of radix sort&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numIterations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numBuckets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ArraList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// sequence a&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// representing the buckets&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bucket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;numBuckets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numBuckets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numIterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// clear buckets&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numBuckets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;// distribute items in order&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// find correct bucket&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// clear sequence&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;// concatenate buckets in order&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numBuckets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;trie_alg&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;tries-1&quot;&gt;Tries&lt;/h6&gt;

&lt;p&gt;&lt;strong&gt;Search:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// search for a word w in a trie t&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// current position in w&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;labelled&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// if can match the char of word in the current position&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// end of word&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;intermediate&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;absent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;present&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// not at end of word&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// move to child&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// move to next char&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;absent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// can't match current char&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Insert:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// insert word w into trie t&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// go through chars of word&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;labelled&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;such&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mark&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;intermediate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// move to child node&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;mark&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;representing&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;trie_class&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;trie-class&quot;&gt;Trie class&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// label of incoming branch&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isWord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true when node represents a word&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sibling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// next sibling&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// first child&lt;/span&gt;
  
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  
    &lt;span class=&quot;nx&quot;&gt;letter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;isWord&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;sibling&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// include accessors and mutators for the various components of a class&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Trie&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Trie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MIN_VALUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;huff_contruct&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;huffman-tree-construction&quot;&gt;Huffman tree construction&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// set up leaf nodes&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;distinct&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;occuring&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parentless&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;frequency&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setCharacter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setLeftChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setRightChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// construct branch nodes and links&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parentless&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nodes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parentless&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parentless&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nodes&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;minimum&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setLeftChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setRightChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// the final z is root&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;lzw&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;lzw-compression-1&quot;&gt;LZW compression&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;initialise&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;codeword&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;initialise&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dictionary&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;exhausted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  
  &lt;span class=&quot;nx&quot;&gt;identify&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;longest&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;starting&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;represented&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;codeword&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// using k bits&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;// move to next position in t&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// move forward by the length of the string just encoded&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// char in next position&lt;/span&gt;
  
  &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;paired&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;available&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;codeword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// involves adding a new leaf node if d is represented by a trie&lt;/span&gt;
  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;lzw_decomp&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;lzw-decompression&quot;&gt;LZW decompression&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;initialise&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;codeword&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;initialise&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dictionary&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;codeword&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;compressed&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// read k bits&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lookUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// look up codeword in d&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// output decompressed string&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;exhausted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oldS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// copy last string decompressed&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;full&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;codeword&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loopUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// look up codeword in d&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// output decompressed string&lt;/span&gt;
  
  &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oldS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// string to add to d&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newS&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;paired&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;available&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;codeword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;brute_force&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;brute-force-algorithm-1&quot;&gt;Brute force algorithm&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// return smallest k such that s occurs in t starting at position k, or -1 if no k exists&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bruteForce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// length of string/pattern&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// length of text&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// starting position in t&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// curr position in t&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// curr position in s&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// not reached end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// chars match&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// move on in t&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// move on in s&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// start again in s&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// advance starting position&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// back up in text to new starting position&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;kmp&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;kmp-search-implementation&quot;&gt;KMP search implementation&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// return smallest k such that s occurs from position k in t, or -1 if no k exists&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// create border table&lt;/span&gt;
  
  &lt;span class=&quot;nx&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// set up border table&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// not reached end of text&lt;/span&gt;
  
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// positions match&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// move on in text&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// move on in string&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// reached end of string so a match&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// mismatch so adjust curr position in string using border table&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// if there is a common prefix/suffix then change position in string&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// no common prefix/suffix&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// then move forward 1 position in text if not advanced&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// else start from beginning of string&lt;/span&gt;
	  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// no occurence&lt;/span&gt;
  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;bm&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;boyer-moore-implementation&quot;&gt;Boyer-Moore implementation&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// return smallest k such that s occurs at k in t, or -1 if no k exists&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// pos in text&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// pos in string&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// declare a suitable array p&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// set up last occurence array&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// match&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// move back in text&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// move back in string&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;sp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]);&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]);&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// return to end of string&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;adjacency_list&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;adjacency-list-implementation&quot;&gt;Adjacency list implementation&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// an entry in the adjacency list&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AdjListNode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertexIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// possibly other fields eg weight, capacity...&lt;/span&gt;
  
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AjdListNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;vertexIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getVertexIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertexIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setVertexIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;vertexIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// a vertex&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vertex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// the index of this vertex&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AjdListNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adjList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// and its adjacency list&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// possibly other fields eg storing data&lt;/span&gt;
  
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;adjList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AjdListNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// add vertex with index m to the adj list&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addToAdjList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;adjList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addLast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AjdListNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertexDegree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adjList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// a graph&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Graph&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numVertices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// possibly other fields for graph properties&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;// create graph with vertices indexed 0,..., n-1&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;numVertices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;vertices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numVertices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;dfs&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;depth-first-search-implementation&quot;&gt;Depth-first search implementation&lt;/h6&gt;

&lt;p&gt;Add this to the previously defined &lt;strong&gt;vertex&lt;/strong&gt; class:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// index of predecessor vertex&lt;/span&gt;
   
   &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getVisited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setVisited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;visited&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getPred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setPred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;pred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And add this to the previously defined &lt;strong&gt;graph&lt;/strong&gt; class:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;c1&quot;&gt;// visit vertex v with predecessor p&lt;/span&gt;
   &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Vertex&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   
     &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setVisited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// update&lt;/span&gt;
	 &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setPred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// set predecessor (-1 if none)&lt;/span&gt;
	 &lt;span class=&quot;nx&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AdjListNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAjdList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// get adj. list&lt;/span&gt;
	 
	 &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AdjListNode&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// go through all adjacent vertices&lt;/span&gt;
	   &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vertices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getVisited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vertices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// if current vertex hasn't been visited, continue the search from there&lt;/span&gt;
	 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	 
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   
   &lt;span class=&quot;c1&quot;&gt;// carry out a df traversal&lt;/span&gt;
   &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   
     &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Vertex&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setVisited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// initialise&lt;/span&gt;
	 &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Vertex&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getVisited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// if vertex not visited, start search there&lt;/span&gt;
   
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;bfs&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;breadth-first-search-implementation&quot;&gt;Breadth-first search implementation&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Vertex&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setVisited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// initialise&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Vertex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Vertex&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getVisited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// start search&lt;/span&gt;
  
    &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setVisited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// now visited&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setPredecessor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// v initial vertex&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ready to be processed&lt;/span&gt;
	
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	
	  &lt;span class=&quot;nx&quot;&gt;Vertex&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// get next vertex to process&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AdjListNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAdjList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// get its adj. list&lt;/span&gt;
	  
	  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AdjListNode&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// go through its adj. list&lt;/span&gt;
	  
	    &lt;span class=&quot;nx&quot;&gt;Vertex&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getVertexIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// next vertex in list&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getVisited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		  
		  &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setVisited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// now visited&lt;/span&gt;
		  &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setPredecessor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// set predecessor of w to be u&lt;/span&gt;
		  &lt;span class=&quot;nx&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// add to queue&lt;/span&gt;
		  
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	  
	  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;dijkstra&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;dijkstras-algorithm-implementation&quot;&gt;Dijkstra’s algorithm implementation&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// S is set of vertices for which shortest path from u is known&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// d(w) is length of a shortest path from u to w passing only through vertices of S&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// initialise S&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertex&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// initialise distances&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// still vertices to add in S&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;minimum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adjacent&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// perfom relaxation&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 26 Dec 2017 18:50:00 +0000</pubDate>
        <link>http://localhost:4000/cs-notes/level3/semester1/2017/12/26/algorithmics-1.html</link>
        <guid isPermaLink="true">http://localhost:4000/cs-notes/level3/semester1/2017/12/26/algorithmics-1.html</guid>
        
        
        <category>Level3</category>
        
        <category>Semester1</category>
        
      </item>
    
      <item>
        <title>Professional Software Development</title>
        <description>&lt;h4 id=&quot;video-lecture-3&quot;&gt;Video Lecture 3&lt;/h4&gt;
&lt;!--excerpt--&gt;

&lt;h4 id=&quot;video-lecture-5&quot;&gt;Video Lecture 5&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-6&quot;&gt;Video Lecture 6&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-7&quot;&gt;Video Lecture 7&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-8&quot;&gt;Video Lecture 8&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-9&quot;&gt;Video Lecture 9&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-10&quot;&gt;Video Lecture 10&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-12&quot;&gt;Video Lecture 12&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-13&quot;&gt;Video Lecture 13&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-14&quot;&gt;Video Lecture 14&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-15&quot;&gt;Video Lecture 15&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-16&quot;&gt;Video Lecture 16&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-19&quot;&gt;Video Lecture 19&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-22&quot;&gt;Video Lecture 22&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-23&quot;&gt;Video Lecture 23&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-26&quot;&gt;Video Lecture 26&lt;/h4&gt;
&lt;h5 id=&quot;software-inspection-techniques&quot;&gt;Software Inspection Techniques&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;What are Inspections?&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Managing an Inspection&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;What can be the subject of an inspection?
    &lt;ul&gt;
      &lt;li&gt;application source code packages, classes or methods&lt;/li&gt;
      &lt;li&gt;source code documentation&lt;/li&gt;
      &lt;li&gt;test harnesses&lt;/li&gt;
      &lt;li&gt;design descriptions, such as UML component or class diagrams&lt;/li&gt;
      &lt;li&gt;requirements specications, such as user stories&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Why take inspections?
    &lt;ul&gt;
      &lt;li&gt;Deteck defects in software&lt;/li&gt;
      &lt;li&gt;identify opportunities for refactoring&lt;/li&gt;
      &lt;li&gt;as part of white/glass box testing process, or QA activities&lt;/li&gt;
      &lt;li&gt;develop a shared understanding of the purpose and function of a system&lt;/li&gt;
      &lt;li&gt;share good practice between team&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Dont use inspections for&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Identifying poor performance&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;inspections should be used to identify improvement&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;total defects = target method + other methods + + undetected&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;defect detection rate = (target method) / (total defects)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;How effective is it?
    &lt;ul&gt;
      &lt;li&gt;Fagan [1976] reported a DDR of 66% and 82% for two IBM case studies employing a comprehensive inspection process&lt;/li&gt;
      &lt;li&gt;Jones [1986] reported a DDR of 60% for design inspections alone, compared to a DDR of just 25% for unit testing&lt;/li&gt;
      &lt;li&gt;Boehm [1981] surveyed four case studies reported between1978 and 1980, finding that inspections discovered between 63% and 75% of defects&lt;/li&gt;
      &lt;li&gt;Wilkerson et al. [2012] found that inspections led to fewer defects left in a system than a test driven development approach to implementation&lt;/li&gt;
      &lt;li&gt;Runeson et al. [2006] reported a more complex picture from a survey of 12 case studies&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Cost of inspections?
    &lt;ul&gt;
      &lt;li&gt;Fagan [1986] reported several anecdotal case studies where
  development and/or maintenance costs were signicantly
  reduced as a net result of applying inspections. One project
  experienced a 95% reduction in maintenance costs&lt;/li&gt;
      &lt;li&gt;Boehm [1981]’s survey of case studies reported that code
  inspections could produce between 10 and 120 delivered lines
  of source code per person hour, compared with 5-24 lines for
  unit testing&lt;/li&gt;
      &lt;li&gt;Wilkerson et al. [2012] found that applying software
  inspections cost about three times a much in total time
  compared with test driven development&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;images/soft_insp1.PNG&quot; alt=&quot;initial costs of software inspections&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When to conduct an inspection?
    &lt;ul&gt;
      &lt;li&gt;Periodically as part of a clean-up or refactoring exercise&lt;/li&gt;
      &lt;li&gt;After a period of requirements gathering and specication&lt;/li&gt;
      &lt;li&gt;During staging of a new feature implementation&lt;/li&gt;
      &lt;li&gt;As a feature is implemented (pair programming)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Roles in inspection
    &lt;ul&gt;
      &lt;li&gt;Mod: responsible for coordinating the arrangements for the inspection&lt;/li&gt;
      &lt;li&gt;Author(s): &amp;gt;=1 team members who make &amp;gt;=1 software atifacts for inspection&lt;/li&gt;
      &lt;li&gt;Inspector(s): responsibel for identifying defects in artifact during inspection&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;../images/soft_insp2.PNG&quot; alt=&quot;software inspection process&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Choosing what to review
    &lt;ul&gt;
      &lt;li&gt;if artifact’s been changed, must be inspected before change can be committed to prod&lt;/li&gt;
      &lt;li&gt;if artifact is associated with high priority feature&lt;/li&gt;
      &lt;li&gt;if artifact has been associated with large no of defect reports&lt;/li&gt;
      &lt;li&gt;if artifact has been subject to a large number of recent changes&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Static analysis tools
    &lt;ul&gt;
      &lt;li&gt;Design metrics, used to identify parts of system that are poorly structured&lt;/li&gt;
      &lt;li&gt;Source code metrics
        &lt;ul&gt;
          &lt;li&gt;No. of lines of code per funct/module&lt;/li&gt;
          &lt;li&gt;Ratio btwn executable and comment lines of code&lt;/li&gt;
          &lt;li&gt;No. of spelling mistakes&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Soft process metrics
        &lt;ul&gt;
          &lt;li&gt;No. of changes per commit for module or over a period&lt;/li&gt;
          &lt;li&gt;No of defects discovered over a period for a module&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Rules for conducting an inspection
    &lt;ul&gt;
      &lt;li&gt;Focus on identifying imporovement opportunities, not recrimination&lt;/li&gt;
      &lt;li&gt;purposde of inspections is to uncover defects, not recommend remedial actions&lt;/li&gt;
      &lt;li&gt;allow inspectors to take breaks. too much concentration leads to defects being missed&lt;/li&gt;
      &lt;li&gt;desseminate and act on recommended actions quickly&lt;/li&gt;
      &lt;li&gt;monitor remedial action to make sure it addresses the identified problems&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Strats for identifying defects
    &lt;ul&gt;
      &lt;li&gt;adhoc&lt;/li&gt;
      &lt;li&gt;checklist directed&lt;/li&gt;
      &lt;li&gt;senarios&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Linus’ Law&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Given enough eyeballs, all bugs are shallow&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Key Point&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Inspections are an essential quality assurance tool&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;video-lecture-27&quot;&gt;Video Lecture 27&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-27a&quot;&gt;Video Lecture 27a&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-28&quot;&gt;Video Lecture 28&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-29&quot;&gt;Video Lecture 29&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-30&quot;&gt;Video Lecture 30&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-30a&quot;&gt;Video Lecture 30a&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-31&quot;&gt;Video Lecture 31&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-32&quot;&gt;Video Lecture 32&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-33&quot;&gt;Video Lecture 33&lt;/h4&gt;

</description>
        <pubDate>Sat, 23 Sep 2017 19:50:00 +0100</pubDate>
        <link>http://localhost:4000/cs-notes/level3/semester1/2017/09/23/professional-software-development.html</link>
        <guid isPermaLink="true">http://localhost:4000/cs-notes/level3/semester1/2017/09/23/professional-software-development.html</guid>
        
        
        <category>Level3</category>
        
        <category>Semester1</category>
        
      </item>
    
      <item>
        <title>Interactive Systems</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory - edit this post and re-build (or run with the &lt;code class=&quot;highlighter-rouge&quot;&gt;-w&lt;/code&gt; switch) to see your changes!
To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention: YYYY-MM-DD-name-of-post.ext.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sat, 23 Sep 2017 19:50:00 +0100</pubDate>
        <link>http://localhost:4000/cs-notes/level3/semester1/2017/09/23/interactive-systems.html</link>
        <guid isPermaLink="true">http://localhost:4000/cs-notes/level3/semester1/2017/09/23/interactive-systems.html</guid>
        
        
        <category>Level3</category>
        
        <category>Semester1</category>
        
      </item>
    
      <item>
        <title>Data Fundamentals</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory - edit this post and re-build (or run with the &lt;code class=&quot;highlighter-rouge&quot;&gt;-w&lt;/code&gt; switch) to see your changes!
To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention: YYYY-MM-DD-name-of-post.ext.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sat, 23 Sep 2017 19:50:00 +0100</pubDate>
        <link>http://localhost:4000/cs-notes/level3/semester1/2017/09/23/data-fundamentals.html</link>
        <guid isPermaLink="true">http://localhost:4000/cs-notes/level3/semester1/2017/09/23/data-fundamentals.html</guid>
        
        
        <category>Level3</category>
        
        <category>Semester1</category>
        
      </item>
    
      <item>
        <title>Advanced Programming</title>
        <description>&lt;h4 id=&quot;lecture-1&quot;&gt;Lecture 1&lt;/h4&gt;
&lt;h4 id=&quot;introduction&quot;&gt;Introduction&lt;/h4&gt;

&lt;h5 id=&quot;application-level&quot;&gt;Application Level&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Java - Strong Types&lt;/li&gt;
  &lt;li&gt;Python - Auto Memory Mgt&lt;/li&gt;
  &lt;li&gt;Haskel - Abstract Resources&lt;/li&gt;
  &lt;li&gt;… - IDE
&lt;!--excerpt--&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;systems-level&quot;&gt;Systems Level&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Languages: C, Rust, OCaml&lt;/li&gt;
  &lt;li&gt;Used for:
    &lt;ul&gt;
      &lt;li&gt;OS&lt;/li&gt;
      &lt;li&gt;Communications&lt;/li&gt;
      &lt;li&gt;Numerical&lt;/li&gt;
      &lt;li&gt;Drivers&lt;/li&gt;
      &lt;li&gt;Embedded Systems&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;C/C++ most heavily used programming language&lt;/li&gt;
  &lt;li&gt;Used in OS and embeded systems&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;edit---compile---link---execute-cycle&quot;&gt;Edit - Compile - Link - Execute Cycle&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Source Files &amp;gt; Compiler &amp;gt; Bin &amp;gt; Linker &amp;gt; Executable
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc -o &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;test.o
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;memory-layout&quot;&gt;Memory Layout&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Higher Mem address
    &lt;ul&gt;
      &lt;li&gt;stack&lt;/li&gt;
      &lt;li&gt;heap&lt;/li&gt;
      &lt;li&gt;bss segment
        &lt;ul&gt;
          &lt;li&gt;stores uninitialized variables&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;data segment
        &lt;ul&gt;
          &lt;li&gt;initialized data is stord&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;test segment
        &lt;ul&gt;
          &lt;li&gt;read-only, holds instructions that the processor understands&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Lower mem adress&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;stack &amp;amp; heap shared memory&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;makefiles&quot;&gt;Makefiles&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;makes compiling bigger programs easier
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc -c mod_a.c
gcc -c mod_b.c
gcc -c mod_a.o mod_b.o -o app_x
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;becomes&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Makefile&quot;&gt;app_x: mod_a.o mod_b.o
	gcc mod_a.o mod_b.o -o app_x

mod_a.o: mod_a.c global.h
	gcc -c mod_a.c

mod_b.o: mod_b.c global.g
	gcc -c mod_a.c
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CFLAGS = -W -Wall
%.o : %.c
	gcc -c $(CFLAGS) $&amp;lt; -o $@
OBJECTS = mod_a.o mod_b.o

app_x: $(OBJECTS)
	gcc $(OBJECTS) –o app_x

mod_a.o: mod_a.c global.h
mod_b.o: mod_b.c global.h
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;lecture-2&quot;&gt;Lecture 2&lt;/h1&gt;
&lt;h1 id=&quot;overview-of-c&quot;&gt;Overview of C&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Must contain main()
    &lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;int main(){
  // something
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
printf()
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;char - 8 bits&lt;/li&gt;
  &lt;li&gt;short - 16 bits&lt;/li&gt;
  &lt;li&gt;long - 32 bits&lt;/li&gt;
  &lt;li&gt;float - 32 bit&lt;/li&gt;
  &lt;li&gt;long long - 64 bits&lt;/li&gt;
  &lt;li&gt;double - 64-bit&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;printf-formatting&quot;&gt;printf formatting&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;%d - print as a decimal integer&lt;/li&gt;
  &lt;li&gt;%6d - print as a decimal integer at least 6 characters wide with leading blanks&lt;/li&gt;
  &lt;li&gt;%06d - print as a decimal integer at least 6 characters wide with leading zeros&lt;/li&gt;
  &lt;li&gt;%f - print as a floating point number&lt;/li&gt;
  &lt;li&gt;%6f - print as a floating point number at least 6 characters wide&lt;/li&gt;
  &lt;li&gt;%.2f - print as a floating point number with 2 digits after the decimal point&lt;/li&gt;
  &lt;li&gt;%6.2f - print as a floating point number at least 6 characters wide with 2 digits after the decimal point&lt;/li&gt;
  &lt;li&gt;%c - print as a character&lt;/li&gt;
  &lt;li&gt;%s - print as a string&lt;/li&gt;
  &lt;li&gt;%x - print as a hexadecimal integer&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;while(condition) {
	statement;
}

for (int = i; i &amp;lt; length; ++i) {
	statement;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;//Constant
#define LOWER 0
#define UPPER 300
#define STEP 20
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// Character input
#include &amp;lt;stdio.h&amp;gt;
...
for (c = getchar(); c!=EOF;c=getchar()){
	statement;
}
// or
while ((c = getchar()) != EOF) {
	statement;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;arrays&quot;&gt;Arrays&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;int numbers[10];
numbers[4];
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;functions&quot;&gt;Functions&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// Must use prototype before
return-type function-name (parameter declarations, if any);
....
return-type function-name (parameter declarations, if any) {
	statements;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;call by value
    &lt;ul&gt;
      &lt;li&gt;manipulate actual values&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;call by reference
    &lt;ul&gt;
      &lt;li&gt;cannot manipulate actual values&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;arrays passewd by reference&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;/// External Variables
extern type varName;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;signed
    &lt;ul&gt;
      &lt;li&gt;can be negative or positive ($2^-(n-1)$ to $2^(n-1)$)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;unsigned
    &lt;ul&gt;
      &lt;li&gt;always positive or 0&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;escape-sequences&quot;&gt;escape sequences&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\a - alert (bell) character
\b - backspace
\f - formfeed
\n - newline
\r - carriage return
\t - horizontal tab
\v - vertical tab
\\ - backslash
\?
\'
\&quot;
\ooo - octal number
\xhh - hexadecimal number
\0 - null character (EOS)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;‘x’ - integer representing value of letter x&lt;/li&gt;
  &lt;li&gt;“x” - array of 2 chars, ‘x’ and ‘\0’&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// enum
enum months {JAN = 1; FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC};
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;variables-default-initialized&quot;&gt;Variables default initialized&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;external
    &lt;ul&gt;
      &lt;li&gt;0&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;automatic
    &lt;ul&gt;
      &lt;li&gt;undefined&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;“const” can be used with array arguments to functions, to tell the function not to change the array
    &lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;int strlen(const char[])
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;Conversion takes place across assignments; the value of the right hand side is converted to the type of the left hand side, which is the type of the result&lt;/li&gt;
  &lt;li&gt;Longer integers are converted to shorter ones by dropping the excess high order bits&lt;/li&gt;
  &lt;li&gt;float to int conversions cause truncation of any fractional part&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;cast&quot;&gt;cast&lt;/h4&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expression&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;++n // increments before value us used
n++ // increments after value is used
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;bitwise-operations&quot;&gt;Bitwise operations&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&amp;amp; - AND&lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;- OR&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;^ - EXOR&lt;/li&gt;
  &lt;li&gt;« - left shift&lt;/li&gt;
  &lt;li&gt;
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;ul&gt;
          &lt;li&gt;right shift&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;~ - one’s complement&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;n = n &amp;amp; 0xff;
/*sets all bits of n to 0 except the low order 8 bits */
n = n &amp;amp; ~0xff;
/* zeroes the low order 8 bits */
n = n | 0x11;
/* sets bits 0 and 4 to 1, leaving all others alone */
n = n ^ 0x11;
/* if n’s bit 0 has a value of 0, set it to 1; if it is 1, set it to
0; same for bit 4 */
n = n &amp;lt;&amp;lt; 2;
/* shift n’s value 2 bits left, filling with 0’s; equivalent to
multiplying by 4 */
n = n &amp;gt;&amp;gt; 3;
/* shift n’s value 3 bits right; if n is signed, fill vacated
bits with the sign bit; if unsigned, fill with 0; equivalent
to division by 8 */
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;x = expr1 ? expr2 : expr3;
// is the same as
if (expr1) {
	x = expr2;
} else {
	x = expr3;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Operations&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Associativity&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;() [] -&amp;gt; .&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;! ~ ++ – + - * &amp;amp; (type) sizeof&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;right to left&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;* / %&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;+ -&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;« »&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&amp;lt; &amp;lt;= &amp;gt; &amp;gt;=&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;== !=&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&amp;amp;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;^&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;|&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&amp;amp;&amp;amp;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;||&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;?;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;right to left&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;= += -= *= /= %= &amp;amp;= ^= |= «= »=&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;right to left&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;,&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;chapter-3&quot;&gt;Chapter 3&lt;/h1&gt;
&lt;h2 id=&quot;control-statements&quot;&gt;Control statements&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;if (/* condition */) {
	/* code */
} else if (/* condition */) {
	/* code */
} else {
	/* code */
}

while (/* condition */) {
	/* code */
}

for (size_t i = 0; i &amp;lt; count; i++) {
	/* code */
}

do {
	/* code */
} while(/* condition */);

switch (/* expression */) {
	case /* value */:
		/* statement */;
		break;
	default /* value */ :
		/* statement */;
		break;
}

for (. . .)
	for (. . .) {
		. . .
		if (disaster)
			goto error;
		. . .
	}

error:
/* cleanup the mess */
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;chapter-4&quot;&gt;Chapter 4&lt;/h1&gt;
&lt;h2 id=&quot;functions-1&quot;&gt;Functions&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// always use prototypes
return-type name(/* arguments */);

return-type name(/* arguments */) {
	/* code */
	return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;if funciton doesn’t have a type, it is set to int as default&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;static-variables&quot;&gt;Static Variables&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;static int sp;
// can only use this variable inside the file it's declared in
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;internal static variables are local to a particular function, just as automatic variables are, but unlike automatics, they remain in existence rather than coming and going each time that the function is activated&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;register-variables&quot;&gt;Register Variables&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;The keyword register hints to compiler that a given variable can be put in a register. It’s compiler’s choice to put it in a register or not&lt;/li&gt;
  &lt;li&gt;Registers are faster than memory to access, so the variables which are most frequently used in a C program can be put in registers using register keyword&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;register int x;
int f(register unsigned m, register long n) {…}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;preprocessor&quot;&gt;Preprocessor&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// file inclusion
#include &quot;filename&quot;
#include &amp;lt;filename&amp;gt;

// macro substitution
#define name replacement-text
// use &quot;\&quot; to continue for multiple lines
#define name replacement-textreplacement-textreplacement-textreplacement-text\
replacement-textreplacement-textreplacement-text\
replacement-textreplacement-textreplacement-text
// ## can concatenate arguments
#define paste(front, back) front ## back
paste(name, 1);
// will give
name1;

// Conditional evaluation
#if
	#endif
	#else
	#elif
// eg
#if SYSTEM == SYSV
	#define HDR “sysv.h”
#elif SYSTEM == BSD
	#define HDR “bsd.h”
#elif SYSTEM == MSDOS
	#define HDR “msdos.h”
#else
	#define HDR “default.h”
#endif /* SYSTEM */
#include HDR


#ifdef
#ifndef
// ifdef/ifndef is the same as checks if contents of a header file is only included once
#if !defined(_HDR_H_)
#define _HDR_H_
/* contents of hdr.h go here */
#endif /*_HDR_H_ */
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;Automatic variable
    &lt;ul&gt;
      &lt;li&gt;lives inside function&lt;/li&gt;
      &lt;li&gt;allocated upon function call&lt;/li&gt;
      &lt;li&gt;deallocated upon function return&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;External variable
    &lt;ul&gt;
      &lt;li&gt;lives outside functions&lt;/li&gt;
      &lt;li&gt;allocated upon program start&lt;/li&gt;
      &lt;li&gt;never deallocated&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;visibility-of-variables&quot;&gt;Visibility of variables&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;As default all top-level names are visible everywhere&lt;/li&gt;
  &lt;li&gt;use static to restrict visibility&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;chapter-5&quot;&gt;Chapter 5&lt;/h2&gt;
&lt;h3 id=&quot;pointers&quot;&gt;pointers&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// points to a value of type int
int*;
// points to a value of type int*
int**;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;purpose&quot;&gt;purpose?&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;call-by-reference&lt;/li&gt;
  &lt;li&gt;linked data structures&lt;/li&gt;
  &lt;li&gt;array indexing&lt;/li&gt;
  &lt;li&gt;higher order functions - functions that call some of their own arguments&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// stores address of int X in P
int *P = &amp;amp;X;

// writes 42 to the address pointed to by P
*P = 42;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;&amp;amp; cannot be used for register variables or complex expressions&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;int x = 1, y = 2;
int z[10];
int *p, *q; /* p and q are pointers to int */

p = &amp;amp;x; /* p now points to x */
y = *p; /* y is now 1 */
*p = 0; /* x is now 0 */
q = &amp;amp;z[3]; /* q now points to z[3] */
p = q; /* p now points to z[3] */
while (p == q) /* loop exits on 1st iter */
	break;
if (p != NULL) /* address of z[3] != 0 */
	p = &amp;amp;z[0]; /* p now points to z[0] */
if (q)
	q = &amp;amp;z[0]; /* q now equals p; */
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;Use pointers to call by reference
    &lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;swap(&amp;amp;a[i], &amp;amp;a[j])
// instead of
swap(intx , int y)
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;int a[10];
int *pa;

pa = a; // points to a[0]
pa++; // points to a[1]

// given pointers q, p that points to the same array
q-p; // is the number of array elements between pointers p ad q

//-------------

char amsg[] = &quot;this is a string&quot;; // array of 17 characters including '\0'
char *pmsg = &quot;this is a string&quot; // pointer to an array of the same 17 chars
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;pmsg can be resized but amsg can’t;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;memory-management&quot;&gt;Memory management&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;malloc(); // requests given no. of bytes adn returns a void * to the first byte
sizeof(t); // no. of bytes required to store a value of type t

free(); // deallocates memory that was malloced;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;given
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./program hello world
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// in int main(int argc *argv[]);
argc == 3
argv[0] == &quot;./program&quot;;
argv[1] == &quot;hello&quot;;
argv[2] == &quot;world&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;function-pointers&quot;&gt;Function pointers&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;void sort(char *lineptr[], int left, int right, int (*comp)(void *, void *));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;chapter-7&quot;&gt;Chapter 7&lt;/h2&gt;
&lt;h4 id=&quot;standard-input-and-output&quot;&gt;Standard Input and output&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;#include &amp;lt;stdio.h&amp;gt;

int getchar(void); // read one character at a time
int getchat(); // return next input char, returns EOF on end
int putchar(int ch); // prints ch to stdout
printf(); // prints to stdout
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;formated-io&quot;&gt;Formated I/O&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// Format string determines type of remaining arguments
int printf(const char *format, ...);
printf(&quot;%d\n&quot;, 8);

int scanf(char *format, ...); // same as printf formatting
int day, year;
char monthname[20];
scanf(“%d %s %d”, &amp;amp;day, monthname, &amp;amp;year);
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Character&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Input Data&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;d&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;decimal int&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;i&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;integer. integer may be octal(leading 0) or hexadecimal(leading 0x/0X)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;o&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;octal int(with/without leading 0)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;u&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;unsigned int&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;x&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;hexadecimal int&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;c&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;char&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;s&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;string&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;e,f,g&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;floating point with optional sight/decimal point/exponential&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;%&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;literal %, no assignment is made&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;file-io&quot;&gt;File I/O&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;FILE *fopen(char *name, char *mode);
int getc(FILE *fp);
int putc(int c, FILE *fp);
int fclose(FILE *fp);

// printf and scanf variants
int fscanf(FILE *fp, char *format, ...);
int fprintf(FILE *fp, char *format, ...);

// line buffered input/output
char *fgets(char *line, int maxline, FILE *fp);
int fputs(char *line, FILE *fp);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;chapter-6&quot;&gt;Chapter 6&lt;/h2&gt;
&lt;h4 id=&quot;structs&quot;&gt;Structs&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;struct [tag] {
	member declarations
};

struct point {
	int x;
	int y;
};

struct point p = {320, 200};
struct point q;
struct point *r;

q = p; // struct assignment
r = &amp;amp;q; // address of struct variable q

q.y; // access struct member y
r-&amp;gt;x; // dereference
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;Legal Operations
    &lt;ul&gt;
      &lt;li&gt;copying&lt;/li&gt;
      &lt;li&gt;passing to a function&lt;/li&gt;
      &lt;li&gt;returning from a function&lt;/li&gt;
      &lt;li&gt;taking the address with &amp;amp;&lt;/li&gt;
      &lt;li&gt;accessing members&lt;/li&gt;
      &lt;li&gt;assigning to members&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Illegal Operations
    &lt;ul&gt;
      &lt;li&gt;arithmetic&lt;/li&gt;
      &lt;li&gt;comparisons&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;self-referential-structs&quot;&gt;Self-referential structs&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;struct tnode {
	int value; // payload
	struct tnode *left; // ptr to left child
	struct tnode *right; // ptr to right child
};

struct tnode *;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;typedefs&quot;&gt;Typedefs&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;create new data type synonyms
    &lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;typedef type synonym;
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;```C
typedef int Length; // Length is synonym for int
typedef char *String; // String is synonym for char *&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Length len, maxlen; // Length variables
Length *lengths; // ptr to (array of) Length
String lineptr[MAXLINES]; // array of String
Length strlen(String s); // prototype&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
#### Unions
- Variable that may hold objects of different types and sizes
```C
union const_value { // type declaration
	int ival;
	double dval;
	char *sval;
};
union const_value val; // variable definition
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;assignment to any union member turns all other members into garbage&lt;/li&gt;
  &lt;li&gt;compiler doesn’t track this&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;differences-between-java-and-c&quot;&gt;Differences between Java and C&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Interface support
    &lt;ul&gt;
      &lt;li&gt;Java compiler checks that a class implements its interface&lt;/li&gt;
      &lt;li&gt;C compiler doesn’t check that .c file defines what .h declares&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Memory management
    &lt;ul&gt;
      &lt;li&gt;Java garbage collector&lt;/li&gt;
      &lt;li&gt;In C unused memory mused be freed explicitly&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Memory protection
    &lt;ul&gt;
      &lt;li&gt;Java - private attributes cannot be tampered with&lt;/li&gt;
      &lt;li&gt;Pointers to opaque structs can still be dereferenced
        &lt;ul&gt;
          &lt;li&gt;never leak pointers to internal data structures, for security reasons.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;threads-and-concurrency&quot;&gt;Threads and Concurrency&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Concurency&lt;/em&gt; means multiple computations are happening at the same time.&lt;/p&gt;

&lt;h4 id=&quot;process&quot;&gt;Process&lt;/h4&gt;
&lt;p&gt;A &lt;em&gt;process&lt;/em&gt; is an instance of a running program that is isolated from other processes on the same machine. In particular, it has its own private section of the machine’s memory.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Processes has:
    &lt;ul&gt;
      &lt;li&gt;An address space&lt;/li&gt;
      &lt;li&gt;A collection of OS state&lt;/li&gt;
      &lt;li&gt;A CPU context - a thread of control&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;threads&quot;&gt;Threads&lt;/h4&gt;
&lt;p&gt;A &lt;em&gt;thread&lt;/em&gt; is a locus of control inside a running program. Think of it as a place in the program that is being run, plus the stack of method calls that led to that place (so the thread can go back up the stack when it reaches return statements).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Why use threads?
    &lt;ul&gt;
      &lt;li&gt;Split program into routines to execute in parallel&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Shares a process address space with &amp;gt;= 0 threads&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;thread-models&quot;&gt;Thread Models&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Manager/Worker
    &lt;ul&gt;
      &lt;li&gt;Manager handles I/O and assignes work to worker threads&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Peer
    &lt;ul&gt;
      &lt;li&gt;similar to manager/worker, but after the main thread creates other threads it participates in the work&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Pipeline
    &lt;ul&gt;
      &lt;li&gt;Each thread handles a different stage of an assemply line&lt;/li&gt;
      &lt;li&gt;Threads hand word to each other in producer-consumer relationship&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;generic-threading-concepts&quot;&gt;Generic Threading Concepts&lt;/h2&gt;

&lt;h2 id=&quot;java-support-for-multi-threading&quot;&gt;Java support for multi-threading&lt;/h2&gt;

&lt;h2 id=&quot;pthreads&quot;&gt;PThreads&lt;/h2&gt;

&lt;h2 id=&quot;thread-safe-adts&quot;&gt;Thread Safe ADTs&lt;/h2&gt;

&lt;h2 id=&quot;memory-management-1&quot;&gt;Memory Management&lt;/h2&gt;

&lt;h2 id=&quot;openmp&quot;&gt;OpenMP&lt;/h2&gt;

</description>
        <pubDate>Sat, 23 Sep 2017 19:50:00 +0100</pubDate>
        <link>http://localhost:4000/cs-notes/level3/semester1/2017/09/23/advanced-programming.html</link>
        <guid isPermaLink="true">http://localhost:4000/cs-notes/level3/semester1/2017/09/23/advanced-programming.html</guid>
        
        
        <category>Level3</category>
        
        <category>Semester1</category>
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory - edit this post and re-build (or run with the &lt;code class=&quot;highlighter-rouge&quot;&gt;-w&lt;/code&gt; switch) to see your changes!
To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention: YYYY-MM-DD-name-of-post.ext.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sun, 10 Nov 2013 10:18:00 +0000</pubDate>
        <link>http://localhost:4000/cs-notes/thriller/comedy/horror/2013/11/10/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">http://localhost:4000/cs-notes/thriller/comedy/horror/2013/11/10/welcome-to-jekyll.html</guid>
        
        
        <category>Thriller</category>
        
        <category>Comedy</category>
        
        <category>Horror</category>
        
      </item>
    
  </channel>
</rss>
