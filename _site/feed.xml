<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>My notes on CS Level 3</description>
    <link>http://localhost:4000/cs-notes/</link>
    <atom:link href="http://localhost:4000/cs-notes/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 08 Feb 2018 10:16:28 +0000</pubDate>
    <lastBuildDate>Thu, 08 Feb 2018 10:16:28 +0000</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>Operating Systems H</title>
        <description>&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;OS:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;manages computer’s hardware&lt;/li&gt;
  &lt;li&gt;provides basis for application programs&lt;/li&gt;
  &lt;li&gt;intermediary between user and hardware&lt;/li&gt;
  &lt;li&gt;an environment within which other programs can do useful work
&lt;!--excerpt--&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hardware:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CPU&lt;/li&gt;
  &lt;li&gt;memory&lt;/li&gt;
  &lt;li&gt;IO devices&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Application programs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;define ways in which the above resources are used to solve users’ computing problems&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;User view:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;PC - maximise ease of use for a single user to monopolise resources&lt;/li&gt;
  &lt;li&gt;mainframe - maximise resource utilisation for lots of users accessing through terminals&lt;/li&gt;
  &lt;li&gt;workstations - share resources, but also have dedicated resources, connected through networks of workstations and servers&lt;/li&gt;
  &lt;li&gt;mobile devices - similar to PC, with touch screen&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;System view:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;OS is resource allocator&lt;/li&gt;
  &lt;li&gt;OS controls IO devices and user programs - control program&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Moore’s Law - predicts that the number of transistors on an integrated circuit would double every 18 months&lt;/p&gt;

&lt;p&gt;Common definition of an OS:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the one program running at all times on the computer&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;kernel&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;there are also
    &lt;ul&gt;
      &lt;li&gt;system programs - associated with OS but not necessarily part of kernel&lt;/li&gt;
      &lt;li&gt;application programs - not associated with operation of the system&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Today, mobile OS include &lt;strong&gt;middleware&lt;/strong&gt; as well as the kernel:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;set of software frameworks that provide additional services to app devs&lt;/li&gt;
  &lt;li&gt;can support databases, multimedia and graphics&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;computer-system-operation&quot;&gt;Computer-System Operation&lt;/h4&gt;

&lt;p&gt;Modern general-purpose computer system:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1+ CPUs&lt;/li&gt;
  &lt;li&gt;device controllers connected through common bus that provides access to shared memory
    &lt;ul&gt;
      &lt;li&gt;in charge of a specific type of device&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;execute in parallel, competing for memory cycles
    &lt;ul&gt;
      &lt;li&gt;memory controller synchronises memory access&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Bootstrap&lt;/strong&gt; program:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;stored in ROM or electrically erasable ROM (EEROM)&lt;/li&gt;
  &lt;li&gt;firmware&lt;/li&gt;
  &lt;li&gt;initialises all aspects of system&lt;/li&gt;
  &lt;li&gt;locates OS kernel and loads it into memory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once kernel is loaded, it provides services to the system and users&lt;/p&gt;

&lt;p&gt;Services provided outside of the kernel:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;system programs that are loaded into memory at boot time
    &lt;ul&gt;
      &lt;li&gt;system processes/daemons&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;run while kernel is running&lt;/li&gt;
  &lt;li&gt;on UNIX, first process is “init”&lt;/li&gt;
  &lt;li&gt;once initial phase complete, system is fully booted and waits for some event to occur&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Event occurence:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;signalled by &lt;strong&gt;interrupt&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;from hardware - send signal to CPU&lt;/li&gt;
      &lt;li&gt;from software - executing &lt;strong&gt;system call&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CPU transfers execution to a fixed location
    &lt;ul&gt;
      &lt;li&gt;containing starting address where the service routine for the interrupt is located&lt;/li&gt;
      &lt;li&gt;executes&lt;/li&gt;
      &lt;li&gt;on completion, CPU resumes interrupted computation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Interrupts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;transfer control to appropriate interrupt service routine
    &lt;ul&gt;
      &lt;li&gt;invoke generic routine to examine interrupt info.
        &lt;ul&gt;
          &lt;li&gt;call interrupt-specific handler&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;table of pointers to interrupt routines is used
        &lt;ul&gt;
          &lt;li&gt;low memory (first hundred locations or so)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;interrupt vector&lt;/strong&gt; - array of addresses
        &lt;ul&gt;
          &lt;li&gt;indexed by unique device number&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;must save address of interrupted instruction
    &lt;ul&gt;
      &lt;li&gt;stored on system stack&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Storage:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;programs run from rewritable main memory (D/RAM) but this is &lt;strong&gt;volatile&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;EEROM/ROM - stores factory installations/bootstrap program&lt;/li&gt;
  &lt;li&gt;magnetic disk - secondary storage&lt;/li&gt;
  &lt;li&gt;magnetic tape&lt;/li&gt;
  &lt;li&gt;cache&lt;/li&gt;
  &lt;li&gt;solid state disk&lt;/li&gt;
  &lt;li&gt;NVRAM - DRAM with battery backup power&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;load&lt;/em&gt;&lt;/strong&gt; - move byte/word from main to internal register&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;store&lt;/em&gt;&lt;/strong&gt; - move content of a register to main&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Intruction-execution cycle:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;fetch instruction from memory&lt;/li&gt;
  &lt;li&gt;store in the instruction register&lt;/li&gt;
  &lt;li&gt;decode and execute intructions on operands&lt;/li&gt;
  &lt;li&gt;result may be stored back in memory&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;cpu-scheduling&quot;&gt;CPU Scheduling&lt;/h3&gt;

&lt;p&gt;Multiprogramming:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;maximise CPU utilisation&lt;/li&gt;
  &lt;li&gt;several processes kept in memory at one time
    &lt;ul&gt;
      &lt;li&gt;when one process has to wait, OS takes all CPU from it and gives it to another process&lt;/li&gt;
      &lt;li&gt;repeat&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CPU/IO burst cycle:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;process execution
    &lt;ul&gt;
      &lt;li&gt;CPU burst –&amp;gt; IO burst (repeat)
        &lt;ul&gt;
          &lt;li&gt;exponential/hyperexponential frequency curve (lots of short CPU and not many long CPU bursts)&lt;/li&gt;
          &lt;li&gt;IO-bound program has many short CPU bursts&lt;/li&gt;
          &lt;li&gt;CPU-bound program might have a few long CPU bursts&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;final CPU burst ends with system request to terminate execution&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CPU scheduler:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;short-term&lt;/li&gt;
  &lt;li&gt;select from list of processes that are ready to execute
    &lt;ul&gt;
      &lt;li&gt;not necessarily FIFO&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Preemptive scheduling - scheduling decisions may take place under the following 4 circumstances:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;process switching from running to waiting (IO or &lt;strong&gt;&lt;em&gt;wait&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;
  &lt;li&gt;process switching from running to ready (interrupt)&lt;/li&gt;
  &lt;li&gt;process switching from waiting to ready (completion of IO)&lt;/li&gt;
  &lt;li&gt;process terminating&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;for &lt;strong&gt;&lt;em&gt;1&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;4&lt;/em&gt;&lt;/strong&gt;, the scheduling scheme is &lt;strong&gt;nonpreemptive&lt;/strong&gt;/&lt;strong&gt;cooperative&lt;/strong&gt; (no choice in the matter)
    &lt;ul&gt;
      &lt;li&gt;doesn’t require special hardware (timer) needed for preemptive scheduling&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;preemptive results in race conditions when data is shared among processes
    &lt;ul&gt;
      &lt;li&gt;while a process is updating data, it is preempted so that a second process can run&lt;/li&gt;
      &lt;li&gt;2nd tries to read data, which is in an inconsistent state&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;preemption affects design of OS kernel
    &lt;ul&gt;
      &lt;li&gt;during processing a system call, kernel may be busy with an activity on behalf of a process&lt;/li&gt;
      &lt;li&gt;may involve changing kernel data (eg IO queues)&lt;/li&gt;
      &lt;li&gt;what if process is preempted in the middle of these changes and the kernel needs to read/modify the same structure?
        &lt;ul&gt;
          &lt;li&gt;wait for system call to complete&lt;/li&gt;
          &lt;li&gt;wait for IO block to take place before switching context&lt;/li&gt;
          &lt;li&gt;ensures simple kernel structure&lt;/li&gt;
          &lt;li&gt;poor support of real-time computing&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dispatcher:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;gives CPU control to process selected by short-term scheduler
    &lt;ul&gt;
      &lt;li&gt;switch context&lt;/li&gt;
      &lt;li&gt;switch to user mode&lt;/li&gt;
      &lt;li&gt;jump to proper location in user program&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;invoked during every process switch&lt;/li&gt;
  &lt;li&gt;dispatch latency - time taken to stop one process and start another&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Scheduling criteria - when choosing a CPU-scheduling algorithm:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CPU utilisation
    &lt;ul&gt;
      &lt;li&gt;CPU should be as busy as possible&lt;/li&gt;
      &lt;li&gt;ideally usage should be 40-90%&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;throughput
    &lt;ul&gt;
      &lt;li&gt;number of processes completed per time unit&lt;/li&gt;
      &lt;li&gt;1 per hour for long processes&lt;/li&gt;
      &lt;li&gt;10 per second for short processes&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;turnaround time
    &lt;ul&gt;
      &lt;li&gt;interval from time of submission of a process –&amp;gt; its completion&lt;/li&gt;
      &lt;li&gt;sum of periods spent waiting to get into memory, waiting in &lt;strong&gt;&lt;em&gt;ready&lt;/em&gt;&lt;/strong&gt; queue, execution, and doing IO&lt;/li&gt;
      &lt;li&gt;generally limited by speed of output device&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;waiting time
    &lt;ul&gt;
      &lt;li&gt;alg. doesn’t affect amount of time during which a process executes or does IO&lt;/li&gt;
      &lt;li&gt;only affects waiting time&lt;/li&gt;
      &lt;li&gt;sum of periods spent waiting&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;response time
    &lt;ul&gt;
      &lt;li&gt;time from submission of request –&amp;gt; production of first response&lt;/li&gt;
      &lt;li&gt;time to start responding, not time it takes to output the response&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Desirable to maximise CPU utilisation and throughput, and minimise the others.&lt;br /&gt;
   In most cases, we optimise the average measure.&lt;br /&gt;
   A system with reasonable and predictable response time may be considered more desirable than one that is faster on average, but highly variable.&lt;/p&gt;

&lt;h4 id=&quot;scheduling-algorithms&quot;&gt;Scheduling Algorithms&lt;/h4&gt;

&lt;p&gt;FIFO:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;simple to understand and implement&lt;/li&gt;
  &lt;li&gt;average waiting time often quite long
    &lt;ul&gt;
      &lt;li&gt;may vary substantially if CPU burst times vary greatly&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;convoy effect where processes wait for one big process to get off the CPU&lt;/li&gt;
  &lt;li&gt;nonpreemptive (only releases upon termination or IO)
    &lt;ul&gt;
      &lt;li&gt;bad for time-sharing systems&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Shortest-job-first:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;associates with each process the length of the process’ next CPU burst&lt;/li&gt;
  &lt;li&gt;CPU assigned to process with the smallest next CPU burst&lt;/li&gt;
  &lt;li&gt;FIFO to break ties&lt;/li&gt;
  &lt;li&gt;gives minimum average waiting time for a given set of processes
    &lt;ul&gt;
      &lt;li&gt;average waiting time less than FIFO&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;but, you need to know the length of the next CPU burst
    &lt;ul&gt;
      &lt;li&gt;for long-term scheduling, can use the process time limit that a user specifies&lt;/li&gt;
      &lt;li&gt;users are motivated to submit an accurate time
        &lt;ul&gt;
          &lt;li&gt;lower value = faster response&lt;/li&gt;
          &lt;li&gt;too low a value = time-limit-exceed error + resubmission&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SJF cannot be used with short-term scheduling&lt;/li&gt;
  &lt;li&gt;can predict the next CPU burst
    &lt;ul&gt;
      &lt;li&gt;exponential average of the measured lengths of previous bursts&lt;/li&gt;
      &lt;li&gt;for &lt;code class=&quot;highlighter-rouge&quot;&gt;Tn&lt;/code&gt; = length of &lt;code class=&quot;highlighter-rouge&quot;&gt;nth&lt;/code&gt; CPU burst, and &lt;code class=&quot;highlighter-rouge&quot;&gt;Yn+1&lt;/code&gt; = predicted value&lt;/li&gt;
      &lt;li&gt;then for &lt;code class=&quot;highlighter-rouge&quot;&gt;0 &amp;lt;= A &amp;lt;= 1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Yn+1 = ATn + (1-A)Yn&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; controls relative weight of recent and past history in the prediction&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;this alg. can be preemptive/nonpreemptive
        &lt;ul&gt;
          &lt;li&gt;the next CPU burst of a newly arrived process may be shorter than what is left of a currently existing process
            &lt;ul&gt;
              &lt;li&gt;a preemptive will preempty the current process (shortest-remaining-time-first)&lt;/li&gt;
              &lt;li&gt;a nonpreemptive will allow the current process to finish first&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Priority:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CPU allocated to process with highest priority&lt;/li&gt;
  &lt;li&gt;equal-priority are scheduled as FIFO&lt;/li&gt;
  &lt;li&gt;here, assume low numbers represent high priority (but irl, different systems use different priority numbers)&lt;/li&gt;
  &lt;li&gt;internally defined priorities
    &lt;ul&gt;
      &lt;li&gt;use some measurable quantity to compute priority&lt;/li&gt;
      &lt;li&gt;time, memory limits, num. of open files etc&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;externally defined priorities
    &lt;ul&gt;
      &lt;li&gt;set by OS criteria&lt;/li&gt;
      &lt;li&gt;importance, type and amount of funds being paid for computer use etc&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;preemptive - preempt CPU if priority of new process is higher than current&lt;/li&gt;
  &lt;li&gt;nonpreemptive - put new process at head of ready queue&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;indefinite blocking/starvation&lt;/strong&gt; - a process that is ready to run but waiting for the CPU
    &lt;ul&gt;
      &lt;li&gt;low priority processes may wait indefinitely
        &lt;ul&gt;
          &lt;li&gt;either they will eventually be run when the system is lightly loaded&lt;/li&gt;
          &lt;li&gt;or the system will crash and lose all unfinished low priority processes&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;solution - &lt;strong&gt;aging&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;gradually increase priority of processes that wait for a long time&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Round-robin:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;designed for time-sharing systems&lt;/li&gt;
  &lt;li&gt;FIFO with added preemption&lt;/li&gt;
  &lt;li&gt;time slice is defined&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;ready&lt;/em&gt;&lt;/strong&gt; queue treated as circular&lt;/li&gt;
  &lt;li&gt;scheduler goes around the queue, allocating CPU to each process for specified time interval&lt;/li&gt;
  &lt;li&gt;process may have CPU burst &amp;lt; 1 time quantum
    &lt;ul&gt;
      &lt;li&gt;release CPU voluntarily&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;process may have CPU burst &amp;gt; 1 time quantum
    &lt;ul&gt;
      &lt;li&gt;timer interrupt&lt;/li&gt;
      &lt;li&gt;context switch&lt;/li&gt;
      &lt;li&gt;process moved to tail of queue&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;average waiting time often long&lt;/li&gt;
  &lt;li&gt;preemptive&lt;/li&gt;
  &lt;li&gt;want the time quantum to be large with respect to the context-switch time
    &lt;ul&gt;
      &lt;li&gt;if context switch is 10% of the time quantum, then 10% of CPU time is spent in context switching&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;turnaround time depends on time quantum
    &lt;ul&gt;
      &lt;li&gt;can be improved if most processes finish their burst in a single time quantum&lt;/li&gt;
      &lt;li&gt;context switching increases average turnaround time&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;if the time quantum is too large, RR scheduling degenerates to FIFO&lt;/li&gt;
  &lt;li&gt;generally, 80% of CPU bursts should be smaller than the time quantum&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Multilevel queue:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;foreground/background processes
    &lt;ul&gt;
      &lt;li&gt;different response time requirements&lt;/li&gt;
      &lt;li&gt;different scheduling needs&lt;/li&gt;
      &lt;li&gt;foreground may have external priority over background&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;partition &lt;strong&gt;&lt;em&gt;ready&lt;/em&gt;&lt;/strong&gt; queue into several queues
    &lt;ul&gt;
      &lt;li&gt;processes permanently assigned to one queue based on some property&lt;/li&gt;
      &lt;li&gt;each queue has its own scheduling alg.&lt;/li&gt;
      &lt;li&gt;scheduling among the queues is commonly fixed-priority preemptive (foreground may have absolute priority over background)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;queues can also be time-sliced
    &lt;ul&gt;
      &lt;li&gt;eg 80% of CPU to foreground to RR&lt;/li&gt;
      &lt;li&gt;20% of CPU to background to FCFS (first come first served - FIFO)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;low scheduling overhead&lt;/li&gt;
  &lt;li&gt;inflexible (processes stay in one queue all the time)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Multilevel feedback queue:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;processes can move between queues&lt;/li&gt;
  &lt;li&gt;separate processes according to the characteristics of their bursts
    &lt;ul&gt;
      &lt;li&gt;process using too much time –&amp;gt; moved to lower-priority queue&lt;/li&gt;
      &lt;li&gt;leaves IO-bound and interactive processes in higher priority&lt;/li&gt;
      &lt;li&gt;there is also aging so a low priority queue can be moved to a higher one&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;generally defined by the following parameters
    &lt;ul&gt;
      &lt;li&gt;num. of queues&lt;/li&gt;
      &lt;li&gt;scheduling alg. of each queue&lt;/li&gt;
      &lt;li&gt;method to determine when to upgrade to higher-priority&lt;/li&gt;
      &lt;li&gt;method to determine when to upgrade to lower-priority&lt;/li&gt;
      &lt;li&gt;method to determine which queue a process will enter when it needs service&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;can be configured to match a specific system&lt;/li&gt;
  &lt;li&gt;most complex alg.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;thread-scheduling&quot;&gt;Thread Scheduling&lt;/h4&gt;

&lt;p&gt;OS schedules kernel-level threads (not processes)&lt;br /&gt;
   User-level threads managed by a thread library&lt;br /&gt;
   These threads must be mapped to a kernel-level thread (indirect and uses a lightweight process)&lt;/p&gt;

</description>
        <pubDate>Wed, 10 Jan 2018 18:50:00 +0000</pubDate>
        <link>http://localhost:4000/cs-notes/level3/semester2/2018/01/10/operating-systems.html</link>
        <guid isPermaLink="true">http://localhost:4000/cs-notes/level3/semester2/2018/01/10/operating-systems.html</guid>
        
        
        <category>Level3</category>
        
        <category>Semester2</category>
        
      </item>
    
      <item>
        <title>Networked Systems H</title>
        <description>&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;h6 id=&quot;networked-system-autonomous-computing-devices-that-exchange-data-to-perform-some-application-goal-and-how-they-communicate-across-a-network&quot;&gt;Networked System: Autonomous computing devices that exchange data to perform some application goal and how they communicate across a network&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;internet&lt;/li&gt;
  &lt;li&gt;digital broadcast&lt;/li&gt;
  &lt;li&gt;mobile voice telephony&lt;/li&gt;
  &lt;li&gt;sensor networks&lt;/li&gt;
  &lt;li&gt;controller area networks
&lt;!--excerpt--&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Communication: Messages transferred from source to destination(s) via some communications channel&lt;br /&gt;
   How would you convert a message so that both source and destination understand it?&lt;br /&gt;
   Limitations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;size of messages is bounded on a channel at any one time&lt;/li&gt;
  &lt;li&gt;simplex - send/receive in only one direction (broadcasting)&lt;/li&gt;
  &lt;li&gt;half-duplex - send or receive, but not simultaneously (wifi)&lt;/li&gt;
  &lt;li&gt;full-duplex - send and receive at the same time (two cables, for sending and receiving)&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;information&quot;&gt;Information:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;information theory - amount of info in a message can be characterised mathematically&lt;/li&gt;
  &lt;li&gt;capacity of channels can be modelled - physical limits exist here (amount, speed, power)&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;signals&quot;&gt;Signals:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;the physical form of a message - usually a wave&lt;/li&gt;
  &lt;li&gt;analogue - smooth continuation of values&lt;/li&gt;
  &lt;li&gt;digital - sequence of discrete symbols&lt;/li&gt;
  &lt;li&gt;coding - mapping information to symbols&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Analogue:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;amplitude directly codes value of interest&lt;/li&gt;
  &lt;li&gt;can be arbitrarily accurate&lt;/li&gt;
  &lt;li&gt;susceptible to noise and interference&lt;/li&gt;
  &lt;li&gt;difficult to process with digital electronics
    &lt;ul&gt;
      &lt;li&gt;sample the signal at a suitable rate&lt;/li&gt;
      &lt;li&gt;quantise to nearest allowable discrete value&lt;/li&gt;
      &lt;li&gt;convert to digital representation&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;sampling theorem&lt;/strong&gt; dictates rate of sampling&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Digital:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;fixed alphabet&lt;/li&gt;
  &lt;li&gt;underlying channel is almost always analogue&lt;/li&gt;
  &lt;li&gt;modulation - map a digital signal onto the channel&lt;/li&gt;
  &lt;li&gt;uses binary encoding&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;networked-systems-often-use-non-binary-encoding&quot;&gt;Networked systems often use non-binary encoding:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;complex modulation schemes with either 16, 64 or 256 possible symbols&lt;/li&gt;
  &lt;li&gt;baud rate - number of symbols transmitted per second
    &lt;ul&gt;
      &lt;li&gt;can differ from bit rate&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;channels-and-network-links&quot;&gt;Channels and Network Links:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;signal may be directly conveyed or modulated onto an underlying carrier&lt;/li&gt;
  &lt;li&gt;link - the combination of signal and channel
    &lt;ul&gt;
      &lt;li&gt;directly connects 1+ hosts (ethernet)&lt;/li&gt;
      &lt;li&gt;network comprises several links connected together (WAN)&lt;/li&gt;
      &lt;li&gt;switches/routers - connects the links&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;circuit-switched-networks&quot;&gt;Circuit Switched Networks:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;dedicated circuit for A and B to communicate&lt;/li&gt;
  &lt;li&gt;exchange arbitrary length messages&lt;/li&gt;
  &lt;li&gt;guaranteed capacity once circuit is created&lt;/li&gt;
  &lt;li&gt;can block other communications&lt;/li&gt;
  &lt;li&gt;capacity of network gives blocking probability&lt;/li&gt;
  &lt;li&gt;traditional telephone network&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/ns/circuit_switched.jpg&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;packet-switched-networks&quot;&gt;Packet Switched Networks:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;messages split into small packets before transmission
    &lt;ul&gt;
      &lt;li&gt;size constraint&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;A-B and C-D can communicate all the time&lt;/li&gt;
  &lt;li&gt;share bottleneck link&lt;/li&gt;
  &lt;li&gt;connectivity guaranteed&lt;/li&gt;
  &lt;li&gt;available capacity varies based on other people on the network&lt;/li&gt;
  &lt;li&gt;internet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/ns/packet_switched.jpg&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All networked systems are build using these basic components:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;hosts - source and destination(s)&lt;/li&gt;
  &lt;li&gt;links - physical realisation of channel&lt;/li&gt;
  &lt;li&gt;switches/routers - connect multiple links&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;network-protocols&quot;&gt;Network Protocols&lt;/h6&gt;

&lt;p&gt;Network protocols give meaning to the messages that are exchanged&lt;br /&gt;
   Messages follow some well known &lt;strong&gt;syntax&lt;/strong&gt;, and have agreed &lt;strong&gt;semantics&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;an agreed language for encoding messages&lt;/li&gt;
  &lt;li&gt;rules defining what messages mean and when they can be sent&lt;/li&gt;
  &lt;li&gt;define the network behaviour&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Syntax:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;protocol data units (PDU) - types of message&lt;/li&gt;
  &lt;li&gt;each PDU has a particular syntax
    &lt;ul&gt;
      &lt;li&gt;decribing what info is included and how it’s formatted&lt;/li&gt;
      &lt;li&gt;may be formatted as textual info or binary data
        &lt;ul&gt;
          &lt;li&gt;textual PDU - has syntax and grammar that describes its format&lt;/li&gt;
          &lt;li&gt;binary PDU - similar rules&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;define what messages are legal to send&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Semantics:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;define when PDUs can be sent, and what response is needed
    &lt;ul&gt;
      &lt;li&gt;who can send and when&lt;/li&gt;
      &lt;li&gt;host roles&lt;/li&gt;
      &lt;li&gt;what the communicating entities are&lt;/li&gt;
      &lt;li&gt;how errors are handled&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;described with state-transition diagram
    &lt;ul&gt;
      &lt;li&gt;states - stages of protocol operation&lt;/li&gt;
      &lt;li&gt;transitions - in response to PDUs, may result in other PDUs being sent&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/ns/state_transmission.jpg&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;morse-code&quot;&gt;Morse Code:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;signals on electrical cable form a channel&lt;/li&gt;
  &lt;li&gt;syntax - pattern of dots and dashes&lt;/li&gt;
  &lt;li&gt;semantics - different gap lengths to signal end of word, and “STOP” for end of message&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;protocol-layering&quot;&gt;Protocol Layering:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;organisation of communications systems (means of abstraction)&lt;/li&gt;
  &lt;li&gt;structured design reduces complexity&lt;/li&gt;
  &lt;li&gt;services - offered by a layer to the next higher layer&lt;/li&gt;
  &lt;li&gt;well defined interfaces
    &lt;ul&gt;
      &lt;li&gt;highest layer is communicating application&lt;/li&gt;
      &lt;li&gt;lowest layer is physical communication channel&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;peers at a layer &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; communicate using layer &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; protocol
    &lt;ul&gt;
      &lt;li&gt;using lower layer services&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example with a web browser talking to web server:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/ns/protocol_layering.jpg&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;osi-reference-model&quot;&gt;OSI Reference Model:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;standard way of thinking about layered protocol design&lt;/li&gt;
  &lt;li&gt;design tool&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/ns/osi.jpg&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;physical-layer&quot;&gt;Physical Layer:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;defines characteristics of cable/optic fibre
    &lt;ul&gt;
      &lt;li&gt;size and shape of plugs&lt;/li&gt;
      &lt;li&gt;cable length&lt;/li&gt;
      &lt;li&gt;type of cable
        &lt;ul&gt;
          &lt;li&gt;electrical voltage&lt;/li&gt;
          &lt;li&gt;current&lt;/li&gt;
          &lt;li&gt;modulation&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;type of fibre
        &lt;ul&gt;
          &lt;li&gt;single or multi-mode&lt;/li&gt;
          &lt;li&gt;optical clarity&lt;/li&gt;
          &lt;li&gt;colour&lt;/li&gt;
          &lt;li&gt;power output&lt;/li&gt;
          &lt;li&gt;modulation of laser&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;wireless
    &lt;ul&gt;
      &lt;li&gt;radio frequency&lt;/li&gt;
      &lt;li&gt;transmission power&lt;/li&gt;
      &lt;li&gt;modulation scheme&lt;/li&gt;
      &lt;li&gt;antenna type&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;data-link-layer&quot;&gt;Data Link Layer:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;structure and frame physical layer bit stream
    &lt;ul&gt;
      &lt;li&gt;split bit stream into messages&lt;/li&gt;
      &lt;li&gt;detect/correct errors&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;perform media access control
    &lt;ul&gt;
      &lt;li&gt;assign addresses to hosts&lt;/li&gt;
      &lt;li&gt;arbitrate access to link&lt;/li&gt;
      &lt;li&gt;detemine when hosts can send messages&lt;/li&gt;
      &lt;li&gt;ensure fair access to link - flow control&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ethernet&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;network-layer&quot;&gt;Network Layer:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;interconnects links to form a WAN from source host –&amp;gt; destination host
    &lt;ul&gt;
      &lt;li&gt;data delivery&lt;/li&gt;
      &lt;li&gt;naming and addressing&lt;/li&gt;
      &lt;li&gt;routing&lt;/li&gt;
      &lt;li&gt;flow control&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;IP&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;transport-layer&quot;&gt;Transport Layer:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;end-to-end transfer of data from source –&amp;gt; destination
    &lt;ul&gt;
      &lt;li&gt;between session level service at the source, and corresponding service at the destination&lt;/li&gt;
      &lt;li&gt;provides reliability, ordering, framing, congestion control&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;TCP&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;session-layer&quot;&gt;Session Layer:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;manages transport layer connections&lt;/li&gt;
  &lt;li&gt;functions
    &lt;ul&gt;
      &lt;li&gt;open TCP/IP connections to download webpage with HTTP&lt;/li&gt;
      &lt;li&gt;use SMTP to transfer email messages over a TCP/IP&lt;/li&gt;
      &lt;li&gt;coordinate control, audio and video flows for video conference&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;presentation-layer&quot;&gt;Presentation Layer:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;manages presentation, representation and conversion of data
    &lt;ul&gt;
      &lt;li&gt;character set&lt;/li&gt;
      &lt;li&gt;data markup langs.&lt;/li&gt;
      &lt;li&gt;data format conversion&lt;/li&gt;
      &lt;li&gt;content negotiation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;application-layer&quot;&gt;Application Layer:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;user application protocols (not the app. programs themselves)&lt;/li&gt;
  &lt;li&gt;REST APIs/WebRTC&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;protocol-standards&quot;&gt;Protocol Standards:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;formal description of a protocol&lt;/li&gt;
  &lt;li&gt;ensure interoperability of diverse implementations&lt;/li&gt;
  &lt;li&gt;set procedures
    &lt;ul&gt;
      &lt;li&gt;open or closed standards development process&lt;/li&gt;
      &lt;li&gt;free or restricted standards availability&lt;/li&gt;
      &lt;li&gt;rules around disclosure of intellectual property rights&lt;/li&gt;
      &lt;li&gt;individual vs corporate vs national membership&lt;/li&gt;
      &lt;li&gt;lead technical dev. vs describing existing practices&lt;/li&gt;
      &lt;li&gt;collaborative vs combative process&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;standards organisations
    &lt;ul&gt;
      &lt;li&gt;Internet Engineering Task Force&lt;/li&gt;
      &lt;li&gt;International Telecommunications Union&lt;/li&gt;
      &lt;li&gt;3rd Gen Partnership Project&lt;/li&gt;
      &lt;li&gt;World Wide Web Consortium&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;physical-and-data-link-layers&quot;&gt;Physical and Data Link Layers&lt;/h3&gt;

&lt;h6 id=&quot;physical-layer-1&quot;&gt;Physical Layer:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;concerned with transmission of raw data bits
    &lt;ul&gt;
      &lt;li&gt;type of cable/wireless link&lt;/li&gt;
      &lt;li&gt;encoding bits onto that channel&lt;/li&gt;
      &lt;li&gt;capacity of the channel&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;wired-links&quot;&gt;Wired Links:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;characteristics decided by standards bodies&lt;/li&gt;
  &lt;li&gt;size and shape of plugs&lt;/li&gt;
  &lt;li&gt;max cable length&lt;/li&gt;
  &lt;li&gt;type of cable - electrical voltage, current, modulation&lt;/li&gt;
  &lt;li&gt;type of fibre  - single/multi-mode, optical clarity, colour, power output, laser modulation&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;unshielded-twisted-pair&quot;&gt;Unshielded Twisted Pair:&lt;/h6&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/ns/unshielded.jpg&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2 wires twisted together&lt;/li&gt;
  &lt;li&gt;each pair is unidirectional&lt;/li&gt;
  &lt;li&gt;twists reduce interference and nosie pickup (by shielding each other)
    &lt;ul&gt;
      &lt;li&gt;more twists –&amp;gt; less noise&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;several miles of cable length possible at low data rates
    &lt;ul&gt;
      &lt;li&gt;longer cable –&amp;gt; more noise&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ethernet, telephone lines&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;optical-fibre&quot;&gt;Optical Fibre:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;glass core and cladding in plastic jacket for protection&lt;/li&gt;
  &lt;li&gt;unidirectional data
    &lt;ul&gt;
      &lt;li&gt;transmission laser at one end&lt;/li&gt;
      &lt;li&gt;photodetector at the other end&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;light travels down the fibre&lt;/li&gt;
  &lt;li&gt;electromagnetic interference doesn’t affect light –&amp;gt; very low noise&lt;/li&gt;
  &lt;li&gt;10s of Gbps over 100s of miles –&amp;gt; very high capacity&lt;/li&gt;
  &lt;li&gt;cheap to make&lt;/li&gt;
  &lt;li&gt;relatively expensive lasers required to operate&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;wired-data-transmission&quot;&gt;Wired Data Transmission:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;signal directly encoded onto channel
    &lt;ul&gt;
      &lt;li&gt;occupies baseband region&lt;/li&gt;
      &lt;li&gt;bandwidth is the frequency range used by signal&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;baseband-data-encoding&quot;&gt;Baseband Data Encoding:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;encoded by varying the voltage in the cable/intensity of light in the fibre&lt;/li&gt;
  &lt;li&gt;encoding schemes - NRZ, NRZI, Manchester, 4B/5B&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/ns/baseband.jpg&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;4b5b-encoding&quot;&gt;4B/5B Encoding:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;Manchester encoding is inefficient - only 50% of link capacity is used&lt;/li&gt;
  &lt;li&gt;so, insert extra bits to break up sequences of the same bit
    &lt;ul&gt;
      &lt;li&gt;each 4-bit data symbol changed to a 5-bit code for transmission, and reversed at the receiver&lt;/li&gt;
      &lt;li&gt;then transmit 5-bit codes using NRZI&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;this way, 80% of link capacity is used&lt;/li&gt;
  &lt;li&gt;ethernet
    &lt;ul&gt;
      &lt;li&gt;10Mbps with Manchester&lt;/li&gt;
      &lt;li&gt;100Mbps with 4B/5B&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;wireless-links&quot;&gt;Wireless Links:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;use carrier modulation&lt;/li&gt;
  &lt;li&gt;performance affected by
    &lt;ul&gt;
      &lt;li&gt;carrier frequency&lt;/li&gt;
      &lt;li&gt;transmission power&lt;/li&gt;
      &lt;li&gt;modulation scheme&lt;/li&gt;
      &lt;li&gt;type of antenna&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;carrier-modulation&quot;&gt;Carrier Modulation:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;carrier wave applied to channel at frequency F&lt;/li&gt;
  &lt;li&gt;signal modulated onto carrier&lt;/li&gt;
  &lt;li&gt;shifts signal from baseband to a higher carrier frequency&lt;/li&gt;
  &lt;li&gt;allow multiple signals on a single channel&lt;/li&gt;
  &lt;li&gt;can be used on wired links (ADSL and voice telephones sharing a phone line)&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;amplitude-frequency-phase-modulation&quot;&gt;Amplitude, Frequency, Phase Modulation:&lt;/h6&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/ns/afpm.jpg&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;complex-modulations&quot;&gt;Complex Modulations:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;use multiple levels of the modulated component
    &lt;ul&gt;
      &lt;li&gt;gigabit ethernet - amplitude modulation with 5 levels instead of binary signalling&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;combine modulation schemes
    &lt;ul&gt;
      &lt;li&gt;vary phase and amplitude –&amp;gt; quadrature amplitude modulation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;complex combinations regularly used&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;spread-spectrum-communication&quot;&gt;Spread Spectrum Communication:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;single frequency channels prone to interference, so&lt;/li&gt;
  &lt;li&gt;repeatedly change carrier frequency many times/second&lt;/li&gt;
  &lt;li&gt;use pseudo-random sequence to choose which carrier frequency is used for each time slot
    &lt;ul&gt;
      &lt;li&gt;seed of random generator is a shared secret between sender and receiver&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;802.11b Wi-Fi uses frequencies centered around 2.4GHz with phase modulation&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;bandwidth-and-channel-capacity&quot;&gt;Bandwidth and Channel Capacity:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;bandwidth determins frequency range&lt;/li&gt;
  &lt;li&gt;digital signals?
    &lt;ul&gt;
      &lt;li&gt;sampling theorem - to accurately digitise an analogue signal, you need 2H samples/second&lt;/li&gt;
      &lt;li&gt;max transmission rate (R&lt;sub&gt;max&lt;/sub&gt;) of digital signal depends on channel bandwidth (H)&lt;/li&gt;
      &lt;li&gt;number of discrete values per symbol (V)&lt;/li&gt;
      &lt;li&gt;R&lt;sub&gt;max&lt;/sub&gt; = 2H log&lt;sub&gt;2&lt;/sub&gt; V&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;this would presumably give a perfect, noise-free channel&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;noise&quot;&gt;Noise:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;electrical interference&lt;/li&gt;
  &lt;li&gt;cosmic radiation&lt;/li&gt;
  &lt;li&gt;thermal noise&lt;/li&gt;
  &lt;li&gt;can measure signal power &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; and noise floor &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; in a channel for signal-to-noise ratio &lt;code class=&quot;highlighter-rouge&quot;&gt;S/N&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dB = 10log10 S/N&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ADSL modems report &lt;code class=&quot;highlighter-rouge&quot;&gt;S/N ~30&lt;/code&gt; for good quality&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;capacity-of-noisy-channel&quot;&gt;Capacity of Noisy Channel:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;depends on noise type
    &lt;ul&gt;
      &lt;li&gt;uniform/bursty –&amp;gt; affects all or some frequencies&lt;/li&gt;
      &lt;li&gt;Gaussian noise –&amp;gt; noise that impacts all frequencies equally
        &lt;ul&gt;
          &lt;li&gt;R&lt;sub&gt;max&lt;/sub&gt; of Gaussian = Hlog&lt;sub&gt;2&lt;/sub&gt;(1 + S/N)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;dial-up modem bandwidth limitation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;implication---bandwidth-and-signal-to-noise-ratio-limit-amount-of-info-that-can-be-transferred&quot;&gt;Implication - bandwidth and signal-to-noise ratio limit amount of info. that can be transferred&lt;/h6&gt;

&lt;h6 id=&quot;data-link-layer-1&quot;&gt;Data Link Layer:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;arbitrate access to physical layer
    &lt;ul&gt;
      &lt;li&gt;identify devices&lt;/li&gt;
      &lt;li&gt;structure and frame the raw bitstream&lt;/li&gt;
      &lt;li&gt;detect and correct bit errors&lt;/li&gt;
      &lt;li&gt;control access to channel&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;turn raw bitstream into structured comms. channel&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;addressing&quot;&gt;Addressing:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;physical links can be point-to-point/multi-access
    &lt;ul&gt;
      &lt;li&gt;multi-access requires host addresses to identify senders/receivers&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;host addresses - link-local/global scope
    &lt;ul&gt;
      &lt;li&gt;sufficient to be unique among the devices connected to a link&lt;/li&gt;
      &lt;li&gt;many data link protocols use globally unique addresses
        &lt;ul&gt;
          &lt;li&gt;simpler to implement if devices can move (don’t need to change address when connected to different link)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;framing-and-synchronisation&quot;&gt;Framing and Synchronisation:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;raw bitstream unreliable
    &lt;ul&gt;
      &lt;li&gt;bits corrupted&lt;/li&gt;
      &lt;li&gt;timing disrupted&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;data link corrects these problems
    &lt;ul&gt;
      &lt;li&gt;break bitstream into &lt;strong&gt;frames&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;transmit and repair individual frames&lt;/li&gt;
      &lt;li&gt;limit scope of transmission errors&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;ethernet&quot;&gt;Ethernet:&lt;/h6&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/ns/ethernet.jpg&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;synchronisation&quot;&gt;Synchronisation:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;detecting start of message
    &lt;ul&gt;
      &lt;li&gt;leave gaps between frames
        &lt;ul&gt;
          &lt;li&gt;but physical layer doesn’t guarantee timing&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;precede each frame with a length field
        &lt;ul&gt;
          &lt;li&gt;but length could be corrupted&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;add &lt;strong&gt;start code&lt;/strong&gt; to beginning of frame
        &lt;ul&gt;
          &lt;li&gt;a unique bit pattern&lt;/li&gt;
          &lt;li&gt;enables synchronisation after an error - wait for next start code, begin reading frame headers&lt;/li&gt;
          &lt;li&gt;start code should generate a regular pattern after physical layer coding&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;what if start code appears in data? &lt;strong&gt;bit stuffing&lt;/strong&gt; can give a transparent channel
    &lt;ul&gt;
      &lt;li&gt;sender inserts &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; after sending 5 consecutive &lt;code class=&quot;highlighter-rouge&quot;&gt;1's&lt;/code&gt; (unless start code)&lt;/li&gt;
      &lt;li&gt;receiver looks at 6th bit if it sees 5 consecutive &lt;code class=&quot;highlighter-rouge&quot;&gt;1's&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;if 0, has been stuffed, so remove&lt;/li&gt;
          &lt;li&gt;if 1, look at 7th bit
            &lt;ul&gt;
              &lt;li&gt;if 0, start code&lt;/li&gt;
              &lt;li&gt;if 1, corrupt frame&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;this is a binary-level escape code&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/ns/stuffing.jpg&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;error-detection&quot;&gt;Error Detection:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;common in wireless systems&lt;/li&gt;
  &lt;li&gt;add error detecting code to each packet&lt;/li&gt;
  &lt;li&gt;parity codes
    &lt;ul&gt;
      &lt;li&gt;calculate &lt;strong&gt;parity&lt;/strong&gt; of data
        &lt;ul&gt;
          &lt;li&gt;odd number of &lt;code class=&quot;highlighter-rouge&quot;&gt;1's&lt;/code&gt; in data - parity 1&lt;/li&gt;
          &lt;li&gt;even number of &lt;code class=&quot;highlighter-rouge&quot;&gt;1's&lt;/code&gt; in data - parity 0&lt;/li&gt;
          &lt;li&gt;parity bit is XOR of data bits&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;send parity with data&lt;/li&gt;
      &lt;li&gt;check at receiver&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#internet_checksum&quot;&gt;Example&lt;/a&gt; - The Internet Checksum&lt;/p&gt;

&lt;h6 id=&quot;other-error-detecting-codes&quot;&gt;Other Error Detecting Codes:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;parity and checksums relatively weak
    &lt;ul&gt;
      &lt;li&gt;simple implementation&lt;/li&gt;
      &lt;li&gt;undetected errors likely&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;cyclic redundancy code (CRC)
    &lt;ul&gt;
      &lt;li&gt;more complex&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;error-correction&quot;&gt;Error Correction:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;extended error detecting codes to correct errors
    &lt;ul&gt;
      &lt;li&gt;transmit correcting code as additional data in each frame&lt;/li&gt;
      &lt;li&gt;receiver can correct errors without contacting sender&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Hamming code
    &lt;ul&gt;
      &lt;li&gt;at the sender
        &lt;ul&gt;
          &lt;li&gt;send &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; data bits and &lt;code class=&quot;highlighter-rouge&quot;&gt;k&lt;/code&gt; check bits&lt;/li&gt;
          &lt;li&gt;each check bit codes parity for some data bits
            &lt;ul&gt;
              &lt;li&gt;starting at check bit &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;&lt;/li&gt;
              &lt;li&gt;check &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; bits&lt;/li&gt;
              &lt;li&gt;skip &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; bits&lt;/li&gt;
              &lt;li&gt;repeat&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;at the receiver
        &lt;ul&gt;
          &lt;li&gt;set &lt;code class=&quot;highlighter-rouge&quot;&gt;counter = 0&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;recalculate check bits &lt;code class=&quot;highlighter-rouge&quot;&gt;k = 1, 2, 4, 8,...&lt;/code&gt; in turn&lt;/li&gt;
          &lt;li&gt;if &lt;code class=&quot;highlighter-rouge&quot;&gt;k&lt;/code&gt; incorrect, &lt;code class=&quot;highlighter-rouge&quot;&gt;counter += k&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;if &lt;code class=&quot;highlighter-rouge&quot;&gt;counter == 0&lt;/code&gt;, no errors&lt;/li&gt;
          &lt;li&gt;else, bit &lt;code class=&quot;highlighter-rouge&quot;&gt;counter&lt;/code&gt; is incorrect&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;allows receiver to detect and correct all possible errors that corrupt only a single bit (and some errors affecting multiple bits)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/ns/hamming.jpg&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;other error correcting codes tradeoff copmlexity and amount of data added for the ability to correct multi-bit errors&lt;/li&gt;
  &lt;li&gt;can also request retransmission as a way of fixing errors&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;media-access-control&quot;&gt;Media Access Control:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;arbitrating access to a link
    &lt;ul&gt;
      &lt;li&gt;point-to-point typically 2 unidirectional links
        &lt;ul&gt;
          &lt;li&gt;separate cables for each direction&lt;/li&gt;
          &lt;li&gt;need framing in each direction&lt;/li&gt;
          &lt;li&gt;stop-and-wait/sliding-window for flow control&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;multi-access typically share a bidirectional link
        &lt;ul&gt;
          &lt;li&gt;single cable - nodes contend for access to link&lt;/li&gt;
          &lt;li&gt;single radio frequency&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;link-contention&quot;&gt;Link Contention:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;2 hosts transmit simultaneously –&amp;gt; collision&lt;/li&gt;
  &lt;li&gt;signals overlap –&amp;gt; garbage received&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;contention-based-mac&quot;&gt;Contention-based MAC:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;2-stage access to channel
    &lt;ul&gt;
      &lt;li&gt;detect that collision will occur by listening to channel while/before sending&lt;/li&gt;
      &lt;li&gt;send if no collision/back off or retransmit data to avoid collision&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;probabilistic, variable latency access to channel&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;aloha-network&quot;&gt;ALOHA Network:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;developed at Uni of Hawaii in 1970&lt;/li&gt;
  &lt;li&gt;first wireless packet-switched network&lt;/li&gt;
  &lt;li&gt;uses contention-based MAC
    &lt;ul&gt;
      &lt;li&gt;try to transmit whenever data is available&lt;/li&gt;
      &lt;li&gt;if collision occurs, wait random amount of time, then retransmit&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;poor performance
    &lt;ul&gt;
      &lt;li&gt;long delays&lt;/li&gt;
      &lt;li&gt;low channel utilisation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;carrier-sense-multiple-access&quot;&gt;Carrier Sense Multiple Access:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;when propagation delay low, listen before sending
    &lt;ul&gt;
      &lt;li&gt;if another transmission active, back off without sending anything&lt;/li&gt;
      &lt;li&gt;if link idle, send data immediately&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;improves utilisation
    &lt;ul&gt;
      &lt;li&gt;only new sender backs off if channel is active&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;csmacd&quot;&gt;CSMA/CD:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;high propagation delay –&amp;gt; increased collision rate&lt;/li&gt;
  &lt;li&gt;CSMA updated with collision detection
    &lt;ul&gt;
      &lt;li&gt;listen to channel before and while transmitting&lt;/li&gt;
      &lt;li&gt;if collision, immediately stop sending, back off, and retransmit
        &lt;ul&gt;
          &lt;li&gt;collision still corrupts both packets&lt;/li&gt;
          &lt;li&gt;time channel blocked due to reduced collisions&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ethernet, 802.11 Wi-Fi&lt;/li&gt;
  &lt;li&gt;how long is back-off interval?
    &lt;ul&gt;
      &lt;li&gt;should be random&lt;/li&gt;
      &lt;li&gt;should increase with number of collisions that affect a transmission
        &lt;ul&gt;
          &lt;li&gt;repeated collisions signal congestion&lt;/li&gt;
          &lt;li&gt;reduced transmission rate allows network to recover&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;initial back off interval &lt;code class=&quot;highlighter-rouge&quot;&gt;x seconds +-50%&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;each repeated collision before success &lt;code class=&quot;highlighter-rouge&quot;&gt;x --&amp;gt; 2x&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;summary---combination-of-physical-and-data-layers-allows-transmission-of-structured-frames-of-data-accross-a-single-physical-link&quot;&gt;Summary - combination of physical and data layers allows transmission of structured frames of data accross a single physical link&lt;/h6&gt;

&lt;h3 id=&quot;bridging&quot;&gt;Bridging&lt;/h3&gt;

&lt;h6 id=&quot;link-layer-topology-evolution&quot;&gt;Link-layer Topology Evolution:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;media access control assumes a single link
    &lt;ul&gt;
      &lt;li&gt;on wired networks, with a single cable&lt;/li&gt;
      &lt;li&gt;vulnerable to cable damage&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;hub - cable in a box
    &lt;ul&gt;
      &lt;li&gt;no intelligence&lt;/li&gt;
      &lt;li&gt;cable damage disconnects only one single host
        &lt;ul&gt;
          &lt;li&gt;so doesn’t partition the network&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;bridge - intelligent device
    &lt;ul&gt;
      &lt;li&gt;understands media access control protocol&lt;/li&gt;
      &lt;li&gt;joins multiple links together&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/ns/bridge_types.jpg&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;extending-link-layer-networks&quot;&gt;Extending Link-layer Networks:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;hub - physical layer interconnection of links&lt;/li&gt;
  &lt;li&gt;equivalent to runnning a longer cable&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;doesn’t improve network scalability&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;bridge - data layer interconnection of physical networks&lt;/li&gt;
  &lt;li&gt;understands and processes data link layer frames&lt;/li&gt;
  &lt;li&gt;identifies hosts&lt;/li&gt;
  &lt;li&gt;forwards frames of interest&lt;/li&gt;
  &lt;li&gt;automatic - no configuration needed&lt;/li&gt;
  &lt;li&gt;eg ethernet switches&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;bridge-operation&quot;&gt;Bridge Operation:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;learn addresses on each link
    &lt;ul&gt;
      &lt;li&gt;observe sources of packets&lt;/li&gt;
      &lt;li&gt;has &lt;strong&gt;soft-state&lt;/strong&gt; timeout to respond to failure/node mobility&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;forward traffic as appropriate
    &lt;ul&gt;
      &lt;li&gt;unicast based on host locations&lt;/li&gt;
      &lt;li&gt;multicast based on group membership&lt;/li&gt;
      &lt;li&gt;broadcast&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following are examples of communication on this setup of bridged links&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/ns/bridge_operation.jpg&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;on initialisation - neither bridge knows location of any hosts
    &lt;ul&gt;
      &lt;li&gt;host A sends packet for host B
        &lt;ul&gt;
          &lt;li&gt;received at bridge 1, which now records location of A&lt;/li&gt;
          &lt;li&gt;location of B unknown, so bridge 1 floods packet to all outgoing links
            &lt;ul&gt;
              &lt;li&gt;which is also received at bridge 2, which doesn’t know location of B&lt;/li&gt;
              &lt;li&gt;so flood the packet to all outgoing links (plus record location of A)&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;B is one of the outgoing links from bridge 1&lt;/li&gt;
          &lt;li&gt;packet received at B, so responds with a packet for A
            &lt;ul&gt;
              &lt;li&gt;received at bridge 1, which knows A’s location&lt;/li&gt;
              &lt;li&gt;directly forward packet without flooding (plus record location of B)&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;later, host E sends packet for host B
        &lt;ul&gt;
          &lt;li&gt;received at bridge 2, which doesn’t know location of B&lt;/li&gt;
          &lt;li&gt;so floods packet to outgoing links (plus records location of E)
            &lt;ul&gt;
              &lt;li&gt;received at bridge 1, which knows B’s location&lt;/li&gt;
              &lt;li&gt;directly forward packet to B (plus record how to reach E)&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;over time, bridges learn location of every host, sending packets without flooding&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;learning protocol - finds hosts without config&lt;/li&gt;
  &lt;li&gt;flooding - ensure connectivity maintained even with no knowledge&lt;/li&gt;
  &lt;li&gt;performance never worse than a hub&lt;/li&gt;
  &lt;li&gt;use of soft state and timeouts - ensure knowledge of failed devices disappears&lt;/li&gt;
  &lt;li&gt;poor scalability - every bridge knows about every host&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;loops-in-bridged-networks&quot;&gt;Loops in Bridged Networks:&lt;/h6&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/ns/bridge_loops.jpg&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;host A sends packet for host X, which does not exist
    &lt;ul&gt;
      &lt;li&gt;received at bridge 1, which doesn’t know X’s location&lt;/li&gt;
      &lt;li&gt;flood to outgoing links
        &lt;ul&gt;
          &lt;li&gt;received at bridges 2 and 3, which also don’t know X’s location&lt;/li&gt;
          &lt;li&gt;flood to outgoing links
            &lt;ul&gt;
              &lt;li&gt;packets cross in transit between bridge 2 and 3&lt;/li&gt;
              &lt;li&gt;causes a loop unless countermeasures taken&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;solution - build &lt;strong&gt;spanning tree&lt;/strong&gt; over network&lt;/li&gt;
  &lt;li&gt;forward packets along tree&lt;/li&gt;
  &lt;li&gt;model as an undirected graph &lt;code class=&quot;highlighter-rouge&quot;&gt;G&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;tree over that graph comprised of all vertices and some edges of &lt;code class=&quot;highlighter-rouge&quot;&gt;G&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;edges removed to eliminate loops
    &lt;ul&gt;
      &lt;li&gt;leaves minimal edges that still connect to all vertices&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;so, previous graph now looks like this:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/ns/bridge_spanning.jpg&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;spanning-tree-algorithm&quot;&gt;Spanning Tree Algorithm:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;developed by Radia Perlman&lt;/li&gt;
  &lt;li&gt;each bridge has globally unique address
    &lt;ul&gt;
      &lt;li&gt;root bridge has lowest address&lt;/li&gt;
      &lt;li&gt;periodically, each bridge informs its neighbours what it thinks the root’s address is&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;determined root port - port with shortest path to root bridge
    &lt;ul&gt;
      &lt;li&gt;each bridge has one except the root&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;for each LAN, select a &lt;strong&gt;designated bridge&lt;/strong&gt; for it - bridge with shortest path to root (tie-break based on address)
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;designated port&lt;/strong&gt; - port connecting the designated bridge to LAN&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;enable all root ports and designated ports&lt;/li&gt;
  &lt;li&gt;disable all other ports&lt;/li&gt;
  &lt;li&gt;forward traffic through enabled ports&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/ns/spanning_tree_alg.jpg&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;bridge 1 is root&lt;/li&gt;
  &lt;li&gt;root ports are &lt;code class=&quot;highlighter-rouge&quot;&gt;2/1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;3/5&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;designated bridges are
    &lt;ul&gt;
      &lt;li&gt;1 for hosts A, B, H and links α and β&lt;/li&gt;
      &lt;li&gt;2 for hosts F, G and link γ&lt;/li&gt;
      &lt;li&gt;3 for hosts C, D, E&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;designated ports are
    &lt;ul&gt;
      &lt;li&gt;bridge 1: &lt;code class=&quot;highlighter-rouge&quot;&gt;1/1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;1/2&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;1/3&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;1/4&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;1/5&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;bridge 2: &lt;code class=&quot;highlighter-rouge&quot;&gt;2/2&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;2/3&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;2/4&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;bridge 3: &lt;code class=&quot;highlighter-rouge&quot;&gt;3/2&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;3/3&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;3/4&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;port &lt;code class=&quot;highlighter-rouge&quot;&gt;3/1&lt;/code&gt; is neither a root nor designated
    &lt;ul&gt;
      &lt;li&gt;it is &lt;strong&gt;disabled&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;algorhyme&quot;&gt;Algorhyme&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;I think that I shall never see&lt;br /&gt;
   A graph more lovely than a tree.&lt;br /&gt;
   A tree whose crucial property&lt;br /&gt;
   Is loop-free connectivity.&lt;br /&gt;
   First the root must be selected.&lt;br /&gt;
   By ID it is elected.&lt;br /&gt;
   Least cost paths from root are traced.&lt;br /&gt;
   In the tree these paths are placed.&lt;br /&gt;
   A mesh is made by folks like me.&lt;br /&gt;
   Then bridges find a spanning tree.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;internetworking&quot;&gt;Internetworking&lt;/h3&gt;

&lt;h6 id=&quot;role-of-network-layer&quot;&gt;Role of Network Layer:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;first end-to-end layer in OSI reference model&lt;/li&gt;
  &lt;li&gt;end-to-end delivery of data
    &lt;ul&gt;
      &lt;li&gt;across multiple link-layer hops&lt;/li&gt;
      &lt;li&gt;across multiple autonomous systems&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;building an internet (interconnected networks - &lt;strong&gt;not&lt;/strong&gt; capitalised, just a noun)
    &lt;ul&gt;
      &lt;li&gt;each network administered separately (autonomous - makes independent policy and tech choices)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;components-of-an-internet&quot;&gt;Components of an Internet:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;common end-to-end network protocol
    &lt;ul&gt;
      &lt;li&gt;seamless service to transport layer&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;set of gateway devices (routers)
    &lt;ul&gt;
      &lt;li&gt;implements said protocol&lt;/li&gt;
      &lt;li&gt;hides differences in link layer technologies&lt;/li&gt;
      &lt;li&gt;must perform least amount of translation necessary&lt;/li&gt;
      &lt;li&gt;framing, addressing, flow control, error detection/correction&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;the-internet-capitalised-proper-noun&quot;&gt;The Internet (capitalised, proper noun):&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;globally interconnected networks running the &lt;strong&gt;Internet Protocol&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;1965 - packet switching&lt;/li&gt;
  &lt;li&gt;1969 - wide-area packet networks&lt;/li&gt;
  &lt;li&gt;1973 - first non-US ARPANET sites&lt;/li&gt;
  &lt;li&gt;1974 - initial version of IP&lt;/li&gt;
  &lt;li&gt;1981 - access to ARPANET from non-DARPA-funded sites&lt;/li&gt;
  &lt;li&gt;1983 - IPv4&lt;/li&gt;
  &lt;li&gt;1992 - development of IPv6&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;internet-protocol&quot;&gt;Internet Protocol:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;packet delivery service&lt;/li&gt;
  &lt;li&gt;provides abstraction layer&lt;/li&gt;
  &lt;li&gt;simple, best effort, connectionless&lt;/li&gt;
  &lt;li&gt;uniform network and host addressing, uniform end-to-end connectivity, fragmentation and reassembly&lt;/li&gt;
  &lt;li&gt;global standard&lt;/li&gt;
  &lt;li&gt;the protocol stack is hourglass-shaped&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/ns/protocol_stack.jpg&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;ip-service-model&quot;&gt;IP Service Model:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;connectionless - just send&lt;/li&gt;
  &lt;li&gt;best effort - no guarantees on packet delivery success&lt;/li&gt;
  &lt;li&gt;easy to run over any type of link layer&lt;/li&gt;
  &lt;li&gt;can easily simulate a circuit over packet, but simulating packets over a circuit is difficult&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;versions&quot;&gt;Versions:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;IPv4 - current production Internet&lt;/li&gt;
  &lt;li&gt;IPv6 - next gen Internet&lt;/li&gt;
  &lt;li&gt;IPv5 - experimental multimedia streaming protocol&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;IPv4 packet format:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;32-bit addresses&lt;/li&gt;
  &lt;li&gt;will router fragmented packets that are larger than MTU&lt;/li&gt;
  &lt;li&gt;header contains checksum to detect transmission errors
    &lt;ul&gt;
      &lt;li&gt;protects header only, not payload data&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/ns/ipv4.jpg&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;IPv6 packet format:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;simpler header format&lt;/li&gt;
  &lt;li&gt;128-bit addresses&lt;/li&gt;
  &lt;li&gt;removed support for fragmentation
    &lt;ul&gt;
      &lt;li&gt;hard to implement for high rate links&lt;/li&gt;
      &lt;li&gt;end-to-end principle&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;added flow label for DSCP
    &lt;ul&gt;
      &lt;li&gt;groups related traffic flows together&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;no header checksum
    &lt;ul&gt;
      &lt;li&gt;assumes data protected by a link layer checksum&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/ns/ipv6.jpg&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;addressing-1&quot;&gt;Addressing:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;every network interface on every host has a unique address
    &lt;ul&gt;
      &lt;li&gt;hosts may change it over time to give illusion of privacy&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;fragmentation&quot;&gt;Fragmentation:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;link layer has maximum packet size (MTU)&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;loop-protection&quot;&gt;Loop Protection:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;packets include a forwarding limit
    &lt;ul&gt;
      &lt;li&gt;non-zero when packet is sent&lt;/li&gt;
      &lt;li&gt;each router that forwards the packet reduces this value by 1&lt;/li&gt;
      &lt;li&gt;if 0 reached, packet discarded&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;stops packets circling forever in case of network error&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;differentiated-services&quot;&gt;Differentiated Services:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;end systems can request special service from the network
    &lt;ul&gt;
      &lt;li&gt;ask for low latency over high bandwidth&lt;/li&gt;
      &lt;li&gt;emergency traffic prioritised&lt;/li&gt;
      &lt;li&gt;background software updates asking for low priority&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;signalled by differentiated service code point (DSCP) in the header&lt;/li&gt;
  &lt;li&gt;provices hint to network, not a guarantee
    &lt;ul&gt;
      &lt;li&gt;often stripped at network boundaries&lt;/li&gt;
      &lt;li&gt;economic and network neutrality issues - who can set the DSCP?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;explicit-congestion-notification&quot;&gt;Explicit Congestion Notification:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;typically routers respond by dropping packets
    &lt;ul&gt;
      &lt;li&gt;TP’s can detect the loss and request retransmission if necessary&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;notification gives routers a way to signal approaching congestion
    &lt;ul&gt;
      &lt;li&gt;if ECN == 00, notification is disabled&lt;/li&gt;
      &lt;li&gt;if a sending host sets ECN = 10 or 01, routers will monitor link usage&lt;/li&gt;
      &lt;li&gt;ECN == 11 signals need to reduce sending rate (congested)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;header-checksum&quot;&gt;Header Checksum:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;used to detect transmission errors&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;transport-layer-protocol-identifier&quot;&gt;Transport Layer Protocol Identifier:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;network packets include transport data as payload&lt;/li&gt;
  &lt;li&gt;must identify what protocol the transport layer uses
    &lt;ul&gt;
      &lt;li&gt;TCP = 6&lt;/li&gt;
      &lt;li&gt;UDP = 17&lt;/li&gt;
      &lt;li&gt;DCCP = 33&lt;/li&gt;
      &lt;li&gt;ICMP = 1&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;ipv4-or-ipv6&quot;&gt;IPv4 or IPv6:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;IPv4 has insufficient addresses left&lt;/li&gt;
  &lt;li&gt;primary goal of IPv6 is to increase size of address space - allow more hosts on network&lt;/li&gt;
  &lt;li&gt;it also simplifies the protocol - high-speed implementations easier&lt;/li&gt;
  &lt;li&gt;straight-foward to build apps that work with both versions&lt;/li&gt;
  &lt;li&gt;DNS query &lt;code class=&quot;highlighter-rouge&quot;&gt;getaddrinfo()&lt;/code&gt; returns version used&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;ip-addressing&quot;&gt;IP Addressing:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;how to name hosts in a network
    &lt;ul&gt;
      &lt;li&gt;does the address name the host, or its location at which it’s attached to the network?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;how they should be allocated
    &lt;ul&gt;
      &lt;li&gt;hierarchical&lt;/li&gt;
      &lt;li&gt;flat&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;address format
    &lt;ul&gt;
      &lt;li&gt;human/machine readable&lt;/li&gt;
      &lt;li&gt;structured/unstructured&lt;/li&gt;
      &lt;li&gt;fixed length binary
        &lt;ul&gt;
          &lt;li&gt;easier and faster for machines to process&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;variable length textual
        &lt;ul&gt;
          &lt;li&gt;easier for humans to read&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;size&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;identity-and-location&quot;&gt;Identity and Location:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;give hosts a consistent address, irrespective of their location&lt;/li&gt;
  &lt;li&gt;simple upper-layer protocols
    &lt;ul&gt;
      &lt;li&gt;transport and app unaware of multi-homing or mobility&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;leave complexity to network layer
    &lt;ul&gt;
      &lt;li&gt;must determine location of host before it can route data&lt;/li&gt;
      &lt;li&gt;requires in-network DB to map identity to routable addresses (eg mobile phone numbers)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;alternatively, address can indicate a host &lt;strong&gt;location&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;address structure matches network structure (eg geographic phone numbers)&lt;/li&gt;
      &lt;li&gt;simplifies network layer&lt;/li&gt;
      &lt;li&gt;multi-homing/mobility must be handled by transport or apps (transport layer connections break when the host moves)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;address-allocation&quot;&gt;Address Allocation:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;hierarchical
    &lt;ul&gt;
      &lt;li&gt;allows routing on aggregate addresses
        &lt;ul&gt;
          &lt;li&gt;eg +1 703 243 9422&lt;/li&gt;
          &lt;li&gt;look at &lt;code class=&quot;highlighter-rouge&quot;&gt;+1&lt;/code&gt;, know to route to US instantly&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;forces address structure to match network topology&lt;/li&gt;
      &lt;li&gt;requires rigid control of allocations&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;flat
    &lt;ul&gt;
      &lt;li&gt;flexible allocations&lt;/li&gt;
      &lt;li&gt;no aggregation –&amp;gt; not scalable&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;ip-addresses&quot;&gt;IP Addresses:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;specify location of a network interface&lt;/li&gt;
  &lt;li&gt;allocated hierarchically&lt;/li&gt;
  &lt;li&gt;fixed length binary values&lt;/li&gt;
  &lt;li&gt;domain names are a separate &lt;strong&gt;app level&lt;/strong&gt; namespace&lt;/li&gt;
  &lt;li&gt;both IPv4 and IPv6 addresses encode location
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;netmask&lt;/strong&gt; describes number of bits in network part of address&lt;/li&gt;
      &lt;li&gt;network itself has the address with the host part equal to 0&lt;/li&gt;
      &lt;li&gt;broadcast address for a network has all bits of host part equal to 1&lt;/li&gt;
      &lt;li&gt;a host with several network interfaces will have one IP address per interface
        &lt;ul&gt;
          &lt;li&gt;eg laptop with Ethernet and WiFi interfaces will have 2 IP addresses&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;ipv4-addresses&quot;&gt;IPv4 Addresses:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;32-bit&lt;/li&gt;
  &lt;li&gt;IP address - &lt;code class=&quot;highlighter-rouge&quot;&gt;130.209.247.112 = 10000010 11010001 11110111 01110000&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;netmask - &lt;code class=&quot;highlighter-rouge&quot;&gt;255.255.240.0 = 11111111 11111111 11110000 00000000&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;the &lt;code class=&quot;highlighter-rouge&quot;&gt;1's&lt;/code&gt; are 20 bits long which refer to the network (130.209.240.0/20)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;broadcast address - &lt;code class=&quot;highlighter-rouge&quot;&gt;130.209.255.255 = 10000010 11010001 11111111 11111111&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;management - IANA administers the pool of unallocated addresses (4,294,967,296)
    &lt;ul&gt;
      &lt;li&gt;assigned to regional Internet registries as needed&lt;/li&gt;
      &lt;li&gt;RIRs allocate addresses to ISPs and large enterprises within their region&lt;/li&gt;
      &lt;li&gt;ISPs allocate addresses to their customers&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;the last available RIR allocation was made on 3rd February 2011&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;ipv6-addresses&quot;&gt;IPv6 Addresses:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;provides 340,282,366,920,938,463,463,374,607,431,768,211,456 addresses&lt;/li&gt;
  &lt;li&gt;written as 8 separated 16-bit fields with &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt; delimiter&lt;/li&gt;
  &lt;li&gt;usually written in shortened form (leading 0’s in each field are suppressed)
    &lt;ul&gt;
      &lt;li&gt;a field with all 0’s is compressed to &lt;code class=&quot;highlighter-rouge&quot;&gt;::&lt;/code&gt; (or more)&lt;/li&gt;
      &lt;li&gt;the &lt;code class=&quot;highlighter-rouge&quot;&gt;::&lt;/code&gt; must not be used to replace a single 16-bit field&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;local identifier part is 64 bits
    &lt;ul&gt;
      &lt;li&gt;last 4 fields&lt;/li&gt;
      &lt;li&gt;can be derived from Ethernet/WiFi MAC address&lt;/li&gt;
      &lt;li&gt;or randomly chosen, with bit 6 set to 0 to give illusion of privacy&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;routers advertise the network part, and hosts auto-configure the address
    &lt;ul&gt;
      &lt;li&gt;first 4 fields&lt;/li&gt;
      &lt;li&gt;split into global routing prefix (up to 48 bits) and a subnet identifier&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;deployment issues
    &lt;ul&gt;
      &lt;li&gt;requires changes to every single host, router, firewall and app&lt;/li&gt;
      &lt;li&gt;many OS have already been updated&lt;/li&gt;
      &lt;li&gt;backbone routers generally support IPv6&lt;/li&gt;
      &lt;li&gt;home routers and firewalls starting to be updated&lt;/li&gt;
      &lt;li&gt;many apps have been updated&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;nat&quot;&gt;NAT:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;no host changes&lt;/li&gt;
  &lt;li&gt;hugely complicated for peer-to-peer apps&lt;/li&gt;
  &lt;li&gt;difficult to debug problems/deploy new classes of app&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;internet_checksum&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;the-internet-checksum&quot;&gt;The Internet Checksum:&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;sum data values&lt;/li&gt;
  &lt;li&gt;send checksum in each frame&lt;/li&gt;
  &lt;li&gt;receiver recalculates checksum
    &lt;ul&gt;
      &lt;li&gt;mismatch –&amp;gt; bit error&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;more effective than parity codes
    &lt;ul&gt;
      &lt;li&gt;detect multiple bit errors&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdint.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// assume data padded to a 16-bit boundary
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;internet_cksum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buflen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buflen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  
    &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xffff0000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	  &lt;span class=&quot;c1&quot;&gt;// carry occured, wrap around
&lt;/span&gt;	  &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0000ffff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	  &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0000ffff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 10 Jan 2018 18:50:00 +0000</pubDate>
        <link>http://localhost:4000/cs-notes/level3/semester2/2018/01/10/networked-systems.html</link>
        <guid isPermaLink="true">http://localhost:4000/cs-notes/level3/semester2/2018/01/10/networked-systems.html</guid>
        
        
        <category>Level3</category>
        
        <category>Semester2</category>
        
      </item>
    
      <item>
        <title>Algorithmics 1</title>
        <description>&lt;h5 id=&quot;useful-textbooks&quot;&gt;Useful Textbooks&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;M.T. Goodrich &amp;amp; R. Tamassia, Algorithm Design: Foundations, Analysis, and Internet Examples, Wiley, 2002&lt;/li&gt;
  &lt;li&gt;D. Harel &amp;amp; Y. Feldman, Algorithmics: the Spirit of Computing, Addison Wesley, 2004 (also earlier 1992 edition by D. Harel)&lt;/li&gt;
  &lt;li&gt;M. Sipser, Introduction to the Theory of Computation, Course Technology, 2006
&lt;!--excerpt--&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;contents&quot;&gt;Contents&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;#section_0&quot;&gt;Introduction&lt;/a&gt;&lt;br /&gt;
   &lt;a href=&quot;#section_1&quot;&gt;Fundamental Algorithms and Data Structures&lt;/a&gt;&lt;br /&gt;
   &lt;a href=&quot;#section_2&quot;&gt;Sorting Algorithms&lt;/a&gt;&lt;br /&gt;
   &lt;a href=&quot;#section_3&quot;&gt;Strings and text algorithms&lt;/a&gt;&lt;br /&gt;
   &lt;a href=&quot;#section_4&quot;&gt;Graphs and graph algorithms&lt;/a&gt;&lt;br /&gt;
   &lt;a href=&quot;#section_5&quot;&gt;NP Completeness&lt;/a&gt;&lt;br /&gt;
   &lt;a href=&quot;#section_6&quot;&gt;Computability&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;section_0&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;introduction&quot;&gt;Introduction&lt;/h4&gt;

&lt;h5 id=&quot;revision---algorithm-analysis&quot;&gt;Revision - Algorithm Analysis&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;Time and space complexity is written as a function of input size&lt;/li&gt;
  &lt;li&gt;Worst case - gives a guarantee of algorithm’s performance&lt;/li&gt;
  &lt;li&gt;Asymptotic behaviour indicates what will happen as input size grows&lt;/li&gt;
  &lt;li&gt;Expressed using Big O notation&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;big-o-notation&quot;&gt;Big O notation&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;f(n) = O(g(n))&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; grows no faster than &lt;code class=&quot;highlighter-rouge&quot;&gt;g&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;there exists a real constant &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt; and integer constant &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; such that &lt;code class=&quot;highlighter-rouge&quot;&gt;|f(n)| &amp;lt;= |c*g(n)|&lt;/code&gt; for all &lt;code class=&quot;highlighter-rouge&quot;&gt;n =&amp;gt; N&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; is usually a complex function, which is not known precisely&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;g&lt;/code&gt; is a known function eg O(1), O(n) etc&lt;/li&gt;
  &lt;li&gt;use the “tightest” &lt;code class=&quot;highlighter-rouge&quot;&gt;g&lt;/code&gt; we can find for an algorithm&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;log-function&quot;&gt;Log function&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;x = log&lt;sub&gt;a&lt;/sub&gt;n if n = a&lt;sup&gt;x&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;log&lt;sub&gt;a&lt;/sub&gt; m * n = log&lt;sub&gt;a&lt;/sub&gt;m + log&lt;sub&gt;a&lt;/sub&gt;n&lt;/li&gt;
  &lt;li&gt;log&lt;sub&gt;a&lt;/sub&gt; m / n = log&lt;sub&gt;a&lt;/sub&gt;m - log&lt;sub&gt;a&lt;/sub&gt;n&lt;/li&gt;
  &lt;li&gt;log&lt;sub&gt;a&lt;/sub&gt;n&lt;sup&gt;c&lt;/sup&gt; = c * log&lt;sub&gt;a&lt;/sub&gt;n&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;time-complexities&quot;&gt;Time complexities&lt;/h6&gt;

&lt;p&gt;&lt;strong&gt;For some constant &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Polynomial-time = O(n&lt;sup&gt;c&lt;/sup&gt;)&lt;/li&gt;
  &lt;li&gt;Exponential-time = no better than O(c&lt;sup&gt;n&lt;/sup&gt;) where &lt;code class=&quot;highlighter-rouge&quot;&gt;c &amp;gt; 1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;section_1&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;fundamental-algorithms-and-data-structures&quot;&gt;Fundamental Algorithms and Data Structures&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#stack_topic&quot;&gt;Stacks&lt;/a&gt;, &lt;a href=&quot;#queue_topic&quot;&gt;queues&lt;/a&gt; and &lt;a href=&quot;#priority_queue_topic&quot;&gt;priority queues&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cbt_topic&quot;&gt;Complete binary trees&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heap_topic&quot;&gt;Heaps and heap operations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#java_heap&quot;&gt;Java class&lt;/a&gt; for (integer) heaps&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heap_sort_topic&quot;&gt;Heap sort&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;stack_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;stack-abstract-data-type-lifo&quot;&gt;Stack abstract data type (LIFO)&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;Basic operations:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;create&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;isEmpty&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;push&lt;/em&gt; (to top of stack)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;pop&lt;/em&gt; (delete and return from top of stack)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Represent it as:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;an array - all operations are O(1)&lt;/li&gt;
  &lt;li&gt;a linked list - all operations are O(1)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;queue_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;queue-abstract-data-type-fifo&quot;&gt;Queue abstract data type (FIFO)&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;Basic operations:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;create&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;isEmpty&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;insert&lt;/em&gt; (to the back of queue)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;delete&lt;/em&gt; (delete and return item at front of queue)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Represent it as:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;an array - all operations are O(1) and it must be “wrapped around”, treated as circular&lt;/li&gt;
  &lt;li&gt;a linked list - all operations are O(1)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;priority_queue_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;priority-queue-abstract-data-type&quot;&gt;Priority queue abstract data type&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;Basic operations:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;create&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;isEmpty&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;insert&lt;/em&gt; (new item with given priority)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;delete&lt;/em&gt; (delete and return item with highest priority)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Represent it as:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;unordered list - &lt;em&gt;insert&lt;/em&gt; O(1), &lt;em&gt;delete&lt;/em&gt; O(n)&lt;/li&gt;
  &lt;li&gt;ordered list - &lt;em&gt;insert&lt;/em&gt; O(n), &lt;em&gt;delete&lt;/em&gt; O(1)&lt;/li&gt;
  &lt;li&gt;heap - &lt;em&gt;insert&lt;/em&gt; and &lt;em&gt;delete&lt;/em&gt; are O(logn)&lt;/li&gt;
  &lt;li&gt;in all cases &lt;em&gt;create&lt;/em&gt; and &lt;em&gt;isEmpty&lt;/em&gt; are O(1)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;cbt_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;complete-binary-trees&quot;&gt;Complete Binary Trees&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;Height of a node:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;length of the longest path from the node to a leaf&lt;/li&gt;
  &lt;li&gt;height of a heap is the height of its root node&lt;/li&gt;
  &lt;li&gt;a binary tree of height &lt;code class=&quot;highlighter-rouge&quot;&gt;h&lt;/code&gt; can contain maximum 2&lt;sup&gt;h+1&lt;/sup&gt; - 1 nodes&lt;/li&gt;
  &lt;li&gt;therefore the height of a CBT with &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; nodes is é log&lt;sub&gt;2&lt;/sub&gt;( n + 1 ) - 1 ù&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;A complete binary tree with &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; nodes has:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the minimum possible height&lt;/li&gt;
  &lt;li&gt;the maximum possible number of nodes at each level &lt;em&gt;except the last&lt;/em&gt; (ie for &lt;code class=&quot;highlighter-rouge&quot;&gt;i = 0, ... , h - 2&lt;/code&gt;, level &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; has 2&lt;sup&gt;i&lt;/sup&gt; nodes&lt;/li&gt;
  &lt;li&gt;the nodes on the &lt;em&gt;last&lt;/em&gt; level are as far to the left as possible&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Properties of a CBT:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;with a height &lt;code class=&quot;highlighter-rouge&quot;&gt;h&lt;/code&gt;, it has at &lt;em&gt;most&lt;/em&gt; 2&lt;sup&gt;h+1&lt;/sup&gt; - 1 nodes&lt;/li&gt;
  &lt;li&gt;with &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; nodes, its height is é log&lt;sub&gt;2&lt;/sub&gt;( n + 1 ) - 1 ù&lt;/li&gt;
  &lt;li&gt;then it has é n / 2 ù leaf nodes&lt;/li&gt;
  &lt;li&gt;and it has ⌊ n / 2 ⌋ branch nodes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;heap_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;heaps&quot;&gt;Heaps&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;Def:&lt;/strong&gt; A CBT where each node stores an item, and has a priority value&lt;br /&gt;
   &lt;strong&gt;Heap property:&lt;/strong&gt; Every node’s priority is greater than or equal to the priorities of all its descendent nodes&lt;br /&gt;
   &lt;strong&gt;Min-heap:&lt;/strong&gt; Inverted so that the minimum priority is at the root
&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;For a node &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;its children are nodes &lt;code class=&quot;highlighter-rouge&quot;&gt;2i + 1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;2i + 2&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;its parent is the node &lt;code class=&quot;highlighter-rouge&quot;&gt;⌊ (i - 1) / 2 ⌋&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Basic operations:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;insert&lt;/em&gt; an item&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;build&lt;/em&gt; a heap containing a given set of items&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;delete&lt;/em&gt; the item with highest priority&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;impose&lt;/em&gt; the heap property on a given node&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Complexity:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;build&lt;/em&gt; is O(n log n) and there is an O(n) alternative&lt;/li&gt;
  &lt;li&gt;all other operations are O(log n) for algorithms which take O(1) steps at each level of the heap&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Insertion:&lt;/strong&gt;&lt;br /&gt;
   &lt;code class=&quot;highlighter-rouge&quot;&gt;while (new_value NOT in root &amp;amp;&amp;amp; new_value &amp;gt; parent_value)  
   swap new_value with parent_value&lt;/code&gt;&lt;br /&gt;
   &lt;strong&gt;Imposing:&lt;/strong&gt;&lt;br /&gt;
   Pre-condition - a specified node may violate the heap property, but all its descendents satisfy the property&lt;br /&gt;
   Post-condition - the specified node and all of its descendents satisfy the property&lt;br /&gt;
   &lt;code class=&quot;highlighter-rouge&quot;&gt;while (bad_value NOT in leaf &amp;amp;&amp;amp; bad_value &amp;lt; larger_child)  
   swap bad_value with larger_child&lt;/code&gt;&lt;br /&gt;
   &lt;strong&gt;Deletion:&lt;/strong&gt;&lt;br /&gt;
   &lt;code class=&quot;highlighter-rouge&quot;&gt;swap root with node in last (bottom-right) leaf  
delete last leaf  
impose heap property on bad value now in root&lt;/code&gt;&lt;br /&gt;
   &lt;strong&gt;Building:&lt;/strong&gt;&lt;br /&gt;
   Pre-condition - values are in arbitrary order&lt;br /&gt;
   Post-condition - values form a heap&lt;br /&gt;
   &lt;code class=&quot;highlighter-rouge&quot;&gt;for each non-leaf node in bottom-to-top right-to-left order  
   impose heap propery&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;java_heap&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;an-integer-heap-class&quot;&gt;An integer heap class&lt;/h5&gt;

&lt;p&gt;Represent using an array, where:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;children of a node &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; are in the array at &lt;code class=&quot;highlighter-rouge&quot;&gt;2i + 1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;2i + 2&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;parent of a node &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; are in the array at &lt;code class=&quot;highlighter-rouge&quot;&gt;(i - 1) / 2&lt;/code&gt; (floored automatically in Java)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Heap class &lt;a href=&quot;#heap_class&quot;&gt;implementation in Java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;heap_sort_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;heap-sort&quot;&gt;Heap Sort&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;more efficient than selection sort&lt;/li&gt;
  &lt;li&gt;O(n log n) in the worst case&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heap_sort&quot;&gt;pseudocode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;section_2&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;sorting-algorithms&quot;&gt;Sorting Algorithms&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#comparison_topic&quot;&gt;Comparison-based sorting&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#radix_topic&quot;&gt;Radix&lt;/a&gt; sort&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#trie_topic&quot;&gt;Tries&lt;/a&gt; (re&lt;strong&gt;trie&lt;/strong&gt;val)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Common sorts:&lt;/strong&gt;&lt;br /&gt;
   O(n&lt;sup&gt;2&lt;/sup&gt;) - selection, insertion, bubble&lt;br /&gt;
   O(n log n) - merge, heap&lt;br /&gt;
   Quicksort is O(n log n) on average (but no better than O(n&lt;sup&gt;2&lt;/sup&gt;) in the worst case&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;comparison_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;comparison-based-sorting&quot;&gt;Comparison-based sorting&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;Claim:&lt;/strong&gt; No sorting algorithm that is based on pairwise comparison can be better than O(n log n) in the worst case&lt;br /&gt;
   &lt;strong&gt;Justification:&lt;/strong&gt; Draw out the algorithm using a binary decision tree, where each node represents a comparison between two elements&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;leaf nodes represent the possible outcomes of the algorithm&lt;/li&gt;
  &lt;li&gt;so the number of leaf nodes = the possible ordering of &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; items&lt;/li&gt;
  &lt;li&gt;so there are at least &lt;code class=&quot;highlighter-rouge&quot;&gt;n!&lt;/code&gt; and maximum 2&lt;sup&gt;h+1&lt;/sup&gt; leaf nodes&lt;/li&gt;
  &lt;li&gt;its worst case complexity is O(h) where &lt;code class=&quot;highlighter-rouge&quot;&gt;h&lt;/code&gt; = its height&lt;/li&gt;
  &lt;li&gt;it follows that n! &amp;lt;= 2&lt;sup&gt;h+1&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/decision_tree.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Reversing inequality and taking log&lt;sub&gt;2&lt;/sub&gt; of both sides:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/comparison_based_complexity.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Giving a complexity of O(n log n) as required&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;radix_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;radix-sorting&quot;&gt;Radix sorting&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;O(n) complexity&lt;/li&gt;
  &lt;li&gt;exploits the structure of items to be sorted to achieve this&lt;/li&gt;
  &lt;li&gt;faster than O(n log n) only for very large &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;How it works:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;each iteration the items are distributed into buckets (lists)&lt;/li&gt;
  &lt;li&gt;during an &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;&lt;sup&gt;th&lt;/sup&gt; iteration an item is placed in the bucket corresponding to the integer represented by its bits&lt;/li&gt;
  &lt;li&gt;at the end of an iteration the buckets are concatenated to give a new sequence which will be used as the starting point of the next iteration&lt;/li&gt;
  &lt;li&gt;there are &lt;code class=&quot;highlighter-rouge&quot;&gt;m / b&lt;/code&gt; iterations, where &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; is the length of bit-sequences representing an item, and &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; is a chosen factor of &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To sort the following sequence: &lt;code class=&quot;highlighter-rouge&quot;&gt;15 43 5 27 60 18 26 2&lt;/code&gt;&lt;br /&gt;
   Where binary encodings are given by:&lt;br /&gt;
   &lt;code class=&quot;highlighter-rouge&quot;&gt;15 = 001111  43 = 101011  5 = 000101  27 = 011011&lt;/code&gt;&lt;br /&gt;
   &lt;code class=&quot;highlighter-rouge&quot;&gt;60 = 111100  18 = 010010  26 = 011010  2 = 000010&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Items have bit positions 0, …, 5 so &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; = 6&lt;br /&gt;
   &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; must be a factor of &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt;, so choose &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; = 2&lt;br /&gt;
   So we have 2&lt;sup&gt;b&lt;/sup&gt; = 2&lt;sup&gt;2&lt;/sup&gt; = 4 buckets labelled 0, 1, 2, 3 (or 00, 01, 10, 11)
   And &lt;code class=&quot;highlighter-rouge&quot;&gt;m / b = 3&lt;/code&gt; iterations are required&lt;/p&gt;

&lt;p&gt;See radix sorting pseudocode &lt;a href=&quot;#radix_sort&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Correctness:&lt;/strong&gt; For two items &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; where &lt;code class=&quot;highlighter-rouge&quot;&gt;x &amp;lt; y&lt;/code&gt;, we need to show that &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; precedes &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; in the final sequence&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;During the last iteration&lt;/strong&gt; where some bits of &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; differ:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the bits of &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; must be smaller than &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;so &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; goes into a bucket before &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; does&lt;/li&gt;
  &lt;li&gt;so &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; precedes &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; in the sequence after this iteration&lt;/li&gt;
  &lt;li&gt;in later iterations, &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; go in the same bucket as they don’t have any more differing bits&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Complexity:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;during each of the &lt;code class=&quot;highlighter-rouge&quot;&gt;m / b&lt;/code&gt; iterations, the sequence is scanned –&amp;gt; O(n) time, and buckets are concatenated –&amp;gt; O(2&lt;sup&gt;b&lt;/sup&gt;) time&lt;/li&gt;
  &lt;li&gt;overall, O(m / b (n + 2&lt;sup&gt;b&lt;/sup&gt;)) –&amp;gt; O(n)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Time-space trade-off:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the larger the value of b, the smaller the multiplicative constant (m / b) in the complexity function and so the faster the algorithm will become&lt;/li&gt;
  &lt;li&gt;an array of size 2&lt;sup&gt;b&lt;/sup&gt; is required, so increasing &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; will increase space requirements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;trie_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;tries&quot;&gt;Tries&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;stored items have a key that is interpreted as a sequence of bits/characters&lt;/li&gt;
  &lt;li&gt;there is a multiway branch at each node where each branch has an associated symbol&lt;/li&gt;
  &lt;li&gt;no two siblings have the same symbol&lt;/li&gt;
  &lt;li&gt;the branch to be taken at level &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; is determined by the &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;&lt;sup&gt;th&lt;/sup&gt; element of the key&lt;/li&gt;
  &lt;li&gt;tracing a path from root to a node spells out the key of the item&lt;/li&gt;
  &lt;li&gt;eg, used to store strings&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/trie.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Search&lt;/em&gt; and &lt;em&gt;insert&lt;/em&gt; algorithms for the trie found &lt;a href=&quot;#trie_alg&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Represent it as:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;an array of pointers, which represent children&lt;/li&gt;
  &lt;li&gt;linked lists, containing children of each node&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/trie_list.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#trie_class&quot;&gt;Example&lt;/a&gt; trie class to represent a dictionary&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;section_3&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;strings-and-text-algorithms&quot;&gt;Strings and text algorithms&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#compression_topic&quot;&gt;Text compression&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#huffman_topic&quot;&gt;Huffman&lt;/a&gt; and &lt;a href=&quot;#lzw_topic&quot;&gt;LZW&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#string_comparison_topic&quot;&gt;String comparison&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#string_distance_topic&quot;&gt;String distance&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#pattern_topic&quot;&gt;String/pattern search&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#brute_topic&quot;&gt;Brute force&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#kmp_topic&quot;&gt;KMP&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#bm_topic&quot;&gt;BM&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;compression_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;text-compression&quot;&gt;Text compression&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;lossless&lt;/li&gt;
  &lt;li&gt;compression ratio is &lt;code class=&quot;highlighter-rouge&quot;&gt;x / y&lt;/code&gt; where &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; = compressed and &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; = original&lt;/li&gt;
  &lt;li&gt;space saved = &lt;code class=&quot;highlighter-rouge&quot;&gt;1 - (x / y) * 100%&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;huffman_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;huffman-encoding&quot;&gt;Huffman encoding&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;statistical method&lt;/li&gt;
  &lt;li&gt;unique, variable-length codeword for each character&lt;/li&gt;
  &lt;li&gt;no codeword is the prefix of another&lt;/li&gt;
  &lt;li&gt;each character is a leaf node&lt;/li&gt;
  &lt;li&gt;codeword is the path from root to appropriate leaf&lt;/li&gt;
  &lt;li&gt;when going down the path, left route = 0, right route = 1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Huffman tree construction:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;add leaf nodes containing the character represented and its frequency&lt;/li&gt;
  &lt;li&gt;while there are &amp;gt; 1 parentless nodes
    &lt;ul&gt;
      &lt;li&gt;add new parent to the two nodes of smallest weight (frequency)&lt;/li&gt;
      &lt;li&gt;weight of the parent node = sum of child weights&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The tree for a file with char frequencies:&lt;br /&gt;
   &lt;code class=&quot;highlighter-rouge&quot;&gt;Space = 15  E = 11  A = 9  T = 8  I = 7  S = 7&lt;/code&gt;&lt;br /&gt;
   &lt;code class=&quot;highlighter-rouge&quot;&gt;R = 7  O = 6  N = 4  U = 3  H = 2  C = 1  D = 1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/huffman_1.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tree construction &lt;a href=&quot;#huff_contruct&quot;&gt;pseudocode&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Generating the codewords:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;following left and right paths down the constructed tree
    &lt;ul&gt;
      &lt;li&gt;Space &lt;code class=&quot;highlighter-rouge&quot;&gt;10&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;E &lt;code class=&quot;highlighter-rouge&quot;&gt;010&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;111&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;T &lt;code class=&quot;highlighter-rouge&quot;&gt;110&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;I &lt;code class=&quot;highlighter-rouge&quot;&gt;0000&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;S &lt;code class=&quot;highlighter-rouge&quot;&gt;0001&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;R &lt;code class=&quot;highlighter-rouge&quot;&gt;0011&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;O &lt;code class=&quot;highlighter-rouge&quot;&gt;0110&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;N &lt;code class=&quot;highlighter-rouge&quot;&gt;0111&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;U &lt;code class=&quot;highlighter-rouge&quot;&gt;00101&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;H &lt;code class=&quot;highlighter-rouge&quot;&gt;001001&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;C &lt;code class=&quot;highlighter-rouge&quot;&gt;0010000&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;D &lt;code class=&quot;highlighter-rouge&quot;&gt;0010001&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Weighted path length of tree T:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SUM( weight * distance from root )&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;sum is over all leaf nodes&lt;/li&gt;
  &lt;li&gt;this gives the number of bits in the compressed file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Complexity:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;building tree - O(n)&lt;/li&gt;
  &lt;li&gt;compression - O(n)&lt;/li&gt;
  &lt;li&gt;decompression - O(n)&lt;/li&gt;
  &lt;li&gt;use &lt;strong&gt;adaptive&lt;/strong&gt; Huffman coding
    &lt;ul&gt;
      &lt;li&gt;same tree built and adapted by compressor and decompressor&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;lzw_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;lzw-compression&quot;&gt;LZW compression&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;dictionary method&lt;/li&gt;
  &lt;li&gt;collection of strings, each with a bit pattern that represents it&lt;/li&gt;
  &lt;li&gt;dictionary built dynamically during compression and decompression&lt;/li&gt;
  &lt;li&gt;if string &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; is represented, so is every prefix of &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;a &lt;strong&gt;trie&lt;/strong&gt; is an ideal representation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At any given time during comp./decomp. there is a &lt;strong&gt;current codeword length &lt;code class=&quot;highlighter-rouge&quot;&gt;k&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2&lt;sup&gt;k&lt;/sup&gt; distinct codewords available&lt;/li&gt;
  &lt;li&gt;limits size of dictionary, but can be incremented as necessary (so doubling the codeword availability)&lt;/li&gt;
  &lt;li&gt;initial &lt;code class=&quot;highlighter-rouge&quot;&gt;k&lt;/code&gt; should be large enough to encode all strings of length &lt;code class=&quot;highlighter-rouge&quot;&gt;l&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;LZW compression &lt;a href=&quot;#lzw&quot;&gt;pseudocode&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/lzw_1.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LZW variants:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;constant - fixed capacity dictionary&lt;/li&gt;
  &lt;li&gt;dynamic - add 1 to current length whenever dictionary becomes full&lt;/li&gt;
  &lt;li&gt;LRU - when full, current string replaces the least recently used string in the dictionary&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;LZW decompression:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;builds same dictionary as compression but &lt;strong&gt;1 step out of phase&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;may encounter codeword that is not in dictionary
    &lt;ul&gt;
      &lt;li&gt;if (lookup fails) newS = oldS + oldS.charAt(0);&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;LZW decompression &lt;a href=&quot;#lzw_decomp&quot;&gt;pseudocode&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/lzw_2.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Complexity:&lt;/strong&gt; O(n) for comp. and decomp. each&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;string_comparison_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;string-comparison&quot;&gt;String comparison&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;given strings &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; of lengths &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;, what is the smallest number of basic operations needed to transform &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; into &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt;?&lt;/li&gt;
  &lt;li&gt;use
    &lt;ul&gt;
      &lt;li&gt;insertion&lt;/li&gt;
      &lt;li&gt;deletion&lt;/li&gt;
      &lt;li&gt;subsitution&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;String distance:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/distance_1.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prefixes:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;&lt;sup&gt;th&lt;/sup&gt; prefix of string &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; is first &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; chars of &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;let &lt;code class=&quot;highlighter-rouge&quot;&gt;d( i,j )&lt;/code&gt; = distance between prefix &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; and prefix &lt;code class=&quot;highlighter-rouge&quot;&gt;j&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;then distance between &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; = &lt;code class=&quot;highlighter-rouge&quot;&gt;d( m,n )&lt;/code&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;len(s) = m&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;len(t) = n&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Optimal alignment:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The last position of the alignment must either be of the form&lt;br /&gt;
   &lt;img src=&quot;/cs-notes/assets/images/algs/optimal_alignment.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In other words,&lt;br /&gt;
   &lt;img src=&quot;/cs-notes/assets/images/algs/optimal_alignment_alt.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;string_distance_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;distance-with-dynamic-programming&quot;&gt;Distance with dynamic programming&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;fill in entries of an &lt;code class=&quot;highlighter-rouge&quot;&gt;m * n&lt;/code&gt; table row by row, and column by column&lt;/li&gt;
  &lt;li&gt;time and space complexity = O(mn)&lt;/li&gt;
  &lt;li&gt;keep most recent entry in each column of the table
    &lt;ul&gt;
      &lt;li&gt;space complexity = O(m + n)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Distances table:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/distance_table.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;entries calculated one by one by applying formula above&lt;/li&gt;
  &lt;li&gt;final entry &lt;code class=&quot;highlighter-rouge&quot;&gt;d( 7,8 ) = 4&lt;/code&gt; so string distance is &lt;strong&gt;4&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;trace back to entry &lt;code class=&quot;highlighter-rouge&quot;&gt;( 0,0 )&lt;/code&gt; to find optimal alignment
    &lt;ul&gt;
      &lt;li&gt;vertical = deletion&lt;/li&gt;
      &lt;li&gt;horizontal = insertion&lt;/li&gt;
      &lt;li&gt;diagonal = match/substitution&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;pattern_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;stringpattern-search&quot;&gt;String/pattern search&lt;/h5&gt;

&lt;p&gt;Given a text &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; of length &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;, and a string/pattern &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; of length &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt;, find the position of the last occurence of &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;brute_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;brute-force-algorithm&quot;&gt;Brute force algorithm&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;current starting position in text = 0&lt;/li&gt;
  &lt;li&gt;compare chars from &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; left to right until the entire string is matched&lt;/li&gt;
  &lt;li&gt;if mismatch, advance starting position by 1 and repeat&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Brute force &lt;a href=&quot;#brute_force&quot;&gt;pseudocode&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Effectiveness:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;expressed using char arrays rather than strings in Java&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; char comparisons needed at each &lt;code class=&quot;highlighter-rouge&quot;&gt;n - (m + 1)&lt;/code&gt; positions in text before the pattern is found&lt;/li&gt;
  &lt;li&gt;worse case O(mn)&lt;/li&gt;
  &lt;li&gt;average case O(n)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;kmp_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;kmp-algorithm&quot;&gt;KMP algorithm&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;online - removes need to back-up in text&lt;/li&gt;
  &lt;li&gt;worst case O(n)&lt;/li&gt;
  &lt;li&gt;need to pre-process the string into a border table (an array &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; with an entry &lt;code class=&quot;highlighter-rouge&quot;&gt;b[j]&lt;/code&gt; for each position &lt;code class=&quot;highlighter-rouge&quot;&gt;j&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;if mismatch at &lt;code class=&quot;highlighter-rouge&quot;&gt;j&lt;/code&gt;, remain at current text char&lt;/li&gt;
  &lt;li&gt;the border table says what to compare next&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Border of a string &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a substring that
    &lt;ul&gt;
      &lt;li&gt;is a prefix&lt;/li&gt;
      &lt;li&gt;is a suffix&lt;/li&gt;
      &lt;li&gt;cannot be the string itself&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;eg for string &lt;code class=&quot;highlighter-rouge&quot;&gt;s = a c a c g a t a c a c&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;borders are &lt;code class=&quot;highlighter-rouge&quot;&gt;ac&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;acac&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;acac&lt;/code&gt; is the longest border&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Border table:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/border_table.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;b[j]&lt;/code&gt; is
    &lt;ul&gt;
      &lt;li&gt;the length of the longest border of &lt;code class=&quot;highlighter-rouge&quot;&gt;s[0...j-1]&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;max { k | s[0...k-1] = s[j-k...j-1] }&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;KMP seach :&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#kmp&quot;&gt;implementation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;this is O(n) worst case&lt;/li&gt;
  &lt;li&gt;naive method requires O(j&lt;sup&gt;2&lt;/sup&gt;) steps to find &lt;code class=&quot;highlighter-rouge&quot;&gt;b[j]&lt;/code&gt;, so O(m&lt;sup&gt;2&lt;/sup&gt;) overall&lt;/li&gt;
  &lt;li&gt;can be implemented in O(m + n) time (to set up border table and to conduct search)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;bm_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;boyer-moore-algorithm&quot;&gt;Boyer-Moore algorithm&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;string scanned left-to-right&lt;/li&gt;
  &lt;li&gt;mismatched char used to decide next comparison&lt;/li&gt;
  &lt;li&gt;need to pre-process string to record position of last occurence of each char in the alphabet&lt;/li&gt;
  &lt;li&gt;alphabet must be fixed in advance of search&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Position of last occurence of char &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt; in string &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;max { k | s[k] = c }&lt;/code&gt; if such a &lt;code class=&quot;highlighter-rouge&quot;&gt;k&lt;/code&gt; exists, &lt;code class=&quot;highlighter-rouge&quot;&gt;-1&lt;/code&gt; otherwise&lt;/li&gt;
  &lt;li&gt;store last occurence position of &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt; in array element &lt;code class=&quot;highlighter-rouge&quot;&gt;p[c]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Jump steps on a mismatch:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;if mismatch between &lt;code class=&quot;highlighter-rouge&quot;&gt;s[j]&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;t[i]&lt;/code&gt;, move &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; along so &lt;code class=&quot;highlighter-rouge&quot;&gt;p[t[i]]&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; aligns with &lt;code class=&quot;highlighter-rouge&quot;&gt;t[i]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;if this moves &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; in the “wrong direction”, instead move &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; one position to the right&lt;/li&gt;
  &lt;li&gt;if &lt;code class=&quot;highlighter-rouge&quot;&gt;t[i]&lt;/code&gt; doesn’t appear in the string, slide the string past &lt;code class=&quot;highlighter-rouge&quot;&gt;t[i]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Jump step cases:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;p[t[i]] &amp;lt; j and =&amp;gt; 0&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;new &lt;code class=&quot;highlighter-rouge&quot;&gt;i = i + m - 1 - p[t[i]]&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;new &lt;code class=&quot;highlighter-rouge&quot;&gt;j = m - 1&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;new &lt;code class=&quot;highlighter-rouge&quot;&gt;sp = sp + j - p[t[i]]&lt;/code&gt; (starting position)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;p[t[i]] &amp;gt; j&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;new &lt;code class=&quot;highlighter-rouge&quot;&gt;i = i + m - j&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;new &lt;code class=&quot;highlighter-rouge&quot;&gt;j = m - 1&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;new &lt;code class=&quot;highlighter-rouge&quot;&gt;sp = sp + 1&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;p[t[i]] = -1&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;new &lt;code class=&quot;highlighter-rouge&quot;&gt;i = i + m&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;new &lt;code class=&quot;highlighter-rouge&quot;&gt;j = m - 1&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;new &lt;code class=&quot;highlighter-rouge&quot;&gt;sp = sp + j + 1&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;BM &lt;a href=&quot;#bm&quot;&gt;implementation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BM complexity:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;worst case O(mn)&lt;/li&gt;
  &lt;li&gt;search for &lt;code class=&quot;highlighter-rouge&quot;&gt;s = ab...aa&lt;/code&gt; of length &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;t = aa...aaaa..aa&lt;/code&gt; of length &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;m - 1&lt;/code&gt; char comparisons needed at each &lt;code class=&quot;highlighter-rouge&quot;&gt;n - (m + 1)&lt;/code&gt; positions in text&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;section_4&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;graphs-and-graph-algorithms&quot;&gt;Graphs and graph algorithms&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#graph_basics_topic&quot;&gt;Graph basics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#graph_representations_topic&quot;&gt;Graph representations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#graph_search_topic&quot;&gt;Searching and traversal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#graph_weight_topic&quot;&gt;Weighted graphs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#topological_topic&quot;&gt;Topological ordering&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;graph_basics_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;graph-basics&quot;&gt;Graph basics&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;Undirected graphs:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;G = (V,E)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;each vertex is a point&lt;/li&gt;
  &lt;li&gt;each edge is a line joining a pair of vertices&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Connected:&lt;/strong&gt; every vertex pair is joined by a path&lt;br /&gt;
   &lt;strong&gt;Non-connected:&lt;/strong&gt; graph has 2+ connected components&lt;br /&gt;
   &lt;strong&gt;Tree:&lt;/strong&gt; connected and acyclic (no cycles)&lt;br /&gt;
   &lt;strong&gt;Forest:&lt;/strong&gt; acyclic and components are trees&lt;br /&gt;
   &lt;strong&gt;Complete (clique):&lt;/strong&gt; every vertex pair is joined by an edge&lt;br /&gt;
   &lt;strong&gt;Bipartite:&lt;/strong&gt; vertices are in two dijoint sets &lt;code class=&quot;highlighter-rouge&quot;&gt;U&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;W&lt;/code&gt; and &lt;strong&gt;every&lt;/strong&gt; edge joins a vertex in &lt;code class=&quot;highlighter-rouge&quot;&gt;U&lt;/code&gt; to one in &lt;code class=&quot;highlighter-rouge&quot;&gt;W&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/undirected_1.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For the graphs above:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;adjacent - &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;a,z&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Î&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;E&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;non-adjacent - &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;a,b&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;∉&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;E&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; is &lt;strong&gt;incident to&lt;/strong&gt; edge &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;a,z&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a, x, b, y, c&lt;/code&gt; is a path of length 4&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a, x, b, y, a&lt;/code&gt; is a cycle of length 4&lt;/li&gt;
  &lt;li&gt;all vertices have &lt;strong&gt;degree&lt;/strong&gt; 3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Directed graphs (digraphs):&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;D = (V,E)&lt;/code&gt; where &lt;code class=&quot;highlighter-rouge&quot;&gt;V&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;E&lt;/code&gt; are &lt;strong&gt;finite&lt;/strong&gt; sets&lt;/li&gt;
  &lt;li&gt;edges are ordered pairs&lt;/li&gt;
  &lt;li&gt;drawn as arrows&lt;/li&gt;
  &lt;li&gt;vertices have &lt;strong&gt;in-degrees&lt;/strong&gt; and &lt;strong&gt;out-degrees&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;paths and cycles must follow edge directions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/directed_1.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the graph above:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;u&lt;/code&gt; is adjacent &lt;strong&gt;to&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt; is ajdacent &lt;strong&gt;from&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;u&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; has in-degree 2 and out-degree 1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;graph_representations_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;graph-representations&quot;&gt;Graph representations&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;Representing the undirected graph G:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/undirected_2.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Representing the directed graph D:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/directed_2.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Implementing adjaceny lists:&lt;/strong&gt;&lt;br /&gt;
   Define classes representing&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;an entry of adjacency lists&lt;/li&gt;
  &lt;li&gt;a vertex (with a linked list representing its adjacency list)&lt;/li&gt;
  &lt;li&gt;a graph (with a size and an array of vertices)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Java &lt;a href=&quot;#adjacency_list&quot;&gt;implementation&lt;/a&gt; of an adjacency list&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;graph_search_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;graph-searching-and-traversal-algorithms&quot;&gt;Graph searching and traversal algorithms&lt;/h5&gt;

&lt;p&gt;Graph traversal is efficient if it visits all vertices of the graph in &lt;code class=&quot;highlighter-rouge&quot;&gt;O( |V| + |E| )&lt;/code&gt; time (by travelling along edges)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Depth-first search:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;follow a path of unvisited vertices until path can be extended no further&lt;/li&gt;
  &lt;li&gt;backtrack until an unvisited vertex is reached&lt;/li&gt;
  &lt;li&gt;repeat until there are no unvisited vertices (in all components of graph)&lt;/li&gt;
  &lt;li&gt;edges used form a &lt;strong&gt;depth-first spanning tree&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Represent it as:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;explicit stack&lt;/li&gt;
  &lt;li&gt;containing vertices on the path to the current vertex&lt;/li&gt;
  &lt;li&gt;popping corresponds to backtracking&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;DFS example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/dfs_1.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;DFS &lt;a href=&quot;#dfs&quot;&gt;implementation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DFS complexity:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;each vertex is visited ( &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; )&lt;/li&gt;
  &lt;li&gt;each element in adj. list is processed ( &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; )&lt;/li&gt;
  &lt;li&gt;O(n + m)&lt;/li&gt;
  &lt;li&gt;can adapt to adj. matrix representation, but this increases complexity to O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Applications of DFS:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;determine if graph is connected and/or identify its connected components&lt;/li&gt;
  &lt;li&gt;determine if a graph is bipartite&lt;/li&gt;
  &lt;li&gt;determine if a graph contains a cycle&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Breadth-first search:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;visit all adjacent vertices of current vertex (processing)&lt;/li&gt;
  &lt;li&gt;vertices processed in the order in which they are visited (queue)&lt;/li&gt;
  &lt;li&gt;continue until all vertices in current component have been processed&lt;/li&gt;
  &lt;li&gt;edges used form a &lt;strong&gt;breadth-first spanning tree&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Represent it as:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;queue&lt;/li&gt;
  &lt;li&gt;visited vertices are added&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;BFS example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/bfs_1.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;BFS &lt;a href=&quot;#bfs&quot;&gt;implementation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BFS complexity:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;each vertex visited and queued exactly once&lt;/li&gt;
  &lt;li&gt;each adj. list traversed once&lt;/li&gt;
  &lt;li&gt;O(n + m)&lt;/li&gt;
  &lt;li&gt;can adapt to adj. matrix as with DFS, but also O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Applications of BFS:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;finding distance between two vertices&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Distance between two vertices:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;assign distance &lt;code class=&quot;highlighter-rouge&quot;&gt;v = 0&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;carry out BFS from &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;when visiting a new vertex
    &lt;ul&gt;
      &lt;li&gt;assign its distance to be &lt;code class=&quot;highlighter-rouge&quot;&gt;1 + distance to its predecessor&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/bfs_2.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;graph_weight_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;weighted-graphs&quot;&gt;Weighted graphs&lt;/h5&gt;

&lt;p&gt;Each edge &lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt; has an integer weight given by &lt;code class=&quot;highlighter-rouge&quot;&gt;wt( e ) &amp;gt; 0&lt;/code&gt; (undirected or directed)&lt;br /&gt;
   Can represent weighted graphs using adj. lists and matrices as before&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/weighted_1.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/weighted_2.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dijkstra’s algorithm:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;finds shortest path from one vertex &lt;code class=&quot;highlighter-rouge&quot;&gt;u&lt;/code&gt; to all other vertices&lt;/li&gt;
  &lt;li&gt;maintains a set containing all vertices for which shortest path from &lt;code class=&quot;highlighter-rouge&quot;&gt;u&lt;/code&gt; is currently known&lt;/li&gt;
  &lt;li&gt;each vertex &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt; not in the set has a label &lt;code class=&quot;highlighter-rouge&quot;&gt;d(v)&lt;/code&gt; = length of a shortest path from &lt;code class=&quot;highlighter-rouge&quot;&gt;u -&amp;gt; v&lt;/code&gt; passing &lt;strong&gt;only&lt;/strong&gt; through vertices in the set&lt;/li&gt;
  &lt;li&gt;after adding &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt; to the set, carry out &lt;strong&gt;edge relaxation&lt;/strong&gt; (updating distance &lt;code class=&quot;highlighter-rouge&quot;&gt;d(w)&lt;/code&gt; for all vertices &lt;code class=&quot;highlighter-rouge&quot;&gt;w&lt;/code&gt; still not in the set)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Edge relaxation:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;suppose &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;w&lt;/code&gt; are not in &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt;, then we know
    &lt;ul&gt;
      &lt;li&gt;the shortest path from &lt;code class=&quot;highlighter-rouge&quot;&gt;u -&amp;gt; v&lt;/code&gt; passing only through &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;d(v)&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;the shortest path from &lt;code class=&quot;highlighter-rouge&quot;&gt;u -&amp;gt; w&lt;/code&gt; passing only through &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;d(w)&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;suppose &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt; is added to &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; and the edge &lt;code class=&quot;highlighter-rouge&quot;&gt;e = { v,w }&lt;/code&gt; has weight &lt;code class=&quot;highlighter-rouge&quot;&gt;wt( e )&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;calculate the shortest path &lt;code class=&quot;highlighter-rouge&quot;&gt;u -&amp;gt; w&lt;/code&gt; passing only through &lt;code class=&quot;highlighter-rouge&quot;&gt;S ∪ { v }&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/dijkstra_1.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is either:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the original path through &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; of length &lt;code class=&quot;highlighter-rouge&quot;&gt;d(w)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;the path combining edge &lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt; and shortest path &lt;code class=&quot;highlighter-rouge&quot;&gt;v -&amp;gt; u&lt;/code&gt; with length &lt;code class=&quot;highlighter-rouge&quot;&gt;wt( e ) + d(v)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Therefore, the distance is: &lt;br /&gt;
   &lt;code class=&quot;highlighter-rouge&quot;&gt;d(w) = min{ d(w), d(v) + wt( e ) }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Dijkstra’s algorithm &lt;a href=&quot;#dijkstra&quot;&gt;implementation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dijkstra complexity:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;with &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; vertices and &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; edges, using an &lt;strong&gt;unordered array&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;O(n) to initialise distances&lt;/li&gt;
      &lt;li&gt;O(n&lt;sup&gt;2&lt;/sup&gt;) to find minimum&lt;/li&gt;
      &lt;li&gt;O(m) for relaxation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;hence, O(n&lt;sup&gt;2&lt;/sup&gt;) overall&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;with &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; vertices and &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; edges, using a &lt;strong&gt;heap&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;O(n) to initialise distances and create heap&lt;/li&gt;
      &lt;li&gt;O(n log n) to find minimum&lt;/li&gt;
      &lt;li&gt;O(m log n) for relaxation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;hence, O(m log n) overall (more edges than vertices)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Dijkstra example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/dijkstra_2.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spanning tree:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;subgraph which is both a tree and spans every vertex&lt;/li&gt;
  &lt;li&gt;obtained from a connected graph by &lt;strong&gt;deleting edges&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;its weight = sum of weights of its edges&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For a weighted connected undirected graph, find a &lt;strong&gt;minimum weight spanning tree&lt;/strong&gt; (represents the cheapest way of interconnecting the vertices)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/spanning_tree.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Minimum weight spanning tree problem:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is an example of a &lt;strong&gt;greedy&lt;/strong&gt; algorithm&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;makes a sequence of decisions based on &lt;strong&gt;local optimality&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;ends up with the &lt;strong&gt;globally optimal&lt;/strong&gt; solution&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Prim-Jarnik algorithm:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;minimum spanning tree contructed by choosing a sequence of edges&lt;/li&gt;
  &lt;li&gt;initialisation is O(n) (where &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; is number of vertices)&lt;/li&gt;
  &lt;li&gt;outer loop executed &lt;code class=&quot;highlighter-rouge&quot;&gt;n - 1&lt;/code&gt; times&lt;/li&gt;
  &lt;li&gt;inner loop checks all edges from a tree-vertex to a non-tree vertex, of which there can be O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/li&gt;
  &lt;li&gt;overall, alg. is O(n&lt;sup&gt;3&lt;/sup&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Prim-Jarnik algorithm &lt;a href=&quot;#prim_jarnik&quot;&gt;pseudocode&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Prim-Jarnik example&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/prim_jarnik.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Prim-Jarnik proof of correctness will &lt;strong&gt;not&lt;/strong&gt; be part of the exam, so it is omitted here.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dijkstra’s refinement:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Introduce attribute &lt;code class=&quot;highlighter-rouge&quot;&gt;bestTV&lt;/code&gt; for each non-tree vertex &lt;code class=&quot;highlighter-rouge&quot;&gt;q&lt;/code&gt;&lt;br /&gt;
   This is the best tree vertex &lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt; for which &lt;code class=&quot;highlighter-rouge&quot;&gt;wt( {p, q} )&lt;/code&gt; is minimised&lt;br /&gt;
   &lt;a href=&quot;#dijkstra_refinement&quot;&gt;Pseudocode&lt;/a&gt; for this concept&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;initialisation is O(n)&lt;/li&gt;
  &lt;li&gt;while loop executed &lt;code class=&quot;highlighter-rouge&quot;&gt;n - 1&lt;/code&gt; time&lt;/li&gt;
  &lt;li&gt;O(n) to find minimal ntv&lt;/li&gt;
  &lt;li&gt;O(1) to adjoin and update&lt;/li&gt;
  &lt;li&gt;overall alg. is O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;topological_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;topological-ordering&quot;&gt;Topological ordering&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;Directed Acyclic Graphs:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;topological order&lt;/strong&gt; on a DAG is a labelling of the vertices &lt;code class=&quot;highlighter-rouge&quot;&gt;1, ..., n&lt;/code&gt; such that &lt;code class=&quot;highlighter-rouge&quot;&gt;(u, v) Î E&lt;/code&gt; implies &lt;code class=&quot;highlighter-rouge&quot;&gt;label(u) &amp;lt; label(v)&lt;/code&gt;&lt;br /&gt;
   A directed graph D has a topological order if and only if D is a DAG&lt;br /&gt;
   A &lt;strong&gt;source&lt;/strong&gt; is a vertex of in-degree 0 and a &lt;strong&gt;sink&lt;/strong&gt; has out-degree 0&lt;br /&gt;
   &lt;strong&gt;A DAG has at least one souce and at least one sink&lt;/strong&gt;, which forms the basis of a topological ordering alg.&lt;/p&gt;

&lt;p&gt;Topological ordering of DAG &lt;code class=&quot;highlighter-rouge&quot;&gt;D&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/dag.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Topological ordering alg. &lt;a href=&quot;#topological_ordering&quot;&gt;implementation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TOA correctness:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A vertex is given a label only when the number of incoming edges from unlabelled vertices is 0&lt;br /&gt;
   For &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; vertices, &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; edges:&lt;/p&gt;

&lt;p&gt;Adj. matrix representation involves&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;finding in-degree of each vertex, by scanning each column - O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/li&gt;
  &lt;li&gt;main loop executed &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; times for each row - O(n)&lt;/li&gt;
  &lt;li&gt;overall alg. is O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adj. list representation involves&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;finding in-degree of each vertex, by scanning the list - O(n + m)&lt;/li&gt;
  &lt;li&gt;main loop executed &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; times for each list&lt;/li&gt;
  &lt;li&gt;overall alg. is O(n + m)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Deadlock detection:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Methods to detect whether a digraph contains a cycle&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;adaptation of topological ordering alg.
    &lt;ul&gt;
      &lt;li&gt;if source list becomes empty before all vertices are labelled, there must be a cycle&lt;/li&gt;
      &lt;li&gt;if all vertices can be labelled, the digraph is acyclic&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;adaptation of DFS
    &lt;ul&gt;
      &lt;li&gt;when a vertex is visited, check where there is an edge from it to another vertex which is on the current path from the current starting vertex&lt;/li&gt;
      &lt;li&gt;the existence of such a vertex indicates a cycle&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a name=&quot;section_5&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;np-completeness&quot;&gt;NP Completeness&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#np_intro_topic&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#np_complete_topic&quot;&gt;NP-complete problems&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#classes_topic&quot;&gt;The classes P and NP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#poly_time_topic&quot;&gt;Polynomial-time reductions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#np_def_topic&quot;&gt;Formal def. of NP-completeness&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#prove_np_topic&quot;&gt;How to prove a problem is NP-complete&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;np_intro_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;introduction-1&quot;&gt;Introduction&lt;/h5&gt;

&lt;p&gt;We have seen algorithms for a wide range of problems, all of which are polynomial-time: their worst cast complexity is O(n&lt;sup&gt;c&lt;/sup&gt;) for some constant &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Recall the Eulerian cycle problem: whether a graph has a cycle that traverses each &lt;strong&gt;edge&lt;/strong&gt; exactly once&lt;br /&gt;
   Theorem: A connected undirected graph has an Eulerian cycle if and only if each vertex has even degree&lt;br /&gt;
   Therefore we can test and find such a cycle in a graph &lt;code class=&quot;highlighter-rouge&quot;&gt;G&lt;/code&gt; in&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;O(n&lt;sup&gt;2&lt;/sup&gt;) time if &lt;code class=&quot;highlighter-rouge&quot;&gt;G&lt;/code&gt; is represented with an adj. matrix&lt;/li&gt;
  &lt;li&gt;O(m + n) if it is represented with an adj. list (&lt;code class=&quot;highlighter-rouge&quot;&gt;m = |E|&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;n = |V|&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Recall the Hamiltonian cycle problem: whether a graph has a cycle that traverses each &lt;strong&gt;vertex&lt;/strong&gt; exactly once&lt;br /&gt;
   It is similar to the Eulerian cycle problem, but a polynomial-time algorithm has &lt;strong&gt;not&lt;/strong&gt; been found to solve it&lt;br /&gt;
   Its complexity is O(n&lt;sup&gt;2&lt;/sup&gt; * n!) in the worst case&lt;br /&gt;
   No polynomial-time algorithm has been found to solve this&lt;br /&gt;
   Therefore this problem is &lt;strong&gt;NP-complete&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;this is exponential (no better than O(b&lt;sup&gt;n&lt;/sup&gt;) for some &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;and cannot be expressed as O(n&lt;sup&gt;c&lt;/sup&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Polynomial vs exponential:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/poly_vs_exp.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Similar behaviour emerges in terms of computing power&lt;br /&gt;
   Basically, a thousand-fold increase in computing power would only add &lt;code class=&quot;highlighter-rouge&quot;&gt;6&lt;/code&gt; to the size of the largest problem instance solvable in &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; hour, for an algorithm of 3&lt;sup&gt;n&lt;/sup&gt; complexity&lt;/p&gt;

&lt;p&gt;A problem is &lt;strong&gt;polynomial-time solvable&lt;/strong&gt; if it admits a polynomial-time algorithm&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;np_complete_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;np-completeness-1&quot;&gt;NP-completeness&lt;/h5&gt;

&lt;p&gt;No polynomial-time algorithm is known for an NP-complete problem&lt;br /&gt;
   &lt;strong&gt;However&lt;/strong&gt;, if one of them is solvable, then they all are&lt;/p&gt;

&lt;p&gt;No proof of intractability is known for an NP-complete problem&lt;br /&gt;
   &lt;strong&gt;However&lt;/strong&gt;, if one of them is intractable, then they all are&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Causes of intractability:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;polynomial time is not sufficient in order to discover a solution
    &lt;ul&gt;
      &lt;li&gt;there are intractability proofs for this&lt;/li&gt;
      &lt;li&gt;some problems are &lt;strong&gt;undecidable&lt;/strong&gt; (no alg. could solve them)&lt;/li&gt;
      &lt;li&gt;some decidable problems have been shown to be intractable&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;solution itself is so large that exp. time is needed to output it
    &lt;ul&gt;
      &lt;li&gt;eg problems of generating all cycles for a given graph&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Roadblock:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;two players A and B&lt;/li&gt;
  &lt;li&gt;network of roads, with intersections&lt;/li&gt;
  &lt;li&gt;each road is coloured black, blue or green&lt;/li&gt;
  &lt;li&gt;some intersections are marked “A wins” or “B wins”&lt;/li&gt;
  &lt;li&gt;a player has a fleet of cars located at intersections (one car per intersection)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Player A begins, and then they take turns to&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;move a car of theirs on one or more roads of the same colour&lt;/li&gt;
  &lt;li&gt;a car may not overlap an intersection which already has a car&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The problem is deciding, for a given starting configuration, whether A can win, regardless of what moves B takes&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/roadblock.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So, &lt;code class=&quot;highlighter-rouge&quot;&gt;NP-complete problems&lt;/code&gt; must be &lt;strong&gt;equal&lt;/strong&gt; to one of: &lt;code class=&quot;highlighter-rouge&quot;&gt;Polynomial-time solvable problems&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Intractable problems&lt;/code&gt;, and &lt;strong&gt;not equal&lt;/strong&gt; to the other&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problems:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A problem is characterised by unspecified parameters&lt;br /&gt;
   A problem instance is created by giving these parameters values&lt;br /&gt;
   An example of a decision problem is the Hamiltonian cycle:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the answer is a “yes” or “no”&lt;/li&gt;
  &lt;li&gt;its instance if a graph &lt;code class=&quot;highlighter-rouge&quot;&gt;G&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;every instance is either a “yes”-instance or a “no”-instance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Other NP-complete problems:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Travelling Salesman Decision Problem&lt;br /&gt;
   Instance: a set of &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; cities and integer distance &lt;code class=&quot;highlighter-rouge&quot;&gt;d(i, j)&lt;/code&gt; between each pair of cities &lt;code class=&quot;highlighter-rouge&quot;&gt;i, j&lt;/code&gt; and a target integer &lt;code class=&quot;highlighter-rouge&quot;&gt;K&lt;/code&gt;&lt;br /&gt;
   Question: is there a permutation &lt;code class=&quot;highlighter-rouge&quot;&gt;P1P2...Pn-1Pn&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;1, 2,..., n&lt;/code&gt; such that &lt;code class=&quot;highlighter-rouge&quot;&gt;d(P1, P2) + d(P2, P3) + ... + d(Pn-1, Pn) + d(Pn, P1) &amp;lt;= K&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Clique Problem&lt;br /&gt;
   Instance: a graph &lt;code class=&quot;highlighter-rouge&quot;&gt;G&lt;/code&gt; and target integer &lt;code class=&quot;highlighter-rouge&quot;&gt;K&lt;/code&gt;&lt;br /&gt;
   Question: does &lt;code class=&quot;highlighter-rouge&quot;&gt;G&lt;/code&gt; contain a clique of size &lt;code class=&quot;highlighter-rouge&quot;&gt;K&lt;/code&gt;? (a set of &lt;code class=&quot;highlighter-rouge&quot;&gt;K&lt;/code&gt; verices for which there is an edge between all pairs&lt;/p&gt;

&lt;p&gt;Graph Colouring Problem&lt;br /&gt;
   Instance: a graph &lt;code class=&quot;highlighter-rouge&quot;&gt;G&lt;/code&gt; and target integer &lt;code class=&quot;highlighter-rouge&quot;&gt;K&lt;/code&gt;&lt;br /&gt;
   Question: can one of &lt;code class=&quot;highlighter-rouge&quot;&gt;K&lt;/code&gt; colours be attached to each vertex of &lt;code class=&quot;highlighter-rouge&quot;&gt;G&lt;/code&gt; so that adjacent vertices always have different colours?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/graph_colouring.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Satisfiability&lt;br /&gt;
   Instance: boolean expression &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; in &lt;strong&gt;conjunctive normal form&lt;/strong&gt;&lt;br /&gt;
   CNF: &lt;code class=&quot;highlighter-rouge&quot;&gt;C1 ∧ C2 ∧ ... ∧ Cn&lt;/code&gt; where each &lt;code class=&quot;highlighter-rouge&quot;&gt;Ci&lt;/code&gt; is a &lt;strong&gt;clause&lt;/strong&gt;&lt;br /&gt;
   Clause &lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;L1 ∨ L2 ∨ ... ∨ Lm&lt;/code&gt; where each &lt;code class=&quot;highlighter-rouge&quot;&gt;Lj&lt;/code&gt; is a &lt;strong&gt;literal&lt;/strong&gt;&lt;br /&gt;
   Literal &lt;code class=&quot;highlighter-rouge&quot;&gt;L&lt;/code&gt;: a variable &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; or its negation &lt;code class=&quot;highlighter-rouge&quot;&gt;¬x&lt;/code&gt;&lt;br /&gt;
   Question: is &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; satisfiable? (can values be assigned to the variables that make &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; true?)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/satisfiability.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;NP-completeness deals primarily with decision problems&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;corresponding to each instance of an optimisation or search problem&lt;/li&gt;
  &lt;li&gt;there is a family of instances of a decision problem obtainable by setting “target” values&lt;/li&gt;
  &lt;li&gt;an optimisation or search problem can be solved in poly. time if and only if the corresponding decision problem can&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;classes_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;the-classes-p-and-np&quot;&gt;The classes P and NP&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;P:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the class of all decision problems that can be solved in poly. time&lt;/li&gt;
  &lt;li&gt;often extended to include search and optimisation problems&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;NP:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the class of decision problems solvable in &lt;strong&gt;non-deterministic&lt;/strong&gt; polynomial time (a non-deterministic alg. can make non-deterministic choices, and hence is more powerful than a deterministic alg.)&lt;/li&gt;
  &lt;li&gt;P is contained within NP&lt;/li&gt;
  &lt;li&gt;there is no problem known to be in NP and known not to be in P&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;P vs NP:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A decision problem is NP if every “yes”-instance has a &lt;strong&gt;short certificate&lt;/strong&gt;&lt;br /&gt;
   i.e. a structure that can be used to verify, in polynomial time, that it is a “yes”-instance&lt;br /&gt;
   No corresponding claim is made for “no”-instances&lt;/p&gt;

&lt;p&gt;It is immediate that &lt;code class=&quot;highlighter-rouge&quot;&gt;P ⊆ NP&lt;/code&gt;, but whether &lt;code class=&quot;highlighter-rouge&quot;&gt;P = NP&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;P ⊂ NP&lt;/code&gt; is unknown&lt;br /&gt;
   Most believe that &lt;code class=&quot;highlighter-rouge&quot;&gt;P ≠ NP&lt;/code&gt;&lt;br /&gt;
   But if so, there are problems that must lie in NP and not in P, and these are the NP-complete problems (the hardest, eg HC, TSDP, Graph Colouring etc)&lt;br /&gt;
   A poly. time alg. for any of these would imply that they are &lt;strong&gt;all&lt;/strong&gt; in P&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Non-deterministic algorithms:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;has an extra operation: non-deterministic choice&lt;/li&gt;
  &lt;li&gt;has many possible executions depending on values returned from the choice&lt;/li&gt;
  &lt;li&gt;it solves a decision problem &lt;code class=&quot;highlighter-rouge&quot;&gt;Π&lt;/code&gt; if
    &lt;ul&gt;
      &lt;li&gt;for a “yes”-instance &lt;code class=&quot;highlighter-rouge&quot;&gt;I&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;Π&lt;/code&gt; there is &lt;strong&gt;some&lt;/strong&gt; execution that returns “yes”&lt;/li&gt;
      &lt;li&gt;for a “no”-instance &lt;code class=&quot;highlighter-rouge&quot;&gt;I&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;Π&lt;/code&gt; there is &lt;strong&gt;no&lt;/strong&gt; execution that returns “yes”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;and solves a decision problem &lt;code class=&quot;highlighter-rouge&quot;&gt;Π&lt;/code&gt; in poly. time if
    &lt;ul&gt;
      &lt;li&gt;for every “yes”-instance &lt;code class=&quot;highlighter-rouge&quot;&gt;I&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;Π&lt;/code&gt; there is &lt;strong&gt;some&lt;/strong&gt; execution &lt;code class=&quot;highlighter-rouge&quot;&gt;E&lt;/code&gt; that returns “yes”, which uses a number of steps bounded by a polynomial in the input&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A non-deterministic alg. can be viewed as&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a guessing stage (non-deterministic)&lt;/li&gt;
  &lt;li&gt;a checking stage (deterministic and poly. time)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Start —&amp;gt; guess a “certificate” —&amp;gt; verify the certificate —&amp;gt; Stop&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#non_deterministic&quot;&gt;Example&lt;/a&gt; of a non-deterministic alg.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;poly_time_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;polynomial-time-reductions&quot;&gt;Polynomial-time reductions&lt;/h5&gt;

&lt;p&gt;A mapping &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; from a decision problem &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1&lt;/code&gt; to a decision problem &lt;code class=&quot;highlighter-rouge&quot;&gt;Π2&lt;/code&gt; such that&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;for every instance &lt;code class=&quot;highlighter-rouge&quot;&gt;I1&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1&lt;/code&gt; we have
    &lt;ul&gt;
      &lt;li&gt;the instance &lt;code class=&quot;highlighter-rouge&quot;&gt;f(I1)&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;Π2&lt;/code&gt; can be contructed in poly. time&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;f(I1)&lt;/code&gt; is a “yes”-instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;Π2&lt;/code&gt; if and only if &lt;code class=&quot;highlighter-rouge&quot;&gt;I1&lt;/code&gt; is a “yes”-instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;we write &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1 ∝ Π2&lt;/code&gt; as an abbreviation for: there is a polynomial-time reduction from &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Π2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Properties of polynomial-time reductions:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Transitivity: &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1 ∝ Π2&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Π2 ∝ Π3&lt;/code&gt; implies that &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1 ∝ Π3&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Since &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1 ∝ Π2&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Π2 ∝ Π3&lt;/code&gt; we have&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a PTR &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Π2&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;a PTR &lt;code class=&quot;highlighter-rouge&quot;&gt;g&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;Π2&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Π3&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For any instance &lt;code class=&quot;highlighter-rouge&quot;&gt;I1&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1&lt;/code&gt;, since &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; is a PTR, we have&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;I2 = f( I1 )&lt;/code&gt; is an instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;Π2&lt;/code&gt; that can be constructed in poly. time&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;I2&lt;/code&gt; has the same answer as &lt;code class=&quot;highlighter-rouge&quot;&gt;I1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since &lt;code class=&quot;highlighter-rouge&quot;&gt;g&lt;/code&gt; is a PTR, we have&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;I3 = g( I2 )&lt;/code&gt; is an instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;Π3&lt;/code&gt; that can be constructed in poly. time&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;I3&lt;/code&gt; has the same answer as &lt;code class=&quot;highlighter-rouge&quot;&gt;I2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Putting the results together, for any instance &lt;code class=&quot;highlighter-rouge&quot;&gt;I1&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;I3 = g( f( I1 ) )&lt;/code&gt; is an instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;Π3&lt;/code&gt; constructed in poly. time&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;I3&lt;/code&gt; has the same answer as &lt;code class=&quot;highlighter-rouge&quot;&gt;I1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;ie the composition of &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;g&lt;/code&gt; is a PTR from &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Π3&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Π1 ∝ Π2&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Π2 Î P&lt;/code&gt; implies that &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1 Î P&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;to solve an instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1&lt;/code&gt;, reduce it to an instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;Π2&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Π1 ∝ Π2&lt;/code&gt; means that &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1&lt;/code&gt; is no harder than &lt;code class=&quot;highlighter-rouge&quot;&gt;Π2&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;i.e. if we can solve &lt;code class=&quot;highlighter-rouge&quot;&gt;Π2&lt;/code&gt;, then we can solve &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1&lt;/code&gt; without much more effort&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, reducing the Hamiltonian cycle problem to the travelling salesman problem:&lt;br /&gt;
   HC instance: a graph G&lt;br /&gt;
   HC question: does G contain a cycle that visits each vertex exactly once?&lt;/p&gt;

&lt;p&gt;TSDP instance: a set of &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; cities and integer distance &lt;code class=&quot;highlighter-rouge&quot;&gt;d(i, j)&lt;/code&gt; between each pair of cities &lt;code class=&quot;highlighter-rouge&quot;&gt;i, j&lt;/code&gt; and a target integer &lt;code class=&quot;highlighter-rouge&quot;&gt;K&lt;/code&gt;&lt;br /&gt;
   TSDP question: is there a permutation &lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;1,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;2,...,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt; such that &lt;code class=&quot;highlighter-rouge&quot;&gt;d(P1, P2) + d(P2, P3) + ... + d(Pn-1, Pn) + d(Pn, P1) &amp;lt;= K&lt;/code&gt;?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;G = (V, E)&lt;/code&gt; is an instance of HC&lt;/li&gt;
  &lt;li&gt;construct TSP &lt;code class=&quot;highlighter-rouge&quot;&gt;f(G)&lt;/code&gt; where
    &lt;ul&gt;
      &lt;li&gt;cities = &lt;code class=&quot;highlighter-rouge&quot;&gt;V&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;d(u, v) = 1&lt;/code&gt; if &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;u,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Î&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;E&lt;/span&gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; otherwise&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;K = |V|&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;f(G)&lt;/code&gt; can be constructed in poly. time&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;f(G)&lt;/code&gt; has a tour of length &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;= |V|&lt;/code&gt; if and only if &lt;code class=&quot;highlighter-rouge&quot;&gt;G&lt;/code&gt; has a Hamiltonian cycle (cannot take any of the edges with weight 2)&lt;/li&gt;
  &lt;li&gt;therefore &lt;code class=&quot;highlighter-rouge&quot;&gt;TSDP Î P&lt;/code&gt; implies that &lt;code class=&quot;highlighter-rouge&quot;&gt;HC Î P&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;equivalently &lt;code class=&quot;highlighter-rouge&quot;&gt;HC Ï P&lt;/code&gt;implies that &lt;code class=&quot;highlighter-rouge&quot;&gt;TSDP Ï P&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/hc_to_tsdp.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;np_def_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;definition&quot;&gt;Definition&lt;/h5&gt;

&lt;p&gt;A decision problem &lt;code class=&quot;highlighter-rouge&quot;&gt;Π&lt;/code&gt; is NP-complete if&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Π Î NP&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Π’&lt;/code&gt; is polynomial-time reducable to &lt;code class=&quot;highlighter-rouge&quot;&gt;Π&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;Π’∝Π&lt;/code&gt; for every problem &lt;code class=&quot;highlighter-rouge&quot;&gt;Π’&lt;/code&gt; in NP)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So if &lt;code class=&quot;highlighter-rouge&quot;&gt;Π&lt;/code&gt; is NP-complete and &lt;code class=&quot;highlighter-rouge&quot;&gt;Π Î P&lt;/code&gt; then P = NP&lt;br /&gt;
   Every problem in NP can be solved in polynomial time by reduction to &lt;code class=&quot;highlighter-rouge&quot;&gt;Π&lt;/code&gt;&lt;br /&gt;
   Supposing P ≠ NP, if &lt;code class=&quot;highlighter-rouge&quot;&gt;Π&lt;/code&gt; is NP-complete, then &lt;code class=&quot;highlighter-rouge&quot;&gt;Π Ï P&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/np_structure.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;prove_np_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;proving-np-completeness&quot;&gt;Proving NP-completeness&lt;/h5&gt;

&lt;p&gt;It is not feasible to describe a reduction from &lt;strong&gt;every&lt;/strong&gt; problem in NP&lt;br /&gt;
   However, suppose we knew just one NP-complete problem &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To prove &lt;code class=&quot;highlighter-rouge&quot;&gt;Π2&lt;/code&gt; is NP-complete, it is enough to show&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Π2&lt;/code&gt; is in NP&lt;/li&gt;
  &lt;li&gt;there exists a polynomial-time reduction from &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Π2&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;Π1 ∝ Π2&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Correctness of the approach:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;for any &lt;code class=&quot;highlighter-rouge&quot;&gt;Π' Î NP&lt;/code&gt;, since &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1&lt;/code&gt; is NP-complete we have &lt;code class=&quot;highlighter-rouge&quot;&gt;Π' ∝ Π1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;since &lt;code class=&quot;highlighter-rouge&quot;&gt;Π' ∝ Π&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1 ∝ Π2&lt;/code&gt; and in is transitive, it follows that &lt;code class=&quot;highlighter-rouge&quot;&gt;Π' ∝ Π2&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;since &lt;code class=&quot;highlighter-rouge&quot;&gt;Π' Î NP&lt;/code&gt; was arbitrary, &lt;code class=&quot;highlighter-rouge&quot;&gt;Π' ∝ Π2&lt;/code&gt; for all &lt;code class=&quot;highlighter-rouge&quot;&gt;Π' Î NP&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;hence &lt;code class=&quot;highlighter-rouge&quot;&gt;Π2&lt;/code&gt; is NP-complete&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cook’s Theorem, where the Satisfiability (SAT) problem is NP-complete&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;proof consists of generic poly-time reduction to SAT from an abstract definition of a general problem in NP&lt;/li&gt;
  &lt;li&gt;generic reduction could be instantiated to give an actual reduction for each individual NP problem&lt;/li&gt;
  &lt;li&gt;given this theorem, to prove that problem P is NP-complete it is sufficient to show that
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Π&lt;/code&gt; is in NP&lt;/li&gt;
      &lt;li&gt;there exists a poly-time reduction from SAT to &lt;code class=&quot;highlighter-rouge&quot;&gt;Π&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Clique Problem:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Instance: graph G and target integer K&lt;br /&gt;
   Question: does G contain a clique of size K?&lt;br /&gt;
   Proving: show clique is in NP, and that there exists a poly-time reduction from SAT to &lt;code class=&quot;highlighter-rouge&quot;&gt;Π&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We need to show SAT ∝ Clique:&lt;br /&gt;
   Given an instance B of SAT we construct a &lt;code class=&quot;highlighter-rouge&quot;&gt;(G, K)&lt;/code&gt; instance of Clique&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;K number of clauses of B&lt;/li&gt;
  &lt;li&gt;vertices of G are pairs &lt;code class=&quot;highlighter-rouge&quot;&gt;(l, C)&lt;/code&gt; where &lt;code class=&quot;highlighter-rouge&quot;&gt;l&lt;/code&gt; is a literal clause of &lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(l,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;C),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(m,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;D)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt; is an edge of G if and only if &lt;code class=&quot;highlighter-rouge&quot;&gt;l ≠ ¬m&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;C ≠ D&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;edge if distinct literals from different clauses can be satisfied simultaneously&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;poly-time construction O(n&lt;sup&gt;2&lt;/sup&gt;) (with &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; literals)&lt;/li&gt;
  &lt;li&gt;this is a poly-time reduction since B has a satisfying argument if and only if G has a clique of size K&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Proving it is a poly-time reduction:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;if B has a satisfying assignment then
    &lt;ul&gt;
      &lt;li&gt;if we choose a &lt;strong&gt;true&lt;/strong&gt; literal in each clause the corresponding vertices form a clique of size K in G&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;if G has a clique of size K then
    &lt;ul&gt;
      &lt;li&gt;assigning each literal associated with a vertex in the clique to be true yields a satisfying assignment for B&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following graph G has a clique of size 4 if and only if B has a satisfying assignment (which is a clique of size 4 here)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/clique.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;B = (x1 ∨ x2 ∨ ¬x3) ∧ (¬x1 ∨ x3 ∨ ¬x4) ∧ (¬x2 ∨ x4) ∧ (x2 ∨ ¬x3 ∨ x4)&lt;/code&gt;&lt;br /&gt;
   There are K = 4 clauses (bracket pairs)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problem restrictions:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A restriction consists of a subset of the instances of the original problem&lt;br /&gt;
  If a restriction of a given decision problem &lt;code class=&quot;highlighter-rouge&quot;&gt;Π&lt;/code&gt; is NP-complete, then so is &lt;code class=&quot;highlighter-rouge&quot;&gt;Π&lt;/code&gt;&lt;br /&gt;
  Given NP-complete &lt;code class=&quot;highlighter-rouge&quot;&gt;Π&lt;/code&gt;, a restriction of &lt;code class=&quot;highlighter-rouge&quot;&gt;Π&lt;/code&gt; &lt;strong&gt;might&lt;/strong&gt; be NP-complete&lt;/p&gt;

&lt;p&gt;eg a clique restricted to cubic graphs is in P, so a largest clique has size at most 4, so exhaustive search is O(n&lt;sup&gt;4&lt;/sup&gt;)&lt;/p&gt;

&lt;p&gt;K-colouring:&lt;br /&gt;
   Restriction of Graph Colouring for a fixed K number of colours&lt;br /&gt;
   2-colouring is in P, while 3-colouring is NP-complete&lt;/p&gt;

&lt;p&gt;K-SAT:&lt;br /&gt;
   Restriction of SAT in which every clause contains exactly K literals&lt;br /&gt;
   2-SAT is in P, while 3-SAT in NP-complete&lt;br /&gt;
   Showing 3-SAT Î NP is easy&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SAT ∝ 3-SAT:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Given instance B of SAT we will construct an instance B’ of 3-SAT&lt;br /&gt;
   For each clause Ci of B we construct a number of clauses of B’&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;if &lt;code class=&quot;highlighter-rouge&quot;&gt;C = l1&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;introduce 2 additional variables x1 and x2, and add the clauses &lt;code class=&quot;highlighter-rouge&quot;&gt;(l1 ∨ x1 ∨ x2), (l1 ∨ x1 ∨ ¬x2), (l1 ∨ ¬x1 ∨ x2), (l1 ∨ ¬x1 ∨ ¬x2)&lt;/code&gt; to B’&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;if &lt;code class=&quot;highlighter-rouge&quot;&gt;C = (l1 ∨ l2)&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;introduce 1 additional variable y and the clauses &lt;code class=&quot;highlighter-rouge&quot;&gt;(l1 ∨ l2 ∨ y) and (l1 ∨ l2 ∨ ¬y)&lt;/code&gt; to B’&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;if &lt;code class=&quot;highlighter-rouge&quot;&gt;C = (l1 ∨ l2 ∨ l3)&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;add the clause C to B’&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;if &lt;code class=&quot;highlighter-rouge&quot;&gt;C = (l1 ∨ ... ∨ lk)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;k &amp;gt; 3&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;introduce k - 3 additional variables z&lt;sub&gt;1&lt;/sub&gt;, …, z&lt;sub&gt;k-3&lt;/sub&gt;&lt;/li&gt;
      &lt;li&gt;add the clauses &lt;code class=&quot;highlighter-rouge&quot;&gt;(l1 ∨ l2 ∨ z1), (¬z1 ∨ l3 ∨ z2), (¬z2 ∨ l4 ∨ z3), ..., (¬zk-4 ∨ lk-2 ∨ zk-3), (¬zk-3 ∨ lk-1 ∨ lk)&lt;/code&gt; to B’&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Coping with NP-completeness:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Maybe only a restricted version is of interest (which may be in P)&lt;br /&gt;
   Seek an exponential-time alg. which improves on exhaustive search&lt;br /&gt;
   For an optimisation problem:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;settle for an approximation alg. that runs in poly-time&lt;/li&gt;
  &lt;li&gt;esp. if it gives a probably good result&lt;/li&gt;
  &lt;li&gt;use a heuristic&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For a decision problem:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;settle for a probabilistic alg. (correct answer with high probability)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;section_6&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;computability&quot;&gt;Computability&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#computability_intro&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#halting_topic&quot;&gt;The halting problem&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#computation_models_topic&quot;&gt;Models of computation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;computability_intro&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;introduction-2&quot;&gt;Introduction&lt;/h5&gt;

&lt;p&gt;A computer is:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;input x --&amp;gt; BLACK BOX --&amp;gt; output f(x)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The black box computes a function that maps an input to an output&lt;br /&gt;
   What functions can be computed? Alternatively, what problems can be solved?&lt;br /&gt;
   We need a definition of an algorithm if we view a computer as a device that can execute one&lt;/p&gt;

&lt;p&gt;Some problems cannot be solved by a computer, eg the Tiling problem&lt;br /&gt;
   A 1x1 square tile divided into 4 triangles by its diagonals with each triangle a given colour&lt;br /&gt;
   Each tile has a fixed orientation and no rotations are allowed&lt;br /&gt;
   Instance: a finite set &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; of tile descriptions&lt;br /&gt;
   Question: can any finite area, of any size, be completely covered using only tiles of types in &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt;, so that adjacent tile colours match?&lt;/p&gt;

&lt;p&gt;For example, tiling a 5x5 square:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/tiling_1.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Or extending to a larger region:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;overlap the top two rows with the bottom two rows (for an 8x5 tiled area)&lt;/li&gt;
  &lt;li&gt;place two of these 8x5’s side by side (with the right hand rectangle one row above the left hand rectangle)&lt;/li&gt;
  &lt;li&gt;and repeat this pattern to tile any finite area&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/tiling_2.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tiling a 10x10 square:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/tiling_3.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There is &lt;strong&gt;no&lt;/strong&gt; alg. for this problem&lt;br /&gt;
   For any alg. A that we might formulate, there is a set of tiles &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; for which either A doesn’t terminate or gives the wrong answer&lt;br /&gt;
   The problem is that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;“any size” means that we have to check all finite areas and there are infinitely many of these&lt;/li&gt;
  &lt;li&gt;for certain sets of tile descriptions that can tile any area, there is no “repeated pattern” we can use&lt;/li&gt;
  &lt;li&gt;would really have to be exhaustive&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Undecidable problems:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A problem &lt;code class=&quot;highlighter-rouge&quot;&gt;Π&lt;/code&gt; that admits no alg. is called &lt;strong&gt;non-computable&lt;/strong&gt; or &lt;strong&gt;unsolvable&lt;/strong&gt;&lt;br /&gt;
   If &lt;code class=&quot;highlighter-rouge&quot;&gt;Π&lt;/code&gt; is a decision problem and admits no alg., then it is called &lt;strong&gt;undecidable&lt;/strong&gt; (tiling problem is one)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Post’s correspondence problem:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A word is a finite string over some given finite alphabet&lt;br /&gt;
   Instance: two finite sequences of words &lt;code class=&quot;highlighter-rouge&quot;&gt;X1, ..., Xn&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Y1, ..., Yn&lt;/code&gt; (in the same alphabet)&lt;br /&gt;
   Question: does there exist a sequence &lt;code class=&quot;highlighter-rouge&quot;&gt;i1, i2, ..., ir&lt;/code&gt; of integers chosen from &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;1,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt; such that &lt;code class=&quot;highlighter-rouge&quot;&gt;Xi1Xi2...Xir = Yi1Yi2...Yir&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;For &lt;code class=&quot;highlighter-rouge&quot;&gt;n = 5&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;X1 = abb, X2 = a, X3 = bab, X4 = baba, X5 = aba&lt;/li&gt;
  &lt;li&gt;Y1 = bbab, Y2 = aa, Y3 = ab, Y4 = aa, Y5 = a&lt;/li&gt;
  &lt;li&gt;correspondence given by sequence &lt;code class=&quot;highlighter-rouge&quot;&gt;2, 1, 1, 4, 1, 5&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;word constructed from Xi’s = aabbabbbabaabbaba&lt;/li&gt;
      &lt;li&gt;word constructed from Yi’s = aabbabbbabaabbaba&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;however, if we removed the first letter from X1 and Y1, then we could never get a correspondence&lt;/li&gt;
  &lt;li&gt;thus this problem is undecidable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;halting_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;the-halting-problem&quot;&gt;The halting problem&lt;/h5&gt;

&lt;p&gt;Instance: a legal Java program &lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt; and an input string &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt;&lt;br /&gt;
   Question: does &lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt; halt when run on &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt;?&lt;br /&gt;
   We will prove that no such program can exist, and that thus, the halting problem is undecidable&lt;/p&gt;

&lt;p&gt;The below program &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt; will terminate if and only if input &lt;code class=&quot;highlighter-rouge&quot;&gt;n ≠ 1&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	  &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;With a word “erratic”, &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt; is called with &lt;code class=&quot;highlighter-rouge&quot;&gt;n = 7&lt;/code&gt; sequence of values:&lt;br /&gt;
   &lt;code class=&quot;highlighter-rouge&quot;&gt;22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1&lt;/code&gt;&lt;br /&gt;
   Then nobody knows whether “erratic” terminates for all values of &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Proof by contradiction that HP is undecidable:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Suppose we have alg. &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; that solves HP&lt;br /&gt;
   Let &lt;code class=&quot;highlighter-rouge&quot;&gt;Q&lt;/code&gt; be an implementation of this alg. as a Java method with &lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; parameters&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/halting_1.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Define a new program &lt;code class=&quot;highlighter-rouge&quot;&gt;P&lt;/code&gt; with a legal program &lt;code class=&quot;highlighter-rouge&quot;&gt;W&lt;/code&gt; as input&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/halting_2.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;P&lt;/code&gt; makes a copy of &lt;code class=&quot;highlighter-rouge&quot;&gt;W&lt;/code&gt; and calls &lt;code class=&quot;highlighter-rouge&quot;&gt;Q(W, W)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Q&lt;/code&gt; terminates by assumption&lt;/li&gt;
  &lt;li&gt;if it returns “yes”, &lt;code class=&quot;highlighter-rouge&quot;&gt;P&lt;/code&gt; enters an infinite loop&lt;/li&gt;
  &lt;li&gt;if it returns “no”, &lt;code class=&quot;highlighter-rouge&quot;&gt;P&lt;/code&gt; is terminated&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now let the input &lt;code class=&quot;highlighter-rouge&quot;&gt;W&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;P&lt;/code&gt; be the program &lt;code class=&quot;highlighter-rouge&quot;&gt;P&lt;/code&gt; itself&lt;br /&gt;
   Then &lt;code class=&quot;highlighter-rouge&quot;&gt;P&lt;/code&gt; would call &lt;code class=&quot;highlighter-rouge&quot;&gt;Q(P, P)&lt;/code&gt; (recall we assumed that &lt;code class=&quot;highlighter-rouge&quot;&gt;Q&lt;/code&gt; solves HP)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;if &lt;code class=&quot;highlighter-rouge&quot;&gt;Q&lt;/code&gt; returns “yes”, then by definition of &lt;code class=&quot;highlighter-rouge&quot;&gt;Q&lt;/code&gt; this means &lt;code class=&quot;highlighter-rouge&quot;&gt;P&lt;/code&gt; terminates&lt;/li&gt;
  &lt;li&gt;but this also means &lt;code class=&quot;highlighter-rouge&quot;&gt;P&lt;/code&gt; does not terminate (it enters into the loop)&lt;/li&gt;
  &lt;li&gt;this is a contradiction, therefore &lt;code class=&quot;highlighter-rouge&quot;&gt;Q&lt;/code&gt; must return “no”&lt;/li&gt;
  &lt;li&gt;and this means by definition of &lt;code class=&quot;highlighter-rouge&quot;&gt;Q&lt;/code&gt; that &lt;code class=&quot;highlighter-rouge&quot;&gt;P&lt;/code&gt; does no terminate&lt;/li&gt;
  &lt;li&gt;but it also means that &lt;code class=&quot;highlighter-rouge&quot;&gt;P&lt;/code&gt; does terminate&lt;/li&gt;
  &lt;li&gt;again, it is a contradiction&lt;/li&gt;
  &lt;li&gt;so if it can return neither reply, no such &lt;code class=&quot;highlighter-rouge&quot;&gt;Q&lt;/code&gt; can exist&lt;/li&gt;
  &lt;li&gt;therefore no alg. can solve HP&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Proving undecidabiltiy by reduction:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Suppose we can reduce any instance &lt;code class=&quot;highlighter-rouge&quot;&gt;I&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1&lt;/code&gt; into an instance &lt;code class=&quot;highlighter-rouge&quot;&gt;J&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;Π2&lt;/code&gt; such that &lt;code class=&quot;highlighter-rouge&quot;&gt;I&lt;/code&gt; has a “yes” answer for &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1&lt;/code&gt; if and only if &lt;code class=&quot;highlighter-rouge&quot;&gt;J&lt;/code&gt; has a “yes” answer for &lt;code class=&quot;highlighter-rouge&quot;&gt;Π2&lt;/code&gt; (no need for &lt;code class=&quot;highlighter-rouge&quot;&gt;J&lt;/code&gt; to be constructed in poly-time)&lt;br /&gt;
   If &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1&lt;/code&gt; is undecidable and we can perform such a reduction, then &lt;code class=&quot;highlighter-rouge&quot;&gt;Π2&lt;/code&gt; is undecidable&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hierarchy of decision problems:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/decision_hierarchy.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;computation_models_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;models-of-computation&quot;&gt;Models of computation&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;Deterministic finite-state automata (DFAs):&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;simple machines with limited memory&lt;/li&gt;
  &lt;li&gt;recognise input on a read-only tape&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consists of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a finite input alphabet &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;a finite set of states &lt;code class=&quot;highlighter-rouge&quot;&gt;Q&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;an initial state &lt;code class=&quot;highlighter-rouge&quot;&gt;q0 ∈ Q&lt;/code&gt; and set of &lt;strong&gt;accepting&lt;/strong&gt; states &lt;code class=&quot;highlighter-rouge&quot;&gt;F ⊆ Q&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;control/program or &lt;strong&gt;transition relation&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;T ⊆ (Q * A) * Q&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;((q, a), q') ∈ T&lt;/code&gt; means if in state &lt;code class=&quot;highlighter-rouge&quot;&gt;q&lt;/code&gt; and read &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;, then move to state &lt;code class=&quot;highlighter-rouge&quot;&gt;q'&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;deterministic means that if &lt;code class=&quot;highlighter-rouge&quot;&gt;((q, a1), q1), ((q, a2), q2) ∈ T&lt;/code&gt; either &lt;code class=&quot;highlighter-rouge&quot;&gt;a1 ≠ a2&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;q1 = q2&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;for any state and action there is at most one move&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/dfa_1.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;initial state denoted by incoming arrow&lt;/li&gt;
  &lt;li&gt;accepting states denoted by double circles&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Control/program for the above example:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/dfa_control.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A DFA defines a language&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;determines whether the string on the input tape belongs to that lang.&lt;/li&gt;
  &lt;li&gt;ie solves a decision problem&lt;/li&gt;
  &lt;li&gt;it &lt;strong&gt;accepts&lt;/strong&gt; a lang., through the input strings which, when “run”, end in an accepting state&lt;/li&gt;
  &lt;li&gt;in the above example, the DFA accepts the lang. consisting of the set of all strings comprising one or more a’s followed by one or more b’s (and its complement ie the language of strings with no consecutive a’s)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Non-deteministic finite-state automation (NFA):&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/dfa_2.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This one recognises strings that start and end with a &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; (in state &lt;code class=&quot;highlighter-rouge&quot;&gt;q1&lt;/code&gt; the &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; underneath can move to &lt;code class=&quot;highlighter-rouge&quot;&gt;q1&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;q2&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;Recognition for NFA is similar to non-deterministics algs. solving a decision problem&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;only require there exists a “run” that ends in an accepting state&lt;/li&gt;
  &lt;li&gt;any NFA can be converted to a DFA&lt;/li&gt;
  &lt;li&gt;therefore non-determinism doesn’t expand the class of languages that can be recognised by finite state automata&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;NFA to DFA reduction:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;use the subset construction
    &lt;ul&gt;
      &lt;li&gt;states of DFA are sets of states of the NFA&lt;/li&gt;
      &lt;li&gt;construction can cause a blow-up in number of states&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example without blow-up (recognises strings that start and end with &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/nfa_to_dfa.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Regular languages:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Languages that can be recognised by finite state automata&lt;br /&gt;
   A reg. lang. over an alphabet &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; can be specified by a &lt;strong&gt;regular expression&lt;/strong&gt; over &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt;&lt;br /&gt;
   &lt;code class=&quot;highlighter-rouge&quot;&gt;ε&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;σ&lt;/code&gt; are regex’s&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Regular expressions:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If &lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; are regex’s then so are (in order of lowest precedence first):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;R | S&lt;/code&gt; which denotes choice&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RS&lt;/code&gt; which denotes concatenation&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;R*&lt;/code&gt; which denotes 0 or more copies or &lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt; (closure)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(R)&lt;/code&gt; which is needed to override operator precedence&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additional operations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;complement &lt;code class=&quot;highlighter-rouge&quot;&gt;¬x&lt;/code&gt; (equivalent to the “or” of all chars. in &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; except &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;any single char. &lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt; (equivalent to the “or” of all chars.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;the lang. comprising 1+ a’s followed by 1+ b’s
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;aa*bb*&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;the lang. of string containing 2 consecutive a’s
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(a* | b*)* a a (a* | b*)*&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;the lang of strings that don’t contain 2 consecutive a’s
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;b* (abb*)* (ε | a)&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;the lang. of strings that start and end with &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;b (a* | b*)* b&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;L(R*)&lt;/code&gt; does not mean &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;r*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;∈&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;L(R)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;for certain regex’s, this cannot be recognised by any DFA&lt;/li&gt;
  &lt;li&gt;for such a lang., would need a memory to remember which string in &lt;code class=&quot;highlighter-rouge&quot;&gt;r ∈ L(R)&lt;/code&gt; is repeated
    &lt;ul&gt;
      &lt;li&gt;might be an unbounded number&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Regex example:&lt;/p&gt;

&lt;p&gt;Consider lang. &lt;code class=&quot;highlighter-rouge&quot;&gt;(aa*bb*)*&lt;/code&gt; with DFA&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/regex_dfa.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A DFA can’t recognise &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;r*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;∈&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;L(aa*bb*)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ie { (a&lt;sup&gt;m&lt;/sup&gt;b&lt;sup&gt;n&lt;/sup&gt;)&lt;code class=&quot;highlighter-rouge&quot;&gt;* |&lt;/code&gt; m &amp;gt; 0 and n &amp;gt; 0 }&lt;/li&gt;
  &lt;li&gt;would need to remember the &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; to check that a string is in the lang.&lt;/li&gt;
  &lt;li&gt;infinitely many values for &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;so it would need infintely many states&lt;/li&gt;
  &lt;li&gt;so, this is not a regular language&lt;/li&gt;
  &lt;li&gt;similarly, it can’t recognise { (a&lt;sup&gt;n&lt;/sup&gt;b&lt;sup&gt;n&lt;/sup&gt;)&lt;code class=&quot;highlighter-rouge&quot;&gt;* |&lt;/code&gt; n &amp;gt; 0 }
    &lt;ul&gt;
      &lt;li&gt;might need to use a stack, where a’s are pushed as they are read, and popped as b’s are read (like a counter)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Pushdown automata:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;unlimited memory&lt;/li&gt;
  &lt;li&gt;behave like a stack&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consists of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;finite input alphabet &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;finite set of stack symbols &lt;code class=&quot;highlighter-rouge&quot;&gt;G&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;finite set of states &lt;code class=&quot;highlighter-rouge&quot;&gt;Q&lt;/code&gt; including start state and set of accepting states&lt;/li&gt;
  &lt;li&gt;control/transition relation &lt;code class=&quot;highlighter-rouge&quot;&gt;T ⊆ (Q * AÈ{ε} * GÈ{ε}) * (Q * GÈ{ε})&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/pushdown_1.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Informally, the transition &lt;code class=&quot;highlighter-rouge&quot;&gt;(q, a, w) --&amp;gt; (r, v)&lt;/code&gt; means that&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;if we are in state &lt;code class=&quot;highlighter-rouge&quot;&gt;q&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;if &lt;code class=&quot;highlighter-rouge&quot;&gt;a ≠ ε&lt;/code&gt; then &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; is at head of tape&lt;/li&gt;
  &lt;li&gt;if &lt;code class=&quot;highlighter-rouge&quot;&gt;w ≠ ε&lt;/code&gt; then &lt;code class=&quot;highlighter-rouge&quot;&gt;w&lt;/code&gt; is at top of stack&lt;/li&gt;
  &lt;li&gt;move to state &lt;code class=&quot;highlighter-rouge&quot;&gt;r&lt;/code&gt; and
    &lt;ul&gt;
      &lt;li&gt;if &lt;code class=&quot;highlighter-rouge&quot;&gt;a ≠ ε&lt;/code&gt; then head++&lt;/li&gt;
      &lt;li&gt;if &lt;code class=&quot;highlighter-rouge&quot;&gt;w ≠ ε&lt;/code&gt; then pop &lt;code class=&quot;highlighter-rouge&quot;&gt;w&lt;/code&gt; from stack&lt;/li&gt;
      &lt;li&gt;if &lt;code class=&quot;highlighter-rouge&quot;&gt;v ≠ ε&lt;/code&gt; then push &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt; onto stack&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A PDA accepts an input if and only if after the input has been read, the stack is empty and control is in an accepting state&lt;br /&gt;
   There is no explicit test for empty stack, but you can just add a &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; symbol to the stack at start of computation&lt;br /&gt;
   Then check for emptiness when this symbol is at top of stack&lt;/p&gt;

&lt;p&gt;The PDA defined here are non-deterministic (NDPDA)&lt;br /&gt;
   More powerful than deterministic PDAs&lt;br /&gt;
   ie it can recognise languages that the DPDA might not, such as palindromes&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Palindromes:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sequences of chars. that read the same backwards as forwards&lt;br /&gt;
   Recognising with a PDA:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;push first half of sequence onto stack&lt;/li&gt;
  &lt;li&gt;as you read each char., check that it’s the same as the top of the stack and pop that element&lt;/li&gt;
  &lt;li&gt;enter an accepting state if all checks succeed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Why we need non-determinism:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;need to “guess” where middle of the stack is&lt;/li&gt;
  &lt;li&gt;cannot work this out and then check string
    &lt;ul&gt;
      &lt;li&gt;would need an unbounded number of states as the string could be of any finite length&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Palindrome example:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/pushdown_2.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;alphabet is &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;a,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;s0&lt;/code&gt; is start state and &lt;code class=&quot;highlighter-rouge&quot;&gt;s0&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;s3&lt;/code&gt; are the only accepting states&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(s0, ε, ε) --&amp;gt; (s1, $)&lt;/code&gt; move to &lt;code class=&quot;highlighter-rouge&quot;&gt;s1&lt;/code&gt; and push &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; onto stack&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(s1, a, ε) --&amp;gt; (s1, 1)&lt;/code&gt; read &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; and push &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(s1, b, 1) --&amp;gt; (s2, ε)&lt;/code&gt; read &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; is on top, pop, move to &lt;code class=&quot;highlighter-rouge&quot;&gt;s2&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(s2, b, 1) --&amp;gt; (s2, ε)&lt;/code&gt; read &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; is on top, pop&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(s2, ε, $) --&amp;gt; (s3, ε)&lt;/code&gt; if &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; is top, pop, move to &lt;code class=&quot;highlighter-rouge&quot;&gt;s3&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So the automaton recognises the language { (a&lt;sup&gt;n&lt;/sup&gt;b&lt;sup&gt;n&lt;/sup&gt;)&lt;code class=&quot;highlighter-rouge&quot;&gt; |&lt;/code&gt; n =&amp;gt; 0 }&lt;/p&gt;

&lt;p&gt;PDA are more powerful than finite-state - can recognise languages that a DFA cannot&lt;br /&gt;
   These languages are the &lt;strong&gt;context-free languages&lt;/strong&gt;&lt;br /&gt;
   Not all languages are context-free, for example, { (a&lt;sup&gt;n&lt;/sup&gt;b&lt;sup&gt;n&lt;/sup&gt;c&lt;sup&gt;n&lt;/sup&gt;)&lt;code class=&quot;highlighter-rouge&quot;&gt; |&lt;/code&gt; n =&amp;gt; 0 } cannot be recognised by a PDA&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Turing Machines:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Recognises a particular languages consisting of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;finite alphabet &lt;code class=&quot;highlighter-rouge&quot;&gt;Σ&lt;/code&gt;, including blank symbol &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;unbounded &lt;strong&gt;tape&lt;/strong&gt; of squares
    &lt;ul&gt;
      &lt;li&gt;each holding a single symbol of &lt;code class=&quot;highlighter-rouge&quot;&gt;Σ&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;unbounded in both directions&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;tape head&lt;/strong&gt; that scans a single square
    &lt;ul&gt;
      &lt;li&gt;read and write to square&lt;/li&gt;
      &lt;li&gt;moves 1 square left/right along the tape&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;set &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; of &lt;strong&gt;states&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;start state &lt;code class=&quot;highlighter-rouge&quot;&gt;s0&lt;/code&gt; and two &lt;strong&gt;halt&lt;/strong&gt; (or terminal) states &lt;code class=&quot;highlighter-rouge&quot;&gt;sY&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;sN&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;transition function&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;the inbuilt program&lt;/li&gt;
      &lt;li&gt;of the form &lt;code class=&quot;highlighter-rouge&quot;&gt;f: ((S/{sY, sN}) * Σ) --&amp;gt; (S * Σ * {left, right})&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For each non-terminal state and symbol, &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; specifies&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a new state&lt;/li&gt;
  &lt;li&gt;a new symbol&lt;/li&gt;
  &lt;li&gt;a direction in which to move&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;f(s, σ) = (s', σ', d)&lt;/code&gt; means reading &lt;code class=&quot;highlighter-rouge&quot;&gt;σ&lt;/code&gt; from the tape in state &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;move to state &lt;code class=&quot;highlighter-rouge&quot;&gt;s' ∈ S&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;overwrite &lt;code class=&quot;highlighter-rouge&quot;&gt;σ&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;σ ∈ Σ&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;move head in the direction &lt;code class=&quot;highlighter-rouge&quot;&gt;d ∈ {left, right}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Computation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;finite input string placed on tape&lt;/li&gt;
  &lt;li&gt;head placed on first symbol of the input&lt;/li&gt;
  &lt;li&gt;starts in state &lt;code class=&quot;highlighter-rouge&quot;&gt;s0&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;if halts in state &lt;code class=&quot;highlighter-rouge&quot;&gt;sY&lt;/code&gt;, answer is “yes”&lt;/li&gt;
      &lt;li&gt;if halts in state &lt;code class=&quot;highlighter-rouge&quot;&gt;sN&lt;/code&gt;, answer is “no”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Palindrome problem:&lt;br /&gt;
   Instance: finite string &lt;code class=&quot;highlighter-rouge&quot;&gt;Y&lt;/code&gt;
   Question: is &lt;code class=&quot;highlighter-rouge&quot;&gt;Y&lt;/code&gt; a palindrome?&lt;br /&gt;
   Java &lt;a href=&quot;#turing_palindrome&quot;&gt;method&lt;/a&gt; for this&lt;/p&gt;

&lt;p&gt;We can use a Turing machine for this problem, as we don’t need nondeterminism (don’t need to guess the middle)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#turing_palindrome_2&quot;&gt;TM algorithm&lt;/a&gt; for the palindrome problem&lt;/p&gt;

&lt;p&gt;For this, we need the following states:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;s0&lt;/code&gt; reading, erasing and remember leftmost symbol&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;s1, s2&lt;/code&gt; moving right, remembering symbol erased&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;s3, s4&lt;/code&gt; testing for appropritate rightmost symbol&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;s5&lt;/code&gt; moving back to leftmost symbol&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A TM can be described with a &lt;strong&gt;state transition diagram&lt;/strong&gt;&lt;br /&gt;
   A directed graph where&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;each state represented by vertex&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;f(s, σ) = (s', σ', d)&lt;/code&gt; represented by an edge from &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;s'&lt;/code&gt; labelled &lt;code class=&quot;highlighter-rouge&quot;&gt;(σ --&amp;gt; σ', d)&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;edge represents moving to &lt;code class=&quot;highlighter-rouge&quot;&gt;s'&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;σ --&amp;gt; σ'&lt;/code&gt; represents overwriting symbol on tape&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;d&lt;/code&gt; represents moving tape in a direction &lt;code class=&quot;highlighter-rouge&quot;&gt;d&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/turing.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Functions:&lt;/p&gt;

&lt;p&gt;TM that accepts language &lt;code class=&quot;highlighter-rouge&quot;&gt;L&lt;/code&gt; actually computes the function &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; where &lt;code class=&quot;highlighter-rouge&quot;&gt;f(s) = 1&lt;/code&gt; if &lt;code class=&quot;highlighter-rouge&quot;&gt;s ∈ L&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; otherwise&lt;/p&gt;

&lt;p&gt;The definition of a TM can be amended as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;to have set &lt;code class=&quot;highlighter-rouge&quot;&gt;H&lt;/code&gt; of halt states&lt;/li&gt;
  &lt;li&gt;function it computers is defined by &lt;code class=&quot;highlighter-rouge&quot;&gt;f(s) = s'&lt;/code&gt; where
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; is inital string&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;s'&lt;/code&gt; is string on tape when the machine halts&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;eg, the palindrome TM can be redefined such that it deletes the tape contents and&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;instead of entering &lt;code class=&quot;highlighter-rouge&quot;&gt;sY&lt;/code&gt;, it writes &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; on tape and enters halt state&lt;/li&gt;
  &lt;li&gt;instead of entering &lt;code class=&quot;highlighter-rouge&quot;&gt;sN&lt;/code&gt;, it writes &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; on tape and enters halt state&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Designing a TM to compute &lt;code class=&quot;highlighter-rouge&quot;&gt;f(k) = k + 1&lt;/code&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;input 1 0 0 0 1 0, output 1 0 0 0 1 1
    &lt;ul&gt;
      &lt;li&gt;pattern: replace rightmost &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;then moving right: if &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;, replace with &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; and continue right / if blank, halt&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;input 1 0 0 1 1 1, output 1 0 1 0 0 0
    &lt;ul&gt;
      &lt;li&gt;same pattern as 1&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;input 1 1 1 1 1, output 1 0 0 0 0 0
    &lt;ul&gt;
      &lt;li&gt;this is a special case&lt;/li&gt;
      &lt;li&gt;no rightmost &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;replace first blank before input with &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;then moving right: if &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; replace with &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; and continue right / if blank, halt&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;#turing_example&quot;&gt;TM algorithm&lt;/a&gt; for the above function&lt;/p&gt;

&lt;p&gt;For this, we need the following states:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;s0&lt;/code&gt; initial state moving right seeking start of input&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;s1&lt;/code&gt; moving left to rightmost &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; or blank&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;s2&lt;/code&gt; finding first &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; or blank, changing it to &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; and moving right, changing &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;s to &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;s&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;s3&lt;/code&gt; halt state&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Recognisable and decidable:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Language &lt;code class=&quot;highlighter-rouge&quot;&gt;L&lt;/code&gt; is &lt;strong&gt;Turing-recognisable&lt;/strong&gt; if, given input string &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;if &lt;code class=&quot;highlighter-rouge&quot;&gt;s ∈ L&lt;/code&gt;, then TM halts in state &lt;code class=&quot;highlighter-rouge&quot;&gt;sY&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;if &lt;code class=&quot;highlighter-rouge&quot;&gt;s Ï L&lt;/code&gt;, then TM halts in state &lt;code class=&quot;highlighter-rouge&quot;&gt;sN&lt;/code&gt; or fails to halt&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Language &lt;code class=&quot;highlighter-rouge&quot;&gt;L&lt;/code&gt; is &lt;strong&gt;Turing-decidable&lt;/strong&gt; if, given input string &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;if &lt;code class=&quot;highlighter-rouge&quot;&gt;s ∈ L&lt;/code&gt;, then TM halts in state &lt;code class=&quot;highlighter-rouge&quot;&gt;sY&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;if &lt;code class=&quot;highlighter-rouge&quot;&gt;s Ï L&lt;/code&gt;, then TM halts in state &lt;code class=&quot;highlighter-rouge&quot;&gt;sN&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Every decidable language is recognisable, but not every recognisable language is decidable&lt;/p&gt;

&lt;p&gt;A function &lt;code class=&quot;highlighter-rouge&quot;&gt;f: S* --&amp;gt; S*&lt;/code&gt; is &lt;strong&gt;Turing-computable&lt;/strong&gt; if there is a TM &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; such that, for any input &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; halts with output &lt;code class=&quot;highlighter-rouge&quot;&gt;f(s)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enhanced Turing Machines:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;TM can be enhanced in a few ways&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2+ tapes, rather than just one&lt;/li&gt;
  &lt;li&gt;a 2-dimensional “tape”&lt;/li&gt;
  &lt;li&gt;TM may operate non-deterministically (transition function may be a relation instead)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;None of these enhancements change the computing power&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;every lang./func. that is recognisable/decidable/computable with an enhanced TM is also R/D/C with a basic TM
    &lt;ul&gt;
      &lt;li&gt;non-determinism adds power to PDA, but not to DFAs nor TMs&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;proved by showing that basic TM can simulate any of these enhanced TMs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;P and NP:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;P often introduced as the class as decision problems solvable by a TM in poly-time&lt;br /&gt;
   NP introduced as the class of decision problems solvable by a non-deterministic TM in poly-time&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;in a non-deterministic TM, transition function replaced by a relation &lt;code class=&quot;highlighter-rouge&quot;&gt;f ⊆ ( (S * Σ) * (S * Σ * {left, right}) )&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;can make a number of different transition based on current state and symbol at head&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;non-det. doesn’t change what can be computed, but speeds it up&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To show P ≠ NP, sufficient to show that a standard TM cannot solve an NP-complete problem in poly-time&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Counter-programs:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These have&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;vartiables of type &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;labelled statements of the form &lt;code class=&quot;highlighter-rouge&quot;&gt;L: unlabelled_statement&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;unlabelled statements of the form
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;x = 0&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;x = y + 1&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;x = y - 1&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;if x == 0 goto L&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;halt;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Counter program &lt;a href=&quot;#counter_program&quot;&gt;example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Church-Turing thesis:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Based on the fact that a whole range of different computational models turn out to be equivalent in terms of what they can compute&lt;br /&gt;
   Reasonable to infer that any one of these models encapsulates what is effectively computable&lt;br /&gt;
   This thesis states that everything “effectively computable” is computable by a TM (not a theorem as uses informal terms)&lt;br /&gt;
   So there is an effective procedure for computing the value of the function, including all computers/programming langs. that we know about at present and even those we do not&lt;/p&gt;

&lt;p&gt;So the TM is an appropriate model for the “black box”&lt;/p&gt;

&lt;p&gt;Equivalent computational models (each can “simulate” the others):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;lambda calculus (Church)&lt;/li&gt;
  &lt;li&gt;TMs (Turing)&lt;/li&gt;
  &lt;li&gt;recursive functions (Kleene)&lt;/li&gt;
  &lt;li&gt;production systems (Post)&lt;/li&gt;
  &lt;li&gt;counter programs and all general purpose programming languages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;heap_class&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;heap-class-implementation-in-java&quot;&gt;Heap class implementation in Java&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Heap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;// create empty heap of max capacity n&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  
    &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;// create heap of capacity n containing items from array a&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// impose heap property&lt;/span&gt;
    
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// build a heap on current items&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// for each non-leaf node in bottom-to-top right-to-left order&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// start at parent of final leaf&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;impose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// insert item k&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  
  &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// current position(starting at new leaf node)&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//swap with parent&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// new position is position of parent&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// finalise location of item&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// delete and return the max&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;deleteMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// root&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// swap root with last leaf&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;impose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// on bad value in root&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// impose property on node i&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;impose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;finished&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;finished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  
    &lt;span class=&quot;c1&quot;&gt;// find larger child&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// assume left child first&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// change if right exists and is larger&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// bad node&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// swap&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// new position&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;finished&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// not bad node&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// finalise location&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a name=&quot;heap_sort&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;heapsort-pseudocode&quot;&gt;Heapsort pseudocode&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Build&lt;/strong&gt; sequence into a heap; // O(n)
    &lt;ul&gt;
      &lt;li&gt;for (int k = 0; k &amp;lt; n-1; k++)&lt;/li&gt;
      &lt;li&gt;// invariant: items 0,…,n-k-1 form a heap&lt;/li&gt;
      &lt;li&gt;// invariant: items n-k,…,n-1 are sorted&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Find&lt;/strong&gt; the largest unsorted item; // is in position 0, so O(1)&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Swap&lt;/strong&gt; it into position n-1-k; // its correct place O(1)&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Reduce&lt;/strong&gt; the size of the heap by 1; // O(1)&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Impose&lt;/strong&gt; the heap property on position 0; // this is O(log n)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Restore&lt;/strong&gt; size to original value;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Loop is iterated &lt;code class=&quot;highlighter-rouge&quot;&gt;n - 1&lt;/code&gt; times&lt;br /&gt;
   Each iteration takes O(log n) time&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;radix_sort&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;radix-sort-pseudocode&quot;&gt;Radix sort pseudocode&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// helper method which would return the value represented by the b bits of x when starting at position p&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// a is the sequence to be sorted&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// m is the number of bits in each item of a&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// b is the block length of radix sort&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numIterations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numBuckets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ArraList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// sequence a&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// representing the buckets&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bucket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;numBuckets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numBuckets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numIterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// clear buckets&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numBuckets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;// distribute items in order&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// find correct bucket&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// clear sequence&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;// concatenate buckets in order&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numBuckets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;trie_alg&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;tries-1&quot;&gt;Tries&lt;/h6&gt;

&lt;p&gt;&lt;strong&gt;Search:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// search for a word w in a trie t&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// current position in w&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;labelled&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// if can match the char of word in the current position&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// end of word&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;intermediate&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;absent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;present&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// not at end of word&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// move to child&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// move to next char&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;absent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// can't match current char&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Insert:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// insert word w into trie t&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// go through chars of word&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;labelled&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;such&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mark&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;intermediate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// move to child node&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;mark&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;representing&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;trie_class&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;trie-class&quot;&gt;Trie class&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// label of incoming branch&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isWord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true when node represents a word&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sibling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// next sibling&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// first child&lt;/span&gt;
  
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  
    &lt;span class=&quot;nx&quot;&gt;letter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;isWord&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;sibling&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// include accessors and mutators for the various components of a class&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Trie&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Trie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MIN_VALUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;huff_contruct&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;huffman-tree-construction&quot;&gt;Huffman tree construction&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// set up leaf nodes&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;distinct&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;occuring&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parentless&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;frequency&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setCharacter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setLeftChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setRightChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// construct branch nodes and links&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parentless&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nodes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parentless&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parentless&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nodes&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;minimum&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setLeftChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setRightChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// the final z is root&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;lzw&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;lzw-compression-1&quot;&gt;LZW compression&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;initialise&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;codeword&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;initialise&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dictionary&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;exhausted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  
  &lt;span class=&quot;nx&quot;&gt;identify&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;longest&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;starting&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;represented&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;codeword&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// using k bits&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;// move to next position in t&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// move forward by the length of the string just encoded&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// char in next position&lt;/span&gt;
  
  &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;paired&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;available&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;codeword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// involves adding a new leaf node if d is represented by a trie&lt;/span&gt;
  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;lzw_decomp&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;lzw-decompression&quot;&gt;LZW decompression&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;initialise&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;codeword&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;initialise&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dictionary&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;codeword&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;compressed&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// read k bits&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lookUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// look up codeword in d&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// output decompressed string&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;exhausted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oldS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// copy last string decompressed&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;full&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;codeword&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loopUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// look up codeword in d&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// output decompressed string&lt;/span&gt;
  
  &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oldS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// string to add to d&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newS&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;paired&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;available&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;codeword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;brute_force&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;brute-force-algorithm-1&quot;&gt;Brute force algorithm&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// return smallest k such that s occurs in t starting at position k, or -1 if no k exists&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bruteForce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// length of string/pattern&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// length of text&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// starting position in t&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// curr position in t&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// curr position in s&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// not reached end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// chars match&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// move on in t&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// move on in s&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// start again in s&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// advance starting position&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// back up in text to new starting position&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;kmp&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;kmp-search-implementation&quot;&gt;KMP search implementation&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// return smallest k such that s occurs from position k in t, or -1 if no k exists&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// create border table&lt;/span&gt;
  
  &lt;span class=&quot;nx&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// set up border table&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// not reached end of text&lt;/span&gt;
  
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// positions match&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// move on in text&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// move on in string&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// reached end of string so a match&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// mismatch so adjust curr position in string using border table&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// if there is a common prefix/suffix then change position in string&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// no common prefix/suffix&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// then move forward 1 position in text if not advanced&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// else start from beginning of string&lt;/span&gt;
	  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// no occurence&lt;/span&gt;
  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;bm&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;boyer-moore-implementation&quot;&gt;Boyer-Moore implementation&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// return smallest k such that s occurs at k in t, or -1 if no k exists&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// pos in text&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// pos in string&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// declare a suitable array p&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// set up last occurence array&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// match&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// move back in text&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// move back in string&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;sp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]);&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]);&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// return to end of string&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;adjacency_list&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;adjacency-list-implementation&quot;&gt;Adjacency list implementation&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// an entry in the adjacency list&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AdjListNode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertexIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// possibly other fields eg weight, capacity...&lt;/span&gt;
  
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AjdListNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;vertexIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getVertexIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertexIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setVertexIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;vertexIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// a vertex&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vertex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// the index of this vertex&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AjdListNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adjList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// and its adjacency list&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// possibly other fields eg storing data&lt;/span&gt;
  
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;adjList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AjdListNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// add vertex with index m to the adj list&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addToAdjList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;adjList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addLast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AjdListNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertexDegree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adjList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// a graph&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Graph&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numVertices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// possibly other fields for graph properties&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;// create graph with vertices indexed 0,..., n-1&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;numVertices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;vertices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numVertices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;dfs&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;depth-first-search-implementation&quot;&gt;Depth-first search implementation&lt;/h6&gt;

&lt;p&gt;Add this to the previously defined &lt;strong&gt;vertex&lt;/strong&gt; class:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// index of predecessor vertex&lt;/span&gt;
   
   &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getVisited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setVisited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;visited&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getPred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setPred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;pred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And add this to the previously defined &lt;strong&gt;graph&lt;/strong&gt; class:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;c1&quot;&gt;// visit vertex v with predecessor p&lt;/span&gt;
   &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Vertex&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   
     &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setVisited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// update&lt;/span&gt;
	 &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setPred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// set predecessor (-1 if none)&lt;/span&gt;
	 &lt;span class=&quot;nx&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AdjListNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAjdList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// get adj. list&lt;/span&gt;
	 
	 &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AdjListNode&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// go through all adjacent vertices&lt;/span&gt;
	   &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vertices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getVisited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vertices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// if current vertex hasn't been visited, continue the search from there&lt;/span&gt;
	 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	 
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   
   &lt;span class=&quot;c1&quot;&gt;// carry out a df traversal&lt;/span&gt;
   &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   
     &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Vertex&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setVisited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// initialise&lt;/span&gt;
	 &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Vertex&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getVisited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// if vertex not visited, start search there&lt;/span&gt;
   
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;bfs&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;breadth-first-search-implementation&quot;&gt;Breadth-first search implementation&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Vertex&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setVisited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// initialise&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Vertex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Vertex&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getVisited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// start search&lt;/span&gt;
  
    &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setVisited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// now visited&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setPredecessor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// v initial vertex&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ready to be processed&lt;/span&gt;
	
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	
	  &lt;span class=&quot;nx&quot;&gt;Vertex&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// get next vertex to process&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AdjListNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAdjList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// get its adj. list&lt;/span&gt;
	  
	  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AdjListNode&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// go through its adj. list&lt;/span&gt;
	  
	    &lt;span class=&quot;nx&quot;&gt;Vertex&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getVertexIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// next vertex in list&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getVisited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		  
		  &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setVisited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// now visited&lt;/span&gt;
		  &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setPredecessor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// set predecessor of w to be u&lt;/span&gt;
		  &lt;span class=&quot;nx&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// add to queue&lt;/span&gt;
		  
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	  
	  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;dijkstra&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;dijkstras-algorithm-implementation&quot;&gt;Dijkstra’s algorithm implementation&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// S is set of vertices for which shortest path from u is known&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// d(w) is length of a shortest path from u to w passing only through vertices of S&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// initialise S&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertex&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// initialise distances&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// still vertices to add in S&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;minimum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adjacent&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// perfom relaxation&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;non_deterministic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;graph-colouring---example-of-a-non-deterministic-alg&quot;&gt;Graph colouring - example of a non-deterministic alg.&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// return true if graph g is k-colourable&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nDGC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Graph&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertex&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setColour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nonDeterministicChoice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// guess a colour for each vertex&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;edge&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getColour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getColour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// verify the colouring&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;prim_jarnik&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;prim-jarnik-algorithm-pseudocode&quot;&gt;Prim-Jarnik algorithm pseudocode&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arbitrary&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertex&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vertex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertices&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;non&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vertices&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ntv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ntv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;edge&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;graph&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;such&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;that&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ntv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;wt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;minimised&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;adjoin&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;edge&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;spanning&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;dijkstra_refinement&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;dijkstras-refinement-to-the-prim-jarnik-algorithm&quot;&gt;Dijkstra’s refinement to the Prim-Jarnik algorithm&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arbitrary&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertex&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vertex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertices&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;non&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vertices&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ntv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ntv&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bestTV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r is the only tv&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ntv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ntv&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;which&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bestTV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;minimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;adjoin&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bestTV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ntv&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bestTV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// update as tv set changed&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;topological_ordering&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;topological-ordering-algorithm&quot;&gt;Topological ordering algorithm&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// assume each vertex has 2 integer attributes, label and count&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// count is the number of incoming edges from unlabelled vertices&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertex&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getInDegree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;up&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;empty&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sourceQueue&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertex&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sourceQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// add vertices with no incoming edges&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nextLabel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// to give the topological order&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sourceQueue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;take&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sourceQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nextLabel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// label the vertex&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  
    &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// update attribute count&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sourceQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// add vertex if no incoming vertices&lt;/span&gt;
  
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;turing_palindrome&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;java-method-for-the-palindrome-problem&quot;&gt;Java method for the palindrome problem&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isPalindrome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isPalindrome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;turing_palindrome_2&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;turing-machine-alg-for-the-palindrome-problem&quot;&gt;Turing machine alg. for the palindrome problem&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;erase&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;enter&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;remembers&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;only&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;blank&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;remain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;enter&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;accepting&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;halt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;matches&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;erased&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;erase&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;too&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; 
  &lt;span class=&quot;nx&quot;&gt;enter&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rejecting&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;halt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;enter&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;accepting&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;halt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;remaining&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;repeat&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;turing_example&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;turing-machine-alg-for-the-function-fk--k--1&quot;&gt;Turing Machine alg. for the function &lt;code class=&quot;highlighter-rouge&quot;&gt;f(k) = k + 1&lt;/code&gt;&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;seeking&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;blank&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;looking&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;blank&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;blank&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;found&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;changing&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;halt&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;blank&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reached&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;counter_program&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;counter-program-to-evaluate-the-product-x-x-y-with-a-b-c-labels&quot;&gt;Counter program to evaluate the product &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; x &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; (with &lt;code class=&quot;highlighter-rouge&quot;&gt;A, B, C&lt;/code&gt; labels&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// initialise some vars.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// finished product&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// end of outer for loop&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// perform this loop x times&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// each time around the loop we set v = y&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// in a slightly contrived way&lt;/span&gt;
  
&lt;span class=&quot;nl&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// end of inner for loop&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// perform this loop v times&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// each time incrementing z, so really add y to z by end of inner loop&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// return to start of inner loop&lt;/span&gt;
  
&lt;span class=&quot;nl&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;halt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 10 Jan 2018 18:50:00 +0000</pubDate>
        <link>http://localhost:4000/cs-notes/level3/semester1/2018/01/10/algorithmics-1.html</link>
        <guid isPermaLink="true">http://localhost:4000/cs-notes/level3/semester1/2018/01/10/algorithmics-1.html</guid>
        
        
        <category>Level3</category>
        
        <category>Semester1</category>
        
      </item>
    
      <item>
        <title>Mobile HCI	</title>
        <description>&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Notion of mobiles varies from coutruy to countriy
    &lt;ul&gt;
      &lt;li&gt;UK - mobile&lt;/li&gt;
      &lt;li&gt;Germany - andly&lt;/li&gt;
      &lt;li&gt;Finish - travel phone&lt;/li&gt;
      &lt;li&gt;Japanese - portable telephone&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;!--excerpt--&gt;

&lt;ul&gt;
  &lt;li&gt;What is mobile to me?
    &lt;ul&gt;
      &lt;li&gt;Helper, Communication, Keys to Internet&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Do we check our mobiles too much?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How are people using cameras?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reading books - phisical/electronic?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Impact on Humans
    &lt;ul&gt;
      &lt;li&gt;Addiction&lt;/li&gt;
      &lt;li&gt;Controlling our world/being controlled by our phone&lt;/li&gt;
      &lt;li&gt;Negative in social sitiations&lt;/li&gt;
      &lt;li&gt;Gradually deskill us&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Social aspects
    &lt;ul&gt;
      &lt;li&gt;Social media faster than news&lt;/li&gt;
      &lt;li&gt;More power to the citizens&lt;/li&gt;
      &lt;li&gt;It changes the way we communicate with each other&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Consequences on society?&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;android&quot;&gt;Android&lt;/h1&gt;

&lt;h2 id=&quot;android-architecture&quot;&gt;Android Architecture&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/mobhci/androidArchitecture.PNG&quot; alt=&quot;Android Architecture&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;android-stack&quot;&gt;Android Stack&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/mobhci/androidStack.PNG&quot; alt=&quot;Android Software Stack&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Java apps running on Java-based, object-oriented application framework on top of Java core libraries running on Dalvik virtual machine&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Android apps written in Java&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Bundled by &lt;em&gt;aapt tool&lt;/em&gt; to return a &lt;strong&gt;.apk&lt;/strong&gt; file&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;By default each app runs in its own Linux process&lt;/li&gt;
  &lt;li&gt;Each process has its own VM&lt;/li&gt;
  &lt;li&gt;Each app is assigned a unique Linux user ID&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;components&quot;&gt;Components&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Activity&lt;/li&gt;
  &lt;li&gt;Intent&lt;/li&gt;
  &lt;li&gt;Service&lt;/li&gt;
  &lt;li&gt;Content Provider&lt;/li&gt;
  &lt;li&gt;Broadcast Receiver&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;activity&quot;&gt;Activity&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;An &lt;strong&gt;activity&lt;/strong&gt; is a single, focused thing that the user can do&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Forms a UI, but each activity is independent from others&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Task&lt;/strong&gt; consists of a &lt;em&gt;stack&lt;/em&gt; of activity elements
    &lt;ul&gt;
      &lt;li&gt;eg: You open Gmail and it shows a list of emails. When you open a message, it is pushed into the stack and you will see the message. When you press back, it is popped out of the stack and you will see the list of emails&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;android-lifecycle&quot;&gt;Android Lifecycle&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/mobhci/androidLifecycle.png&quot; alt=&quot;Android Lifecycle&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;intent&quot;&gt;Intent&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;An &lt;strong&gt;intent&lt;/strong&gt; is a messaging object you can use to request an action from another app
    &lt;ul&gt;
      &lt;li&gt;eg: From Gmail, you click a website link and it starts an intent to open the web browser, from there if you click a YouTube link, it starts an intent to open YouTube&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;service&quot;&gt;Service&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;A &lt;strong&gt;service&lt;/strong&gt; is an application component that can perform long-running operations in the background, and it doesn’t provide a UI
    &lt;ul&gt;
      &lt;li&gt;eg: Playing music in the background&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;broadcast-receivers&quot;&gt;Broadcast receivers&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;A broadcast receiver is a component that receive and react to broadcast announcements
    &lt;ul&gt;
      &lt;li&gt;eg: If you are playing music and you get a phonecall(broadcast announcement), and your receiver can take this annoucement and stop the music.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;content-providers&quot;&gt;Content providers&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;A &lt;strong&gt;content provider&lt;/strong&gt; makes a specific set of application’s data available to other aplications&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;manifest&quot;&gt;Manifest&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Provides essential information about your app to the Android system.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;android-ui&quot;&gt;Android UI&lt;/h2&gt;
&lt;h3 id=&quot;basic-concepts&quot;&gt;Basic Concepts&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;View
    &lt;ul&gt;
      &lt;li&gt;UI elements that can be drawn&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;View group
    &lt;ul&gt;
      &lt;li&gt;eg: Linear Layout&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Intent&lt;/li&gt;
  &lt;li&gt;Content privider&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Service&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;XML Layout
    &lt;ul&gt;
      &lt;li&gt;Where you describe how the activity looks&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;layouts&quot;&gt;Layouts&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Linear&lt;/li&gt;
  &lt;li&gt;Relative&lt;/li&gt;
  &lt;li&gt;Table&lt;/li&gt;
  &lt;li&gt;Grid&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Frame&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;To make UI, you can write Java code like Swing(Procedural) or write XML code(Declarative)&lt;/li&gt;
  &lt;li&gt;Preferably Declarative&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Images, text, XML layouts, sound files, databases…&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Held in res/ directory&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;To attach the view to hierarchy tree to screen for rendering, the activity must call setContentView() in the Java file (usually made one for you by default for you)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;widget&quot;&gt;Widget&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Anything you can interact with
    &lt;ul&gt;
      &lt;li&gt;Eg: Buttons, Radiobutton, checkbox, textview&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;fragments&quot;&gt;Fragments&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Represebts a &lt;em&gt;behavior&lt;/em&gt; or a &lt;em&gt;portion of UI&lt;/em&gt; in activity.&lt;/li&gt;
  &lt;li&gt;eg: you can combine multiple fragments in a single activity to build a multi-pane UI and reuse a fragmet in multiple activities&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;constraints&quot;&gt;Constraints&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;How has mobiles changed?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Given the different types of phones what problems does software engineers face?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;os&quot;&gt;OS&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;there are too many&lt;/li&gt;
  &lt;li&gt;Android&lt;/li&gt;
  &lt;li&gt;iOS&lt;/li&gt;
  &lt;li&gt;Windows&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;libraries&quot;&gt;Libraries&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;You wont have access to your favourite libraries&lt;/li&gt;
  &lt;li&gt;compatability problems
    &lt;ul&gt;
      &lt;li&gt;less of an issue over time&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Poor docs&lt;/li&gt;
  &lt;li&gt;Different platforms different licencing&lt;/li&gt;
  &lt;li&gt;docs suck, libraries suck, but it sucks less over time&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;frameworks&quot;&gt;Frameworks&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Android SDK&lt;/li&gt;
  &lt;li&gt;Java&lt;/li&gt;
  &lt;li&gt;HTML5 &amp;amp; JS&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;platforms&quot;&gt;Platforms&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;iOS
    &lt;ul&gt;
      &lt;li&gt;restricts to ony apple products&lt;/li&gt;
      &lt;li&gt;only able to make apps through Mac OS&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Android
    &lt;ul&gt;
      &lt;li&gt;supported by many companies&lt;/li&gt;
      &lt;li&gt;can create apps in any Win/Mac/Linux&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Windows
    &lt;ul&gt;
      &lt;li&gt;RIP&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;processing-power-and-battery-life&quot;&gt;Processing Power and Battery life&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;to extend battery life, can’t use processor for long periods&lt;/li&gt;
  &lt;li&gt;Speed is an issue but it has implications of battery life&lt;/li&gt;
  &lt;li&gt;coprocessor to save battery&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;memory&quot;&gt;Memory&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;memory often limited&lt;/li&gt;
  &lt;li&gt;allocating memory is more costly than not&lt;/li&gt;
  &lt;li&gt;forcing garbage collection causes hicups&lt;/li&gt;
  &lt;li&gt;iOS has to manage this manually&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;data&quot;&gt;Data&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Data cost money, energy, battery life&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;mobiles are limited in resources(data, memory, batterylife, processing power…)&lt;/li&gt;
  &lt;li&gt;but as time goes it becomes less important&lt;/li&gt;
  &lt;li&gt;always remember about memory&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;sensors&quot;&gt;Sensors&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Camera&lt;/li&gt;
  &lt;li&gt;Accelerometer&lt;/li&gt;
  &lt;li&gt;Gyroscope&lt;/li&gt;
  &lt;li&gt;Magnetometer&lt;/li&gt;
  &lt;li&gt;Thermometer&lt;/li&gt;
  &lt;li&gt;Light Sensors&lt;/li&gt;
  &lt;li&gt;Proximity Sensors&lt;/li&gt;
  &lt;li&gt;Relative Humidity Sensors&lt;/li&gt;
  &lt;li&gt;Pressure Sensors&lt;/li&gt;
  &lt;li&gt;Microphone&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;screens&quot;&gt;Screens&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Different Resolutions&lt;/li&gt;
  &lt;li&gt;Different types
    &lt;ul&gt;
      &lt;li&gt;Resistive&lt;/li&gt;
      &lt;li&gt;Capacitive&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;user-and-environment&quot;&gt;User and environment&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;think about users
    &lt;ul&gt;
      &lt;li&gt;they are stupid&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;if you make a running app, make text and buttons big as it is harder to read when the mobile is shaking all the time&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;You basically can’t get away with lazy coding&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;android-building-blocks&quot;&gt;Android building blocks&lt;/h1&gt;

&lt;h2 id=&quot;navigation&quot;&gt;Navigation&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Descendant navigation
    &lt;ul&gt;
      &lt;li&gt;allows users to descend down a screen hierarchy into a chld screen&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Lateral navigation
    &lt;ul&gt;
      &lt;li&gt;allows users to access sibling screens&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;collections-and-section-related-siblings&quot;&gt;Collections and section related siblings&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Collection related screens
    &lt;ul&gt;
      &lt;li&gt;represents individual items in the collection represended by the parent&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Section-related screens
    &lt;ul&gt;
      &lt;li&gt;represents different sections of information about the parent&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Tabs
    &lt;ul&gt;
      &lt;li&gt;Android is at the top&lt;/li&gt;
      &lt;li&gt;iOS is at the bottom&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Scrollable tabs&lt;/li&gt;
  &lt;li&gt;Swipe views&lt;/li&gt;
  &lt;li&gt;Lists&lt;/li&gt;
  &lt;li&gt;Grids&lt;/li&gt;
  &lt;li&gt;Carousels&lt;/li&gt;
  &lt;li&gt;Buttons&lt;/li&gt;
  &lt;li&gt;Text fields&lt;/li&gt;
  &lt;li&gt;Text selection&lt;/li&gt;
  &lt;li&gt;Seek bars and sliders&lt;/li&gt;
  &lt;li&gt;Progress&lt;/li&gt;
  &lt;li&gt;Activity&lt;/li&gt;
  &lt;li&gt;Selection controls&lt;/li&gt;
  &lt;li&gt;Dialogues&lt;/li&gt;
  &lt;li&gt;Alerts&lt;/li&gt;
  &lt;li&gt;Popups&lt;/li&gt;
  &lt;li&gt;Toasts&lt;/li&gt;
  &lt;li&gt;Pickers&lt;/li&gt;
  &lt;li&gt;Spinners&lt;/li&gt;
  &lt;li&gt;Search&lt;/li&gt;
  &lt;li&gt;Multi-Window Support&lt;/li&gt;
  &lt;li&gt;Picture-in-Picture&lt;/li&gt;
  &lt;li&gt;Drag and Drop&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cross-platform-design-issues&quot;&gt;Cross-platform design issues&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Android uses different design principles than iOS
    &lt;ul&gt;
      &lt;li&gt;eg
        &lt;ul&gt;
          &lt;li&gt;Android - Main font - Roboto&lt;/li&gt;
          &lt;li&gt;iOS - Main font - San Francisco&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;ubiquitous-computing&quot;&gt;Ubiquitous Computing&lt;/h1&gt;

&lt;h2 id=&quot;ubicompambience-intelligence&quot;&gt;UbiComp/Ambience intelligence:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;post-desktop model of HCI&lt;/li&gt;
  &lt;li&gt;informatin processing integrated with everyday life&lt;/li&gt;
  &lt;li&gt;you may not even be aware that you’re using computing&lt;/li&gt;
  &lt;li&gt;contrasts traditional desktop computing&lt;/li&gt;
  &lt;li&gt;machines that fit the human environment&lt;/li&gt;
  &lt;li&gt;third era of computing (after mainframes and PCs)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Weiser envisioned a world like this in ‘91 and then further in ‘96, calling the approach “calm computing”:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;mobile and embedded processors communicating with each other&lt;/li&gt;
  &lt;li&gt;used to support everyday practices, making lives more &lt;strong&gt;convenient, comfortable and informed&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;information appearing in centre of out attention when needed and disappear effortlessly when not&lt;/li&gt;
  &lt;li&gt;a central vision was our homes, things and environments being aware and adaptable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HP Cooltown
    &lt;ul&gt;
      &lt;li&gt;every object has a webpage&lt;/li&gt;
      &lt;li&gt;communicate with other objects&lt;/li&gt;
      &lt;li&gt;knows what you’re doing at all times through the environment around you&lt;/li&gt;
      &lt;li&gt;implications
        &lt;ul&gt;
          &lt;li&gt;false alarms&lt;/li&gt;
          &lt;li&gt;privacy&lt;/li&gt;
          &lt;li&gt;malicious access&lt;/li&gt;
          &lt;li&gt;making sure people’s valuable records aren’t distributed&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;NOKIA
    &lt;ul&gt;
      &lt;li&gt;wearable tech&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;IBM
    &lt;ul&gt;
      &lt;li&gt;WAP-based flight check-in system&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Oyster travel in London&lt;/li&gt;
  &lt;li&gt;other projects that never made it onto the market&lt;/li&gt;
  &lt;li&gt;whereabouts clock
    &lt;ul&gt;
      &lt;li&gt;at a brief glance, get info on where family members are&lt;/li&gt;
      &lt;li&gt;well defined amount of detail
        &lt;ul&gt;
          &lt;li&gt;know where people are without crossing personal boundaries&lt;/li&gt;
          &lt;li&gt;only people in the house have access to it&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tangible-interaction&quot;&gt;Tangible Interaction:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;tangible interface - things that think
    &lt;ul&gt;
      &lt;li&gt;give physical form to digital info&lt;/li&gt;
      &lt;li&gt;use physical form to model interations with digital content
        &lt;ul&gt;
          &lt;li&gt;making it more intuitive/engaging&lt;/li&gt;
          &lt;li&gt;info directly graspable and manipulable&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;eg disaster simulation
    &lt;ul&gt;
      &lt;li&gt;place physical source marker on tabletop display depicting map of city&lt;/li&gt;
      &lt;li&gt;detects the disaster and simulates impact&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;eg media blocks
    &lt;ul&gt;
      &lt;li&gt;one block associated with a digital frontend (text, image etc)&lt;/li&gt;
      &lt;li&gt;program a block by writing its contents on a whiteboard&lt;/li&gt;
      &lt;li&gt;take block anywhere to run it
        &lt;ul&gt;
          &lt;li&gt;eg to a printer&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;transfer content easily&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;eg Ishii
    &lt;ul&gt;
      &lt;li&gt;bottles with music inside&lt;/li&gt;
      &lt;li&gt;open bottle and music comes out&lt;/li&gt;
      &lt;li&gt;interact with different bottles to DJ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;eg shape-changing phones
    &lt;ul&gt;
      &lt;li&gt;shifting mass
        &lt;ul&gt;
          &lt;li&gt;weight inside phone to help you know what’s going on without looking at the screen&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;shifting shape
        &lt;ul&gt;
          &lt;li&gt;thin –&amp;gt; thick shows you where there is more content off-screen&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;breathing
        &lt;ul&gt;
          &lt;li&gt;has a heartbeat&lt;/li&gt;
          &lt;li&gt;know when relaxed/something happening&lt;/li&gt;
          &lt;li&gt;calm it by patting&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;eg Shoogle
    &lt;ul&gt;
      &lt;li&gt;balls inside case physically jangle
        &lt;ul&gt;
          &lt;li&gt;eg different message senders get a different pitch of sound&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;when this was tested, people didn’t get it
        &lt;ul&gt;
          &lt;li&gt;so important to initially demonstrate the system with a visual correspondence&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;advantages
    &lt;ul&gt;
      &lt;li&gt;natural for people to interact with physical objects&lt;/li&gt;
      &lt;li&gt;easy for anyone to interact with&lt;/li&gt;
      &lt;li&gt;playfulness&lt;/li&gt;
      &lt;li&gt;encourage spatial thinking&lt;/li&gt;
      &lt;li&gt;can be distributed in environment&lt;/li&gt;
      &lt;li&gt;simultaneous interaction&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;space-multiplexing&quot;&gt;Space-multiplexing:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;graspable interface offers multiple input devices&lt;/li&gt;
  &lt;li&gt;input and output distributed over space&lt;/li&gt;
  &lt;li&gt;allows for simultaneous, but independent and persistent selection of objects&lt;/li&gt;
  &lt;li&gt;eg marble answering machine
    &lt;ul&gt;
      &lt;li&gt;marble colour corresponds to message sender&lt;/li&gt;
      &lt;li&gt;keep a message by putting it back in the machine/listen to it by putting it in your phone&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ambient-user-interfaces&quot;&gt;Ambient user interfaces:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;display info in the background&lt;/li&gt;
  &lt;li&gt;output only (no full interaction with system)&lt;/li&gt;
  &lt;li&gt;often visually appealing&lt;/li&gt;
  &lt;li&gt;eg dangling string network display
    &lt;ul&gt;
      &lt;li&gt;string attached to motor hangs from ceiling&lt;/li&gt;
      &lt;li&gt;speed of spinning corresponds to amount of network traffic&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;scales-of-experience&quot;&gt;Scales of experience:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;the distance of interaction between device and user&lt;/li&gt;
  &lt;li&gt;1cm - badges, watches, fobs&lt;/li&gt;
  &lt;li&gt;10cm - mobile phones&lt;/li&gt;
  &lt;li&gt;1m - person-sized (exercise equipment)&lt;/li&gt;
  &lt;li&gt;10m - environmental (control rooms)&lt;/li&gt;
  &lt;li&gt;100m - architectural (large screens)&lt;/li&gt;
  &lt;li&gt;1km - urban (managing traffic flows)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;internet-of-things&quot;&gt;Internet of Things:&lt;/h3&gt;

&lt;p&gt;Uniquely identifiable embedded computing devices within Internet infrastructure.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;everyday objects with network connectivity&lt;/li&gt;
  &lt;li&gt;ease of communication&lt;/li&gt;
  &lt;li&gt;ease of connecting 3rd world to the internet&lt;/li&gt;
  &lt;li&gt;currently 9-10 billion devices on the IoT&lt;/li&gt;
  &lt;li&gt;eg smart homes, body sensors with alarm for doctors&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;cyborgs&quot;&gt;Cyborgs?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;constantly relying on a piece of tech&lt;/li&gt;
  &lt;li&gt;from behavioural standpoint, this is indistinguishable from us being implanted with tech&lt;/li&gt;
  &lt;li&gt;we’re getting used to the fact that we don’t need to constantly worry about our memory&lt;/li&gt;
  &lt;li&gt;if you control your phone, then by definition your phone is not remote from you&lt;/li&gt;
  &lt;li&gt;how does this behaviour shape what kind of digital surfaces we create?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;merging-of-mobile-and-ubicomp&quot;&gt;Merging of mobile and ubicomp:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;borders between mobile interaction and ubicomp are disappearing&lt;/li&gt;
  &lt;li&gt;phones are WiFi enabled, location aware and motion sensitive&lt;/li&gt;
  &lt;li&gt;many ubicomp inventions are happening through mobile devices, rather than building specially designed devices for them&lt;/li&gt;
  &lt;li&gt;services come to fruition when we make something new out of the sensors the phone already uses&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;who-is-in-charge&quot;&gt;Who is in charge?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;normally app in charge of workflow&lt;/li&gt;
  &lt;li&gt;with ubicomp, who influences the interaction between user and computer?&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;interaction-design&quot;&gt;Interaction Design&lt;/h1&gt;

&lt;p&gt;Designing interactive products to support people in their everyday and working lives.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;identify needs and establish requirements
    &lt;ul&gt;
      &lt;li&gt;target users&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;develop alternative designs
    &lt;ul&gt;
      &lt;li&gt;conceptual and physical design&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;build interactive versions of the designs
    &lt;ul&gt;
      &lt;li&gt;paper-based prototypes&lt;/li&gt;
      &lt;li&gt;role-playing users&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;evaluate designs
    &lt;ul&gt;
      &lt;li&gt;determing usability and acceptability of the product&lt;/li&gt;
      &lt;li&gt;involve users throughout the process&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tips:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;beauty and elegance comes from simplicity&lt;/li&gt;
  &lt;li&gt;don’t make the user think&lt;/li&gt;
  &lt;li&gt;go to the core of the matter&lt;/li&gt;
  &lt;li&gt;don’t just recreate a desktop app&lt;/li&gt;
  &lt;li&gt;design with the mobile user in mind from the start&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Desktop User:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;stable connection&lt;/li&gt;
  &lt;li&gt;always plugged in&lt;/li&gt;
  &lt;li&gt;big screen&lt;/li&gt;
  &lt;li&gt;full attention&lt;/li&gt;
  &lt;li&gt;control over environment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mobile User:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;unstable signal&lt;/li&gt;
  &lt;li&gt;network source changing&lt;/li&gt;
  &lt;li&gt;limited battery life&lt;/li&gt;
  &lt;li&gt;costly data plan&lt;/li&gt;
  &lt;li&gt;divided attention&lt;/li&gt;
  &lt;li&gt;small screen&lt;/li&gt;
  &lt;li&gt;limited input capabilities&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mobile Opportunities:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GPS&lt;/li&gt;
  &lt;li&gt;gyroscope&lt;/li&gt;
  &lt;li&gt;accelerometer&lt;/li&gt;
  &lt;li&gt;compass&lt;/li&gt;
  &lt;li&gt;heart rate&lt;/li&gt;
  &lt;li&gt;camera&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;building-a-good-mobile-app&quot;&gt;Building a good mobile app:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;understand
    &lt;ul&gt;
      &lt;li&gt;what can target device do&lt;/li&gt;
      &lt;li&gt;know your user&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;imagine
    &lt;ul&gt;
      &lt;li&gt;enhance features with device’s capabilities&lt;/li&gt;
      &lt;li&gt;use unique features to take input/give feedback to users&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;context
    &lt;ul&gt;
      &lt;li&gt;what is user doing&lt;/li&gt;
      &lt;li&gt;where is user&lt;/li&gt;
      &lt;li&gt;who or what is near user&lt;/li&gt;
      &lt;li&gt;who is user&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;make use of online data
    &lt;ul&gt;
      &lt;li&gt;info from APIs&lt;/li&gt;
      &lt;li&gt;esp after relying on contextual data&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;skeuomorphism&quot;&gt;Skeuomorphism:&lt;/h2&gt;

&lt;p&gt;Design concept of making items represented resemble their real-world counterparts.&lt;/p&gt;

&lt;h2 id=&quot;finding-out-what-people-want&quot;&gt;Finding out what people want:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;what are user’s values&lt;/li&gt;
  &lt;li&gt;what activities are performed&lt;/li&gt;
  &lt;li&gt;how does context constrain/facilitate these behaviours&lt;/li&gt;
  &lt;li&gt;what did people do before the task could be done on a phone&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;app-definition-statement&quot;&gt;App definition statement:&lt;/h2&gt;

&lt;p&gt;Concist, concrete declaration of an app’s main purpose and intended audience.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;created early in development
    &lt;ul&gt;
      &lt;li&gt;help turn an idea and list of features into a coherent product&lt;/li&gt;
      &lt;li&gt;use throughout development to decide if potential features and behaviours make sense&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;list all features you think the user might like&lt;/li&gt;
  &lt;li&gt;determine who users are&lt;/li&gt;
  &lt;li&gt;filter feature list through the audience definition&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;typical-mobile-app-behaviour&quot;&gt;Typical mobile app behaviour:&lt;/h2&gt;

&lt;p&gt;Microtasking&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;getting things done in short bursts&lt;/li&gt;
  &lt;li&gt;quick access to info&lt;/li&gt;
  &lt;li&gt;accomodate the users in a hurry&lt;/li&gt;
  &lt;li&gt;optimise for brief recurring tasks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Local&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;about things close by&lt;/li&gt;
  &lt;li&gt;who or what is available nearby&lt;/li&gt;
  &lt;li&gt;use sensors to reduce need to enter text and to narrow options&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bored&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;games or entertainment focus&lt;/li&gt;
  &lt;li&gt;passing the time&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;paper-prototyping&quot;&gt;Paper prototyping:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;give people something concrete they can interact with&lt;/li&gt;
  &lt;li&gt;focus on observing behaviour&lt;/li&gt;
  &lt;li&gt;don’t waste time making things look perfect&lt;/li&gt;
  &lt;li&gt;make changes &lt;strong&gt;during&lt;/strong&gt; usability process&lt;/li&gt;
  &lt;li&gt;people on team can contribute to design&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;spectrum-of-prototypes&quot;&gt;Spectrum of prototypes:&lt;/h2&gt;

&lt;p&gt;Paper prototypes have lowest fidelity, followed by static wireframes linked together, then interactive prototypes, and finally fully coded prototypes.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;design-funnel&quot;&gt;Design funnel&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;book - sketching user experiences&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;lots of different ideas and funnel it to few ideas&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;sketch&lt;/li&gt;
  &lt;li&gt;wirefram&lt;/li&gt;
  &lt;li&gt;mockup&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;prototypes&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;issues?
    &lt;ul&gt;
      &lt;li&gt;problem?&lt;/li&gt;
      &lt;li&gt;users?&lt;/li&gt;
      &lt;li&gt;context?&lt;/li&gt;
      &lt;li&gt;how you go about finding users so that you are in a possition to create a requirements?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ul&gt;
      &lt;li&gt;answer these qs
        &lt;ul&gt;
          &lt;li&gt;whats exact problem you are trying to solved&lt;/li&gt;
          &lt;li&gt;added value of using mobiles&lt;/li&gt;
          &lt;li&gt;target user?&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;app defenisition
    &lt;ul&gt;
      &lt;li&gt;features&lt;/li&gt;
      &lt;li&gt;who the users aren&lt;/li&gt;
      &lt;li&gt;filter the de&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;features
    &lt;ul&gt;
      &lt;li&gt;write down features&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;user interviews
    &lt;ul&gt;
      &lt;li&gt;potential user&lt;/li&gt;
      &lt;li&gt;dont ask leading questions&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ask user if we can record&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;hooked---engaging-users&quot;&gt;Hooked - engaging users&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;book - Hooked - Nir Eyal&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;pleasure seeking —–&amp;gt; pain allevation&lt;/li&gt;
  &lt;li&gt;habits are not addicitons
    &lt;ul&gt;
      &lt;li&gt;addicitons are self-destructive&lt;/li&gt;
      &lt;li&gt;habits can be healthy/un-healthy&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;with enough frequency it can form a habit&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Habit
    &lt;ul&gt;
      &lt;li&gt;Trigger&lt;/li&gt;
      &lt;li&gt;Action&lt;/li&gt;
      &lt;li&gt;Variable Reward&lt;/li&gt;
      &lt;li&gt;Investment&lt;/li&gt;
      &lt;li&gt;Back to Trigger&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;triggers&quot;&gt;Triggers&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;places&lt;/li&gt;
  &lt;li&gt;people&lt;/li&gt;
  &lt;li&gt;emotions&lt;/li&gt;
  &lt;li&gt;routines&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;situations&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;first step of the Hook&lt;/li&gt;
  &lt;li&gt;designer informs what to do next through external Triggers&lt;/li&gt;
  &lt;li&gt;user informs wha to do next through internal triggers&lt;/li&gt;
  &lt;li&gt;emotions provide frequent internal trigger&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;action&quot;&gt;Action&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Behaviour = Motivation + Ability + Trigger
B = M + A + T&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;motivation&quot;&gt;Motivation&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Level of motivation and ability determines if the action will occur&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ability&quot;&gt;Ability&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;6 factors can increas/ descrease ability
    &lt;ul&gt;
      &lt;li&gt;time&lt;/li&gt;
      &lt;li&gt;money&lt;/li&gt;
      &lt;li&gt;physical effort&lt;/li&gt;
      &lt;li&gt;brain cycles&lt;/li&gt;
      &lt;li&gt;social deviance&lt;/li&gt;
      &lt;li&gt;non-routines&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;simple action will povide rewards
    &lt;ul&gt;
      &lt;li&gt;make sure clear trigger is represented&lt;/li&gt;
      &lt;li&gt;increase ability to make it easier&lt;/li&gt;
      &lt;li&gt;align to the right motivator&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;reward&quot;&gt;Reward&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;reward unpredictable like slot machines&lt;/li&gt;
  &lt;li&gt;understand cause and effect&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-tribe&quot;&gt;the tribe&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;social rewards
    &lt;ul&gt;
      &lt;li&gt;cooperation&lt;/li&gt;
      &lt;li&gt;competeition&lt;/li&gt;
      &lt;li&gt;recognition&lt;/li&gt;
      &lt;li&gt;acceptance&lt;/li&gt;
      &lt;li&gt;sex&lt;/li&gt;
      &lt;li&gt;emathetic joy&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-hunt&quot;&gt;the hunt&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;search for Resources
    &lt;ul&gt;
      &lt;li&gt;food&lt;/li&gt;
      &lt;li&gt;money&lt;/li&gt;
      &lt;li&gt;information&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-self&quot;&gt;the self&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;search for sensation
    &lt;ul&gt;
      &lt;li&gt;mastery&lt;/li&gt;
      &lt;li&gt;consistency&lt;/li&gt;
      &lt;li&gt;competency&lt;/li&gt;
      &lt;li&gt;completion&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;finite rewards decay
    &lt;ul&gt;
      &lt;li&gt;as rewards become predictable, they become less interesting&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Variable rewards are not enough
    &lt;ul&gt;
      &lt;li&gt;you need to give them what they were looking for&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;dont control users
    &lt;ul&gt;
      &lt;li&gt;they must have autonomy, but look for infinite variability and relive pain&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;investment&quot;&gt;Investment&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;user pays with something
    &lt;ul&gt;
      &lt;li&gt;time&lt;/li&gt;
      &lt;li&gt;money&lt;/li&gt;
      &lt;li&gt;social capital&lt;/li&gt;
      &lt;li&gt;effort&lt;/li&gt;
      &lt;li&gt;emotional commitment&lt;/li&gt;
      &lt;li&gt;personal data&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;investment increases likelihood of next pass
    &lt;ul&gt;
      &lt;li&gt;anticipation of next rewards&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;make next cycle more likely by
    &lt;ul&gt;
      &lt;li&gt;loading next trigger&lt;/li&gt;
      &lt;li&gt;storing value&lt;/li&gt;
      &lt;li&gt;creating preferences&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;we value things more if we put work into them&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;small amounts of work increases the likelihood of the user returning&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 09 Jan 2018 10:00:00 +0000</pubDate>
        <link>http://localhost:4000/cs-notes/level3/semester2/2018/01/09/mobile-hci.html</link>
        <guid isPermaLink="true">http://localhost:4000/cs-notes/level3/semester2/2018/01/09/mobile-hci.html</guid>
        
        
        <category>Level3</category>
        
        <category>Semester2</category>
        
      </item>
    
      <item>
        <title>Cyber Security Fundamentals	</title>
        <description>&lt;h1 id=&quot;lecture-1---introduction&quot;&gt;Lecture 1 - Introduction&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt; State/Condition of being pretected from or not exposed to danger from some internal or external threat
&lt;!--excerpt--&gt;&lt;/li&gt;
  &lt;li&gt;Hacking against the law
    &lt;ul&gt;
      &lt;li&gt;Unauthorised access to computer material&lt;/li&gt;
      &lt;li&gt;Unauthorised access with intent to commit or facilitate a crime&lt;/li&gt;
      &lt;li&gt;Unauthorised modification of computer material.&lt;/li&gt;
      &lt;li&gt;Making, supplying or obtaining anything which can be used in computer misuse offences.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;”..prevention and detection of unauthorised actions by users of a computer system” - Deiter Gollman&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“the prevention and detection of unauthorised actions by users of a computer” - Microsoft&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;socio-technical-systems&quot;&gt;Socio-technical Systems&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;System&lt;/strong&gt; is a purposefull collection of interrelated ocmponents of differen kinds, which work together to achive some ovjective&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Socio-Technical systems&lt;/strong&gt; include technical ystems,but also organisational processses and people who use and interact with the technical sustem&lt;/li&gt;
  &lt;li&gt;governed b organisational and regulatory policies and rules&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Computer Security&lt;/strong&gt; - protection of hardware, software &amp;amp; data assets&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Information Security&lt;/strong&gt; - protection of information and information systems from unauthorized access, use, disclosure, disruption, modification, or destruction in order to provide confidentiality, integrity, and availability&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;security-model&quot;&gt;Security model&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/csf/securityModel.PNG&quot; alt=&quot;security model&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;cia&quot;&gt;CIA&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Confidentiality&lt;/strong&gt; - Prevention of unauthorised disclosure&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Integrity&lt;/strong&gt; - Prevention of unauthorised modification of information&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Availability&lt;/strong&gt; - Prevention of unauthorised withholding of information and rescources&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/csf/CIA.png&quot; alt=&quot;CIA&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Vulnerability&lt;/strong&gt; - Weakness in your system
    &lt;ul&gt;
      &lt;li&gt;Hardware&lt;/li&gt;
      &lt;li&gt;Software&lt;/li&gt;
      &lt;li&gt;Network&lt;/li&gt;
      &lt;li&gt;Personnel&lt;/li&gt;
      &lt;li&gt;Location&lt;/li&gt;
      &lt;li&gt;Organisational&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Threat&lt;/strong&gt; - Potential exploitation of vulnerability&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Attack&lt;/strong&gt; - Attempted violation of vulnerability&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Passive&lt;/strong&gt; - Just watches and maybe collect data&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Active&lt;/strong&gt; - Attempts to change resources or operations&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;threat-types&quot;&gt;Threat Types&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/csf/threatTypes.PNG&quot; alt=&quot;Threat Types&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Physical Damage&lt;/li&gt;
  &lt;li&gt;Natural Events&lt;/li&gt;
  &lt;li&gt;Loss of essential services&lt;/li&gt;
  &lt;li&gt;Disturbances due to radiation&lt;/li&gt;
  &lt;li&gt;Compromise of Information&lt;/li&gt;
  &lt;li&gt;Technical Failures&lt;/li&gt;
  &lt;li&gt;Unauthorised Access&lt;/li&gt;
  &lt;li&gt;Compromise of Functions&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;deal-with-threats&quot;&gt;Deal with threats&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Reduce/Remove threats by
    &lt;ul&gt;
      &lt;li&gt;Prevent&lt;/li&gt;
      &lt;li&gt;Detect&lt;/li&gt;
      &lt;li&gt;React&lt;/li&gt;
      &lt;li&gt;Correct&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Accepted (“it’s not a bug its a feature”)&lt;/li&gt;
  &lt;li&gt;Avoided&lt;/li&gt;
  &lt;li&gt;Transfered (give the problem to someone else)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Doing Security == Risk Management&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Asset identification&lt;/li&gt;
  &lt;li&gt;Risk identification
    &lt;ul&gt;
      &lt;li&gt;Find assest’s vulnerabilities&lt;/li&gt;
      &lt;li&gt;Find the relavent threats&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Risk treatment analysis&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Treat the risk&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Asset protection&lt;/li&gt;
  &lt;li&gt;What are my assets&lt;/li&gt;
  &lt;li&gt;What danger are they in&lt;/li&gt;
  &lt;li&gt;How can I protect it&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-4---security-engineering&quot;&gt;Section 4 - Security Engineering&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Security Engineering&lt;/strong&gt; is about building systems to remain dependable in the face of malice , error or mischance&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;What are ny security requirements&lt;/li&gt;
  &lt;li&gt;What are my policies&lt;/li&gt;
  &lt;li&gt;Policy and Guidence&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Policy&lt;/strong&gt;- What you want to achieve?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;poits-of-interest&quot;&gt;Poits of Interest&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Simple &amp;gt; Rich mechanisms&lt;/li&gt;
  &lt;li&gt;Trade-offs
    &lt;ul&gt;
      &lt;li&gt;cost/speed&lt;/li&gt;
      &lt;li&gt;effort&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Should the effort I put in to securing the data be relatied to the worth of the data?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;key-principles&quot;&gt;Key principles&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Easist penetration&lt;/li&gt;
  &lt;li&gt;Adequate protection&lt;/li&gt;
  &lt;li&gt;Weakest link&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Effectiveness&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Security should not be an afterthought&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Crytography is not a silver bullet&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;actors&quot;&gt;Actors&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Amatues/Script kiddies&lt;/li&gt;
  &lt;li&gt;Hackers
    &lt;ul&gt;
      &lt;li&gt;Black Hat&lt;/li&gt;
      &lt;li&gt;White Hat&lt;/li&gt;
      &lt;li&gt;Gray Hat&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Hactivist&lt;/li&gt;
  &lt;li&gt;Carrer criminals&lt;/li&gt;
  &lt;li&gt;Terrorists&lt;/li&gt;
  &lt;li&gt;Government&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;intro-to-cryptography&quot;&gt;Intro to Cryptography&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Confidentiality
    &lt;ul&gt;
      &lt;li&gt;Public key encryption&lt;/li&gt;
      &lt;li&gt;Block ciphers&lt;/li&gt;
      &lt;li&gt;Stream ciphers&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Integrity
    &lt;ul&gt;
      &lt;li&gt;Cryptograhic hash function&lt;/li&gt;
      &lt;li&gt;Message authentication codes&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Authenticity
    &lt;ul&gt;
      &lt;li&gt;Digital signatures&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;primitives&quot;&gt;Primitives&lt;/h2&gt;
&lt;h3 id=&quot;hashfunctionsmessage-digiest&quot;&gt;Hashfunctions/Message digiest&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Takes some data in&lt;/li&gt;
  &lt;li&gt;Gets signiture out
    &lt;blockquote&gt;
      &lt;p&gt;Funcion to compute a unique random signature for some data&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/csf/cryptographicHashFn.PNG&quot; alt=&quot;Hash Function&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Guarantee towards: Data Integrity&lt;/li&gt;
  &lt;li&gt;Preimage resistance&lt;/li&gt;
  &lt;li&gt;Second Preimage resistance&lt;/li&gt;
  &lt;li&gt;Collision resistance&lt;/li&gt;
  &lt;li&gt;Eg: MD, SHA&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;block-cypherssymmetric-crytography&quot;&gt;Block Cyphers/Symmetric crytography&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/csf/symmetricCrypto.PNG&quot; alt=&quot;Symmetric Cryptography&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Guarantee towards: Confidentiality&lt;/li&gt;
  &lt;li&gt;Uses sameto encrypt and decrypt&lt;/li&gt;
  &lt;li&gt;Efficient for large messages&lt;/li&gt;
  &lt;li&gt;Eg: Blowfish, TripleDES, Skipjack, AES&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;asymmetric-ciphers&quot;&gt;Asymmetric ciphers&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;3 functions&lt;/li&gt;
  &lt;li&gt;1 to Encrypt&lt;/li&gt;
  &lt;li&gt;1 to Decrypt&lt;/li&gt;
  &lt;li&gt;1 to create key
&lt;img src=&quot;/cs-notes/assets/images/csf/asymmetricCipher.PNG&quot; alt=&quot;Asymmetric Ciphers&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Guarantee towards: Confidentiality&lt;/li&gt;
  &lt;li&gt;Key Pairs&lt;/li&gt;
  &lt;li&gt;Encrypting and signing&lt;/li&gt;
  &lt;li&gt;Inefficient on large data&lt;/li&gt;
  &lt;li&gt;Eg: DSA, (EC)DSA, ECC, RSA, ElGamal&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;workflows&quot;&gt;Workflows&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Primitives can be used to have guarantees for more than one of
    &lt;ul&gt;
      &lt;li&gt;Information Security&lt;/li&gt;
      &lt;li&gt;Efficient Information Security&lt;/li&gt;
      &lt;li&gt;Sender Authentication&lt;/li&gt;
      &lt;li&gt;Secrecy with Authentication&lt;/li&gt;
      &lt;li&gt;Secrecy with Signature&lt;/li&gt;
      &lt;li&gt;Secrecy with Integrity&lt;/li&gt;
      &lt;li&gt;Signature with Appendix&lt;/li&gt;
      &lt;li&gt;Secrecy with Signature with Appendix&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;digital-signitures&quot;&gt;Digital Signitures&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Authenticity of message origin&lt;/li&gt;
  &lt;li&gt;Non-Repudiation of message origin&lt;/li&gt;
  &lt;li&gt;Message Integrity&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;public-key-encryption--digital-signitures-combination&quot;&gt;Public Key Encryption &amp;amp; Digital Signitures (Combination)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Message confidentiality &amp;amp; integrty&lt;/li&gt;
  &lt;li&gt;Authenticity of message origin&lt;/li&gt;
  &lt;li&gt;Non-Repudiation of message origin&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;kemdem-hybrid&quot;&gt;KEM/DEM (Hybrid)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Symmetric Encryption to encrypt data&lt;/li&gt;
  &lt;li&gt;Assymetric to encrypt symmetric key&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;implementing&quot;&gt;Implementing&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;RSA System
    &lt;ul&gt;
      &lt;li&gt;Encryption&lt;/li&gt;
      &lt;li&gt;Digital signitures&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Descrete logarithm system
    &lt;ul&gt;
      &lt;li&gt;Key exchange&lt;/li&gt;
      &lt;li&gt;Digital signiture algorithm&lt;/li&gt;
      &lt;li&gt;Discrete logarithm integrated encryption scheme&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;lecture-3---introduction-cryptography-2&quot;&gt;Lecture 3 - Introduction Cryptography 2&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Why love crypto?
    &lt;ul&gt;
      &lt;li&gt;Provides mathematical guarantee&lt;/li&gt;
      &lt;li&gt;CIA&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;block-cipher&quot;&gt;Block Cipher&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;symmetric ciphers&lt;/li&gt;
  &lt;li&gt;same key to encrypt &amp;amp; decrypt&lt;/li&gt;
  &lt;li&gt;Bitwise operations on fixed size blocks of data
    &lt;ul&gt;
      &lt;li&gt;XOR with key&lt;/li&gt;
      &lt;li&gt;initialisation vectors&lt;/li&gt;
      &lt;li&gt;take data&lt;/li&gt;
      &lt;li&gt;keep encrypting until unreadable&lt;/li&gt;
      &lt;li&gt;fast&lt;/li&gt;
      &lt;li&gt;easy to implement in hardware&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;2 families
    &lt;ul&gt;
      &lt;li&gt;feistel, IDEA&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;des&quot;&gt;DES&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Project Lucifer
    &lt;ul&gt;
      &lt;li&gt;several transforamtions repeated one after the other&lt;/li&gt;
      &lt;li&gt;sub keys generated from one main key&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Insecure Algorithm
    &lt;ul&gt;
      &lt;li&gt;NSA reduced key-length to 56 bits&lt;/li&gt;
      &lt;li&gt;This made it easier to bruteforce&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;triple-des&quot;&gt;Triple DES&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;use DES 3 times
    &lt;ul&gt;
      &lt;li&gt;encrypt wiht 1 key&lt;/li&gt;
      &lt;li&gt;decrypt with 2nd key&lt;/li&gt;
      &lt;li&gt;encrypt with 3rd key&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;noone uses this anymore&lt;/li&gt;
  &lt;li&gt;if use same key there are backwards compatability&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;dont use this&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;is it just XOR? no&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;aes&quot;&gt;AES&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;symmetric crypto is inherantly insecure&lt;/li&gt;
  &lt;li&gt;DES is insecure&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;replaced by AES&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Rijndael won in a competition&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;rijndael&quot;&gt;Rijndael&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Based on permutations and substitutions&lt;/li&gt;
  &lt;li&gt;Block and Key size
    &lt;ul&gt;
      &lt;li&gt;128, 192, 256, 512&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;variable number of rounds dependent on key size&lt;/li&gt;
  &lt;li&gt;Fast&lt;/li&gt;
  &lt;li&gt;implemented in hardware&lt;/li&gt;
  &lt;li&gt;currently no serious weakness&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;modes-of-operation&quot;&gt;Modes of Operation&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;ECB
&lt;img src=&quot;/cs-notes/assets/images/csf/ECB_encryption.svg&quot; alt=&quot;ECB Encryption&quot; /&gt;
&lt;img src=&quot;/cs-notes/assets/images/csf/ECB_decryption.svg&quot; alt=&quot;ECB Decryption&quot; /&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation&quot;&gt;Wikipedia - Block cipher mode of operation&lt;/a&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ECB can leave plaintext data patterns&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;break into blocks&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;encrypt and concatinate back&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;operating on each chunck individually&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;no block big enough for the wholemessage&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;problem
    &lt;ul&gt;
      &lt;li&gt;you dont know when the blocks end&lt;/li&gt;
      &lt;li&gt;order of blocks?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CBC
&lt;img src=&quot;/cs-notes/assets/images/csf/CBC_encryption.svg&quot; alt=&quot;CBC Encryption&quot; /&gt;
&lt;img src=&quot;/cs-notes/assets/images/csf/CBC_encryption.svg&quot; alt=&quot;CBC Decryption&quot; /&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation&quot;&gt;Wikipedia - Block cipher mode of operation&lt;/a&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;ouput fed in to the next round&lt;/li&gt;
  &lt;li&gt;creates random noise&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;operates on each block individually&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;PCBC&lt;/li&gt;
  &lt;li&gt;CFB&lt;/li&gt;
  &lt;li&gt;OFB&lt;/li&gt;
  &lt;li&gt;CTR&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;iv-and-padding&quot;&gt;IV and Padding&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;initialisation vectors
    &lt;ul&gt;
      &lt;li&gt;dont have to be secret&lt;/li&gt;
      &lt;li&gt;keep secret key&lt;/li&gt;
      &lt;li&gt;different init block vector with diff keys&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;last block padding
    &lt;ul&gt;
      &lt;li&gt;ensure final block has correct length&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;secret-sharing&quot;&gt;Secret Sharing&lt;/h2&gt;
&lt;h3 id=&quot;deffie-hellman-key-exchange&quot;&gt;Deffie-Hellman Key Exchange&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/csf/Diffie-Hellman_Key_Exchange.png&quot; alt=&quot;Deffie-Hellman&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange&quot;&gt;Wikipedia - Diffie-Helman&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;prngs&quot;&gt;PRNGs&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;want to makesure they are truely random&lt;/li&gt;
  &lt;li&gt;virtually impossible&lt;/li&gt;
  &lt;li&gt;always have some sort of structure
    &lt;ul&gt;
      &lt;li&gt;hidden deep inside the structure
        &lt;ul&gt;
          &lt;li&gt;enough to generate sequnce from a seubsequence&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;cryptographic
    &lt;ul&gt;
      &lt;li&gt;cannot be predicted from some of the numbers in the sequence&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;generation-strats&quot;&gt;Generation Strats&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Computer clocks&lt;/li&gt;
  &lt;li&gt;Keyboard latency&lt;/li&gt;
  &lt;li&gt;Using random noise&lt;/li&gt;
  &lt;li&gt;Basically you mash on your keyboard and it takes bits from the clock and mash it together&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;message-digests&quot;&gt;Message Digests&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;given any message, easy to compute the digest&lt;/li&gt;
  &lt;li&gt;given any hash, hard to compute the message&lt;/li&gt;
  &lt;li&gt;need to limit
    &lt;ul&gt;
      &lt;li&gt;hash collision&lt;/li&gt;
      &lt;li&gt;birthday attack given 2 random message, should not produce the same digest&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;designing&quot;&gt;Designing&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;DES in secret&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;AES in open competitions&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Kerckhoffs 2 Principle
    &lt;ul&gt;
      &lt;li&gt;security in your algorithms should be in your operations and in your keys&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Linus law
    &lt;ul&gt;
      &lt;li&gt;many eyes, catch many bugs&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;NOTHING IS SECURE&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;lecture-4---cryptography-in-the-wild&quot;&gt;Lecture 4 - Cryptography in the wild&lt;/h1&gt;

&lt;h2 id=&quot;applied&quot;&gt;Applied&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Primatives &amp;amp; Schemes not enough for security&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Key are just numbers&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Algorithms
    &lt;ul&gt;
      &lt;li&gt;Which one to use?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Data at rest is data that doesn’t “move”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Can be solved by crypto
    &lt;ul&gt;
      &lt;li&gt;KEM/DEM&lt;/li&gt;
      &lt;li&gt;Public Key Encryption, Symmetric Encryption…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Key management is the real issue
    &lt;ul&gt;
      &lt;li&gt;Public Key Infrastructure: Centralised/Decentralised&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Expensiveness of Encryption
    &lt;ul&gt;
      &lt;li&gt;perfect forward secrecy&lt;/li&gt;
      &lt;li&gt;end to end encryption&lt;/li&gt;
      &lt;li&gt;additional mechanisms to manage permissions&lt;/li&gt;
    &lt;/ul&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Data in flight is data beign moved from one domain to another&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Securing data in flight&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Crypto to construct secure channels
    &lt;ul&gt;
      &lt;li&gt;End-2-End Encryption&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;what level of the osi am i opperating at
    &lt;ul&gt;
      &lt;li&gt;Network Layer has IPSec&lt;/li&gt;
      &lt;li&gt;Transport Layer has TLS&lt;/li&gt;
      &lt;li&gt;Application signal, Cryptocat, OTR…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Keys?
    &lt;ul&gt;
      &lt;li&gt;Centralised/Decentralised&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;DONT IMPLEMENT OR DESIGN YOUR OWN CRYPTO. unless you are a &lt;strong&gt;trained&lt;/strong&gt; engineer&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Theroetically secure != Implementation secure&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;use-good-standard-libraries&quot;&gt;Use good standard libraries&lt;/h2&gt;
  &lt;/li&gt;
  &lt;li&gt;you have to look at domain, cost and effort
&lt;a href=&quot;http://www.keylength.com&quot;&gt;keylength.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;iso-27k&quot;&gt;ISO 27K&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Guidence on how to do things&lt;/li&gt;
  &lt;li&gt;Regulation of Cryptographic Controls
    &lt;ul&gt;
      &lt;li&gt;what you need to be aware of when implementing&lt;/li&gt;
      &lt;li&gt;are there import/export restrctions&lt;/li&gt;
      &lt;li&gt;are there restrictions on using encryptions&lt;/li&gt;
      &lt;li&gt;law enforced access to encrypted info&lt;/li&gt;
      &lt;li&gt;get legal advice&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Policies
    &lt;ul&gt;
      &lt;li&gt;where we are we going to use it&lt;/li&gt;
      &lt;li&gt;impact of policy&lt;/li&gt;
      &lt;li&gt;roles and responsibilities&lt;/li&gt;
      &lt;li&gt;management approach&lt;/li&gt;
      &lt;li&gt;mobile data&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;key management&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;complience
    &lt;ul&gt;
      &lt;li&gt;national and international Laws&lt;/li&gt;
      &lt;li&gt;decrees&lt;/li&gt;
      &lt;li&gt;industrial regulations&lt;/li&gt;
      &lt;li&gt;codes of conduct&lt;/li&gt;
      &lt;li&gt;stakeholder expectations&lt;/li&gt;
      &lt;li&gt;contracts/agreements&lt;/li&gt;
      &lt;li&gt;best practices&lt;/li&gt;
      &lt;li&gt;company specific policies and standards &amp;amp; guidelines&lt;/li&gt;
      &lt;li&gt;regulations/administratives orders&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Laws
    &lt;ul&gt;
      &lt;li&gt;EU Laws&lt;/li&gt;
      &lt;li&gt;British Laws&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;advanced&quot;&gt;Advanced&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Encryption Schemes&lt;/li&gt;
  &lt;li&gt;Signature Schemes&lt;/li&gt;
  &lt;li&gt;Secret Sharing Schemes&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Provable Crytographic&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;how are these used&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Authentication protocols&lt;/li&gt;
  &lt;li&gt;Anonymous Protocols&lt;/li&gt;
  &lt;li&gt;eVoting&lt;/li&gt;
  &lt;li&gt;Multi-Party Computation&lt;/li&gt;
  &lt;li&gt;Distributed Authorisation&lt;/li&gt;
  &lt;li&gt;Searching Encrypted Data&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;attacking&quot;&gt;Attacking&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;if you want to attack the mathematics of encryptions, get a PHD
    &lt;ul&gt;
      &lt;li&gt;factorising composite numbers&lt;/li&gt;
      &lt;li&gt;taking discrete logarithms
        &lt;h3 id=&quot;attack-the-standard&quot;&gt;Attack the standard&lt;/h3&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;make sure the system has a backdoor&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;attacking-the-system&quot;&gt;Attacking the System&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Attackers cna
    &lt;ul&gt;
      &lt;li&gt;evesdrop&lt;/li&gt;
      &lt;li&gt;insert message&lt;/li&gt;
      &lt;li&gt;impoersonate&lt;/li&gt;
      &lt;li&gt;hijack&lt;/li&gt;
      &lt;li&gt;DOS&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;human-factors&quot;&gt;Human Factors&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Espionage
    &lt;ul&gt;
      &lt;li&gt;send your agents&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;rubber hose cryptoanalysis
    &lt;ul&gt;
      &lt;li&gt;how can you do rubber-hose resistant crypto?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Token Attacks&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;code-vulnerability&quot;&gt;Code Vulnerability&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;just leave it to the experts&lt;/li&gt;
  &lt;li&gt;dont make your own&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;side-channel-attacks&quot;&gt;Side channel attacks&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Differential Power Analaysis
    &lt;ul&gt;
      &lt;li&gt;estimate key lengths from power consumption of computations&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Timing attacks
    &lt;ul&gt;
      &lt;li&gt;find timings for computatioins&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Electromagnetic attacks
    &lt;ul&gt;
      &lt;li&gt;analasys the electromagnetic radiation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Ghost data
    &lt;ul&gt;
      &lt;li&gt;non-deletion of sensitive data&lt;/li&gt;
      &lt;li&gt;cold boot attack&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Differential Fault Analaysis
    &lt;ul&gt;
      &lt;li&gt;inducing faults in operation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Acoustic cryptanalysis
    &lt;ul&gt;
      &lt;li&gt;listening to CPU output for computation noise&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;most of these are defeated by noise&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tutorial&quot;&gt;Tutorial&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;a&lt;/li&gt;
  &lt;li&gt;DAE is open, DES is closed. open i sbetter
. AES is more cheaper. des on its own is insecure.&lt;/li&gt;
  &lt;li&gt;tuxPenguin, cbc has the chain,&lt;/li&gt;
  &lt;li&gt;there is a small amount of digests to cycle through&lt;/li&gt;
  &lt;li&gt;s&lt;/li&gt;
  &lt;li&gt;they are different algs, diff fundamentals, so cost/efort to attack is different&lt;/li&gt;
  &lt;li&gt;encrypt message with private key, exchange, encrypt wih private key, exchange. not vulnerable to MITM attack, no way to make sure who you are talking to s who you are talking to&lt;/li&gt;
  &lt;li&gt;not possible to get truely random number, psudo there is structure, crypto, hard to determine what it means&lt;/li&gt;
  &lt;li&gt;ifyou know theseed you can guess the random number.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;lecture-4----authentication&quot;&gt;Lecture 4  - Authentication&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Enrollment : Establish Credentials&lt;/li&gt;
  &lt;li&gt;Challenge &amp;amp; Response : Check validity of credentials&lt;/li&gt;
  &lt;li&gt;Styles
    &lt;ul&gt;
      &lt;li&gt;Direct/Brokered&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;local&quot;&gt;Local&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Commonly used: (Identity * Password)&lt;/li&gt;
  &lt;li&gt;Store &lt;strong&gt;salted&lt;/strong&gt; digest of passowrd for security
    &lt;ul&gt;
      &lt;li&gt;MD5, SHA&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;when logging in
    &lt;ul&gt;
      &lt;li&gt;password salted &amp;amp; hashed&lt;/li&gt;
      &lt;li&gt;compared with stored hash&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dictionary-attacks&quot;&gt;Dictionary Attacks&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;attackers can calculate variations of a password and form salts hashes
    &lt;ul&gt;
      &lt;li&gt;if there is a match, we found the password that is begin used&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;david kliein
    &lt;ul&gt;
      &lt;li&gt;gets usernames, initias, login name&lt;/li&gt;
      &lt;li&gt;female and male names&lt;/li&gt;
      &lt;li&gt;places, names of famous people, numbers, vulgar phrases, keyboard patterns&lt;/li&gt;
      &lt;li&gt;created permutations of above&lt;/li&gt;
      &lt;li&gt;capitalisations from previous lists&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;salting&quot;&gt;Salting&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;a random string or value that is added to password before encryption
    &lt;ul&gt;
      &lt;li&gt;add randomness to password so its harder to guess&lt;/li&gt;
      &lt;li&gt;large salts are good&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;salt string is publicly vailable, each password has individual salt&lt;/li&gt;
  &lt;li&gt;dont store password as you are given, add some randomness&lt;/li&gt;
  &lt;li&gt;keep password securely&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;password-complexity&quot;&gt;password complexity&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;UPPER &amp;amp; lower case&lt;/li&gt;
  &lt;li&gt;numbers&lt;/li&gt;
  &lt;li&gt;don’t common words&lt;/li&gt;
  &lt;li&gt;use special characters&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;at lease X characters long&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;entropy - how guessable
    &lt;ul&gt;
      &lt;li&gt;can measure password strength using information theory&lt;/li&gt;
      &lt;li&gt;how much information is carried in a single characters&lt;/li&gt;
      &lt;li&gt;first character ~ 4.7bits&lt;/li&gt;
      &lt;li&gt;2-8 ~2.3bits per character&lt;/li&gt;
      &lt;li&gt;9=&amp;gt; ~1.5bits per character&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;passphrases&quot;&gt;Passphrases&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;trend&lt;/li&gt;
  &lt;li&gt;long and easy to remmeber&lt;/li&gt;
  &lt;li&gt;depending on what device you use, use different passowrd&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;remote&quot;&gt;Remote&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;What is a secure channel&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;there might be someone evesdroppting
    &lt;ul&gt;
      &lt;li&gt;impersonating the sendee&lt;/li&gt;
      &lt;li&gt;they can manipulate it&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;how do we talk securely?
    &lt;ul&gt;
      &lt;li&gt;we can use cryptography&lt;/li&gt;
      &lt;li&gt;use secrecy with signature with appendix using KEM/DEM&lt;/li&gt;
      &lt;li&gt;use symmetruc crypto &amp;amp; deffie-hellman&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;how to prevent replay attackers?
    &lt;ul&gt;
      &lt;li&gt;ensure message freshness by adding
        &lt;ul&gt;
          &lt;li&gt;random info&lt;/li&gt;
          &lt;li&gt;identity &amp;amp; timestamps&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;brokered-authentication&quot;&gt;Brokered Authentication&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;have a trusted third Party&lt;/li&gt;
  &lt;li&gt;trusting thirdparty for keys
    &lt;ul&gt;
      &lt;li&gt;we are assuming he is good&lt;/li&gt;
      &lt;li&gt;we are trusting him to be honest&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;he might be malicious&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;needham-schroeder-protocols&quot;&gt;Needham-Schroeder Protocols&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;based off deffie Hellman&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;trusted key server that generates session keys&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;symmetric &amp;amp; asymemetric public key&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;both symmetric and assymetric are suscepible to replay attackers&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;flaw
    &lt;ul&gt;
      &lt;li&gt;ryan can get alice’s id and send it to ken&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;solution
    &lt;ul&gt;
      &lt;li&gt;add ID to the message&lt;/li&gt;
      &lt;li&gt;if ID changes, we know there is a man-in-the-middle&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;kerberos&quot;&gt;Kerberos&lt;/h2&gt;
&lt;h3 id=&quot;user-authentication-in-a-distributed-systems&quot;&gt;User Authentication in a Distributed systems&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;User based client auth&lt;/li&gt;
  &lt;li&gt;client-led auth&lt;/li&gt;
  &lt;li&gt;mutual auth&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;kerberos-1&quot;&gt;Kerberos&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;3 headed dog of secure authenticated netowrk communication&lt;/li&gt;
  &lt;li&gt;each network authenticated&lt;/li&gt;
  &lt;li&gt;each message authenticated&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;each message encrypted&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;requires
    &lt;ul&gt;
      &lt;li&gt;authentication service&lt;/li&gt;
      &lt;li&gt;ticket granting service&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;overview&quot;&gt;overview&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;sign to service
    &lt;ul&gt;
      &lt;li&gt;alice signs in with password used to create shared secret&lt;/li&gt;
      &lt;li&gt;create a ticket to authorise with ticket services&lt;/li&gt;
      &lt;li&gt;ticket contains who it was generated for, and a key to enable communication with ticket service&lt;/li&gt;
      &lt;li&gt;restricted lifetime to prevent replay attacks&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;get permission to talk to bob
    &lt;ul&gt;
      &lt;li&gt;alice asks ticket service for ticket to enable communcation with bob&lt;/li&gt;
      &lt;li&gt;T~ttl is proof that Alice can use TGS&lt;/li&gt;
      &lt;li&gt;timestamp is for freshness&lt;/li&gt;
      &lt;li&gt;TGS sends somthing for Bob&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Talk to bob
    &lt;ul&gt;
      &lt;li&gt;alice uses ticket to talk to bob&lt;/li&gt;
      &lt;li&gt;Alice is sending Bob information on how to talk that could have only been created by TGS&lt;/li&gt;
      &lt;li&gt;Modification of timestamp tells Alice, that Bob is who he says he is&lt;/li&gt;
      &lt;li&gt;Bob already has K~B, TGS and this can gain access to K~A,B&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;repeat steps 2 &amp;amp; 3&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Authentication Protocol based on Needham-Schroeder with fixes&lt;/li&gt;
  &lt;li&gt;Single-Sign on
    &lt;ul&gt;
      &lt;li&gt;authenticate with AS and get timed access to system&lt;/li&gt;
      &lt;li&gt;this ticket can be used to request access to other servicies like bob&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Simplified public key variants&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;advantages
    &lt;ul&gt;
      &lt;li&gt;auth on distributed system&lt;/li&gt;
      &lt;li&gt;single-sign-on&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;disadvantages
    &lt;ul&gt;
      &lt;li&gt;single point of failure&lt;/li&gt;
      &lt;li&gt;not federated&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;lecture-6---publc-key-infrastructure&quot;&gt;Lecture 6 - Publc Key Infrastructure&lt;/h1&gt;

&lt;h2 id=&quot;pki&quot;&gt;PKI&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Third party to deal with public keys&lt;/li&gt;
  &lt;li&gt;certificate authorities binds public keys to IDs
    &lt;ul&gt;
      &lt;li&gt;when regestering your pub key&lt;/li&gt;
      &lt;li&gt;when authority generates your public/private keys&lt;/li&gt;
      &lt;li&gt;binding is done with digital signitures&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;pk-certificates&quot;&gt;PK Certificates&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;proof of identity&lt;/li&gt;
  &lt;li&gt;forged certificates?
    &lt;ul&gt;
      &lt;li&gt;attackers need the ability to sign the certificate which is hard for them to do&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;fake certificates?
    &lt;ul&gt;
      &lt;li&gt;Authority must berify the owner’s ID before signing trhe certificate&lt;/li&gt;
      &lt;li&gt;Need certificate authority’s verifying key to check authenticity&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;key-management&quot;&gt;Key Management&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;certificate issuing and publication&lt;/li&gt;
  &lt;li&gt;certificate revocation
    &lt;ul&gt;
      &lt;li&gt;compromised keys&lt;/li&gt;
      &lt;li&gt;identity change&lt;/li&gt;
      &lt;li&gt;termination of membership&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;key pair Generation&lt;/li&gt;
  &lt;li&gt;private key escrow, backup, arhiving, and recovery&lt;/li&gt;
  &lt;li&gt;public key archiving&lt;/li&gt;
  &lt;li&gt;update&lt;/li&gt;
  &lt;li&gt;logging of actions&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;certificate-chains&quot;&gt;Certificate Chains&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;problem
    &lt;ul&gt;
      &lt;li&gt;who trusts the trusters…&lt;/li&gt;
      &lt;li&gt;how to balance certificate creation
        &lt;ul&gt;
          &lt;li&gt;multiple certificate authorities at different levels&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;answer
    &lt;ul&gt;
      &lt;li&gt;each authority verification key is signing by more trustworth body&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Shape of chain&lt;/li&gt;
  &lt;li&gt;more trustwrth keys can be embedded in hardware
    &lt;ul&gt;
      &lt;li&gt;so they are tamper resistant/tamper evident&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/csf/chainShapes.png&quot; alt=&quot;Chain Shapes&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;tutorial-1&quot;&gt;Tutorial&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;w&lt;/li&gt;
  &lt;li&gt;a&lt;/li&gt;
  &lt;li&gt;a&lt;/li&gt;
  &lt;li&gt;how you deal with enrolment.&lt;/li&gt;
  &lt;li&gt;easy to remmber, more entropy so its harder to guess, easier to type on a different device like a mobile. easier to be attacked by over-the-shoulder attacks.&lt;/li&gt;
  &lt;li&gt;a&lt;/li&gt;
  &lt;li&gt;Password crackers&lt;/li&gt;
  &lt;li&gt;a&lt;/li&gt;
  &lt;li&gt;a&lt;/li&gt;
  &lt;li&gt;a&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;web-security&quot;&gt;Web security&lt;/h1&gt;

&lt;h2 id=&quot;how-does-it-work&quot;&gt;How does it work&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;browser ask webserver for a website which might be connected to a backend&lt;/li&gt;
  &lt;li&gt;the website is executed on the client&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;http&quot;&gt;HTTP&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;used in most transmition&lt;/li&gt;
  &lt;li&gt;stateless
    &lt;ul&gt;
      &lt;li&gt;easier to implement&lt;/li&gt;
      &lt;li&gt;must provide id with every transmission&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;no built in encryptions&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;get&quot;&gt;GET&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;retrive index.hmtl&lt;/li&gt;
  &lt;li&gt;asks webserver for specific resource&lt;/li&gt;
  &lt;li&gt;answer - get the resource you want&lt;/li&gt;
  &lt;li&gt;should only be used for info retreival&lt;/li&gt;
  &lt;li&gt;can have variables which is sent to webserver&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GET /index.html HTTP/1.1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GET /index.html?foo=bar HTTP/1.1&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;post&quot;&gt;POST&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;used to send data and retrive changed resources&lt;/li&gt;
  &lt;li&gt;sending credentials is worst way to use it&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /index.html HTTP/1.1
Host:example.com
Content-type:application/x-www-form-ulencoded
Content-length: 7

foo=bar
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;cookies&quot;&gt;Cookies&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;data that a webserver can store in a client
    &lt;ul&gt;
      &lt;li&gt;like session id&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;should be complex&lt;/li&gt;
  &lt;li&gt;shouln’t be easy to guess&lt;/li&gt;
  &lt;li&gt;mainly used to make sure that two request came from the same client&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;setting-http-cookies&quot;&gt;Setting HTTP Cookies&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HTTP/1.1 200 OK
Content-type: text/html
Set-Cookie: foo=bar

...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;using-http-cookies&quot;&gt;Using HTTP Cookies&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Get /index.html HTTP/1.1
Host: example.com
Cookie: foo=bar
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;owasp-top-10-applicatoin-security-risk-2017&quot;&gt;OWASP Top 10 Applicatoin Security Risk 2017&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Injection
    &lt;ul&gt;
      &lt;li&gt;send data to a server that doesn’t chack the data&lt;/li&gt;
      &lt;li&gt;then used in a interpreter&lt;/li&gt;
      &lt;li&gt;Main problem
        &lt;ul&gt;
          &lt;li&gt;user provided data is used without sufficient checks&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;eg SQL Injection&lt;/li&gt;
      &lt;li&gt;results in
        &lt;ul&gt;
          &lt;li&gt;stolen user data, creditcard Data&lt;/li&gt;
          &lt;li&gt;DOS&lt;/li&gt;
          &lt;li&gt;take over host&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;broken authentication
    &lt;ul&gt;
      &lt;li&gt;able to bruteforce. since a lot of people use weak passwords&lt;/li&gt;
      &lt;li&gt;Main problem
        &lt;ul&gt;
          &lt;li&gt;incorrect implementation/lack of knowledge&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;eg login page bruteforce&lt;/li&gt;
      &lt;li&gt;results in
        &lt;ul&gt;
          &lt;li&gt;compromise of systems&lt;/li&gt;
          &lt;li&gt;money laundering&lt;/li&gt;
          &lt;li&gt;unauth info disclosure&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;sensitive data exposure
    &lt;ul&gt;
      &lt;li&gt;web apps and apis not protecting sensitive properly&lt;/li&gt;
      &lt;li&gt;be careful how you save your Data&lt;/li&gt;
      &lt;li&gt;main problem
        &lt;ul&gt;
          &lt;li&gt;not putting enough thought/energy into data protection&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;eg. using automatic database encryption&lt;/li&gt;
      &lt;li&gt;results in
        &lt;ul&gt;
          &lt;li&gt;offences againt priv Laws&lt;/li&gt;
          &lt;li&gt;loss of trust&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;XXE
    &lt;ul&gt;
      &lt;li&gt;a way to retrive files that are not retriveable&lt;/li&gt;
      &lt;li&gt;Main problem
        &lt;ul&gt;
          &lt;li&gt;trusting external prvided inpout&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;eg
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;cp&quot;&gt;&amp;lt;? xml version=“1.0” encoding=“ISO-8859-1”?&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE foo {
  &amp;lt;!ELEMENT foo ANY &amp;gt;&lt;/span&gt;
  &lt;span class=&quot;cp&quot;&gt;&amp;lt;!ENTITY xxe SYSTEM “file:///etc/passwd”&amp;gt;&lt;/span&gt;]&amp;gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;foo&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;xxe;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/foo&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;results in
        &lt;ul&gt;
          &lt;li&gt;extract databaseinfo gathering&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;broken access control
    &lt;ul&gt;
      &lt;li&gt;ability to switch to more privlaged user/access to privlageed user&lt;/li&gt;
      &lt;li&gt;Main problem
        &lt;ul&gt;
          &lt;li&gt;trusting external provided input&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;eg&lt;/li&gt;
      &lt;li&gt;SQL Inj&lt;/li&gt;
      &lt;li&gt;results in
        &lt;ul&gt;
          &lt;li&gt;privelage escalation&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;security misconfig
    &lt;ul&gt;
      &lt;li&gt;insecure default configs&lt;/li&gt;
      &lt;li&gt;Main problem
        &lt;ul&gt;
          &lt;li&gt;Lack of knowledge&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;eg
        &lt;ul&gt;
          &lt;li&gt;enabling directory listing&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;results in
        &lt;ul&gt;
          &lt;li&gt;unauth Access&lt;/li&gt;
          &lt;li&gt;sys takeover&lt;/li&gt;
          &lt;li&gt;info gathering&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;XSS
    &lt;ul&gt;
      &lt;li&gt;code injection&lt;/li&gt;
      &lt;li&gt;Main problem
        &lt;ul&gt;
          &lt;li&gt;user provided data is used witout sufficient checks&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;results in
        &lt;ul&gt;
          &lt;li&gt;data loss&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;insecure deserialization
    &lt;ul&gt;
      &lt;li&gt;when an app receives hostile serialized objects&lt;/li&gt;
      &lt;li&gt;influence control flow&lt;/li&gt;
      &lt;li&gt;remote code execution&lt;/li&gt;
      &lt;li&gt;Main problem
        &lt;ul&gt;
          &lt;li&gt;accept serialised objects from instusted sources or user provided data without sufficient checks&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;eg.
        &lt;ul&gt;
          &lt;li&gt;supper cookie containing id, passoword, hashed&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;results in
        &lt;ul&gt;
          &lt;li&gt;attacker can cahgne those values&lt;/li&gt;
          &lt;li&gt;privilae escalation&lt;/li&gt;
          &lt;li&gt;remote code execution&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;using components with known vulnerabilities
    &lt;ul&gt;
      &lt;li&gt;Main problem
        &lt;ul&gt;
          &lt;li&gt;lack of knowledge&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;dont ignore software update notifications&lt;/li&gt;
      &lt;li&gt;results in
        &lt;ul&gt;
          &lt;li&gt;privlaged excalation&lt;/li&gt;
          &lt;li&gt;data loss&lt;/li&gt;
          &lt;li&gt;remote code execution&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;insufficient logging &amp;amp; monitoring
    &lt;ul&gt;
      &lt;li&gt;Main problem
        &lt;ul&gt;
          &lt;li&gt;without identifying an attack you can’t act&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;eg
        &lt;ul&gt;
          &lt;li&gt;vulnerabuility scanning&lt;/li&gt;
          &lt;li&gt;bruteforce password attackers&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;results in
        &lt;ul&gt;
          &lt;li&gt;being succussfully attacked&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;websecurity-2&quot;&gt;Websecurity 2&lt;/h1&gt;

&lt;h2 id=&quot;injection&quot;&gt;Injection&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;SQL Injection
    &lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;$user = $_POST['user'];
$pass = $_POST['passoword'];
$query = &quot;select * from u_list where u_name = '$user' and password = '$pass';&quot;
...
if ($result &amp;gt; 0) {// user login successful
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;what could an attacker submit in order to gain access?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Command Injection
    &lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;$cmd = &quot;python get_data.py&quot;.$_GET['sort'];
$list = system($cmd);
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;blind sqlinjection
    &lt;ul&gt;
      &lt;li&gt;true or false Injection&lt;/li&gt;
      &lt;li&gt;more difficult but can lead to same Effectiveness&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;prevention
    &lt;blockquote&gt;
      &lt;p&gt;NEVER TRUST USER PROVIDED INPUT&lt;/p&gt;
    &lt;/blockquote&gt;
    &lt;ul&gt;
      &lt;li&gt;use functions to escape inputs&lt;/li&gt;
      &lt;li&gt;only use frameworks that are considered safe&lt;/li&gt;
      &lt;li&gt;use &lt;code class=&quot;highlighter-rouge&quot;&gt;LIMIT&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;broken-authentication&quot;&gt;Broken authentication&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;weak passwords&lt;/li&gt;
  &lt;li&gt;one password for all == single point of failure&lt;/li&gt;
  &lt;li&gt;use multi factor authenticator&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;password rotation&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;weak passowrd storage
    &lt;ul&gt;
      &lt;li&gt;plain plaintext&lt;/li&gt;
      &lt;li&gt;unsalted hashes&lt;/li&gt;
      &lt;li&gt;weak hashes&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;prevention
    &lt;ul&gt;
      &lt;li&gt;use moden hash function&lt;/li&gt;
      &lt;li&gt;check for weak passwords&lt;/li&gt;
      &lt;li&gt;passwords at least 8 char long&lt;/li&gt;
      &lt;li&gt;harden against account enumeration attack&lt;/li&gt;
      &lt;li&gt;multifactor authentication&lt;/li&gt;
      &lt;li&gt;log auth failure and alert admins&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;broken-access-control&quot;&gt;broken access control&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;prevention
    &lt;ul&gt;
      &lt;li&gt;don’t let attacker modify the checks or metadata&lt;/li&gt;
      &lt;li&gt;disable directory listing&lt;/li&gt;
      &lt;li&gt;log access control failures and trigger alerts&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;xss&quot;&gt;XSS&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Prevention
    &lt;blockquote&gt;
      &lt;p&gt;DONT TRUST USER INPUT FFS&lt;/p&gt;
    &lt;/blockquote&gt;
    &lt;ul&gt;
      &lt;li&gt;use frameworks that automatically escapes this for you&lt;/li&gt;
      &lt;li&gt;escape data&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tutorial-answers-in-moodle&quot;&gt;Tutorial answers in moodle&lt;/h2&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;lecture-9---network-security&quot;&gt;Lecture 9 - Network Security&lt;/h1&gt;
&lt;h2 id=&quot;important-nework-protocols&quot;&gt;Important Nework Protocols&lt;/h2&gt;
&lt;h3 id=&quot;data-link-layer-ieee-8023&quot;&gt;Data Link Layer IEEE 802.3&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;important information in an ethernet frame
    &lt;ul&gt;
      &lt;li&gt;destination mac address&lt;/li&gt;
      &lt;li&gt;source mac address&lt;/li&gt;
      &lt;li&gt;payload&lt;/li&gt;
      &lt;li&gt;checksum&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;MAC address
    &lt;ul&gt;
      &lt;li&gt;48bit&lt;/li&gt;
      &lt;li&gt;first 24bit organisationally unique (OUI)&lt;/li&gt;
      &lt;li&gt;rest of 24bit identifying NIC specific&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;special addresses
    &lt;ul&gt;
      &lt;li&gt;broadcasters&lt;/li&gt;
      &lt;li&gt;multicast&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;data-link-layer-ieee-80211&quot;&gt;Data Link Layer IEEE 802.11&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;MAC for wifi&lt;/li&gt;
  &lt;li&gt;adds extra frame types
    &lt;ul&gt;
      &lt;li&gt;Management frames&lt;/li&gt;
      &lt;li&gt;Control frames&lt;/li&gt;
      &lt;li&gt;Data frames&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;MAC address of the Access Point(AP) is added to the header
    &lt;h3 id=&quot;network-layer&quot;&gt;Network Layer&lt;/h3&gt;
    &lt;h4 id=&quot;ipv4&quot;&gt;IPv4&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;used for addressing&lt;/li&gt;
  &lt;li&gt;32bit&lt;/li&gt;
  &lt;li&gt;private IP ranges;
    &lt;ul&gt;
      &lt;li&gt;10.0.0.0 to 10.255.255.255&lt;/li&gt;
      &lt;li&gt;172.16.0.0 to 172.31.255.255&lt;/li&gt;
      &lt;li&gt;192.168.0.0 to 192.168.255.255&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;important info
    &lt;ul&gt;
      &lt;li&gt;source address&lt;/li&gt;
      &lt;li&gt;destination address&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;ipv6&quot;&gt;IPv6&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;128 bit&lt;/li&gt;
  &lt;li&gt;2^64 addresses&lt;/li&gt;
  &lt;li&gt;atateless auto config&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;data-link-layer-arp&quot;&gt;Data Link Layer: ARP&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Address Resolution Protocol&lt;/li&gt;
  &lt;li&gt;asks for MAC address for an IP adress&lt;/li&gt;
  &lt;li&gt;also used for duplicated IP addresses&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;transport-layer&quot;&gt;Transport Layer&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;ports&lt;/li&gt;
  &lt;li&gt;65532 ports&lt;/li&gt;
  &lt;li&gt;well known ports &amp;lt; 1024
    &lt;ul&gt;
      &lt;li&gt;admin rights to open those ports&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;rest can open without permission (in linux at least)&lt;/li&gt;
  &lt;li&gt;additional registered ports&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;direct link between port and service&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;UDP
    &lt;ul&gt;
      &lt;li&gt;connectionless
        &lt;ul&gt;
          &lt;li&gt;fire and forget&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;transmission not ensured&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;TCP
    &lt;ul&gt;
      &lt;li&gt;3-way handshake
        &lt;ul&gt;
          &lt;li&gt;SYN (seq = x)&lt;/li&gt;
          &lt;li&gt;SYN (seq = y); ACK x + 1&lt;/li&gt;
          &lt;li&gt;ACK y + 1&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;ensures order (seq)&lt;/li&gt;
      &lt;li&gt;reliable data stream&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;application-layer&quot;&gt;Application Layer&lt;/h3&gt;
&lt;h4 id=&quot;dns&quot;&gt;DNS&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Domain Name System&lt;/li&gt;
  &lt;li&gt;translates domain name to IP address
&lt;img src=&quot;/cs-notes/assets/images/csf/dns.PNG&quot; alt=&quot;DNS&quot; /&gt;
    &lt;h2 id=&quot;network-structure&quot;&gt;Network Structure&lt;/h2&gt;
    &lt;h3 id=&quot;wired&quot;&gt;Wired&lt;/h3&gt;
    &lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/csf/wiredNetworkDesign.PNG&quot; alt=&quot;Wired Network&quot; /&gt;&lt;/p&gt;
    &lt;h3 id=&quot;wireless-wifi&quot;&gt;Wireless (WiFi)&lt;/h3&gt;
    &lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/csf/wirelessNetwork.PNG&quot; alt=&quot;Wireless Network&quot; /&gt;&lt;/p&gt;
    &lt;h3 id=&quot;interconnected&quot;&gt;Interconnected&lt;/h3&gt;
    &lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/csf/interconnected.PNG&quot; alt=&quot;Interconnected&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;attack-vectors&quot;&gt;Attack Vectors&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;clients&lt;/li&gt;
  &lt;li&gt;IP phones&lt;/li&gt;
  &lt;li&gt;server&lt;/li&gt;
  &lt;li&gt;switches/access points&lt;/li&gt;
  &lt;li&gt;router&lt;/li&gt;
  &lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dos&quot;&gt;DOS&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;overload the target with requests
    &lt;ul&gt;
      &lt;li&gt;eg
        &lt;ul&gt;
          &lt;li&gt;SYN-Flood&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;TCP-Queue overflow results in DoS
        &lt;h3 id=&quot;ddos&quot;&gt;DDOS&lt;/h3&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;problem: target might have too much POWAAH&lt;/li&gt;
  &lt;li&gt;solution: use multiple attackers
    &lt;ul&gt;
      &lt;li&gt;fun with more friends&lt;/li&gt;
      &lt;li&gt;minimum requirements: friends&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;arp-flooding&quot;&gt;ARP Flooding&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;switch
    &lt;ul&gt;
      &lt;li&gt;takes MAC frame&lt;/li&gt;
      &lt;li&gt;checks destination MAC&lt;/li&gt;
      &lt;li&gt;looks up port number in an internal MAC lookup table&lt;/li&gt;
      &lt;li&gt;forward the frame&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;mac-flooding&quot;&gt;MAC Flooding&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;switch gets the lookup table from
    &lt;ul&gt;
      &lt;li&gt;observing traffic on physical ports&lt;/li&gt;
      &lt;li&gt;extracting the source MAC address of connected port&lt;/li&gt;
      &lt;li&gt;storing it&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;problem
    &lt;ul&gt;
      &lt;li&gt;storage not infinite&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;exploit
    &lt;ul&gt;
      &lt;li&gt;send a lot of frames with different soure addresses&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;when storage space runs out
    &lt;ul&gt;
      &lt;li&gt;switch becomes a hub&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;gain?
    &lt;ul&gt;
      &lt;li&gt;hub broadcasts a frame to all ports
        &lt;ul&gt;
          &lt;li&gt;allows monitoring of all netowrk traffic&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;reduce performance&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;arp-poisoning&quot;&gt;ARP Poisoning&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;all clients store lookup tables
    &lt;ul&gt;
      &lt;li&gt;ip to MAC&lt;/li&gt;
      &lt;li&gt;arp helps to build this table&lt;/li&gt;
      &lt;li&gt;this table’s validity is not infinite&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;client asks who asks this ip
    &lt;ul&gt;
      &lt;li&gt;server replies “ME”&lt;/li&gt;
      &lt;li&gt;attacker replies “MEMEMEMEMEMEMEMMEM”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;yelling as loud as possible helps&lt;/li&gt;
  &lt;li&gt;gain?
    &lt;ul&gt;
      &lt;li&gt;all traffic redirected to attacker&lt;/li&gt;
      &lt;li&gt;
        &lt;h2 id=&quot;man-in-the-middle&quot;&gt;man-in-the-middle&lt;/h2&gt;
        &lt;h1 id=&quot;lecture-10---network-security-2&quot;&gt;Lecture 10 - Network Security 2&lt;/h1&gt;
        &lt;h2 id=&quot;attack-vendors&quot;&gt;Attack Vendors&lt;/h2&gt;
        &lt;h3 id=&quot;fun-with-ipv6&quot;&gt;Fun with IPv6&lt;/h3&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;problem
    &lt;ul&gt;
      &lt;li&gt;auto configs enabled the IPv6 traffic&lt;/li&gt;
      &lt;li&gt;windows pref ipv6 &amp;gt; ipv4
        &lt;ul&gt;
          &lt;li&gt;without any settings&lt;/li&gt;
          &lt;li&gt;enabled by default&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;MitM for all the networks traffic&lt;/li&gt;
  &lt;li&gt;Defence
    &lt;ul&gt;
      &lt;li&gt;disable IPv6&lt;/li&gt;
      &lt;li&gt;later on patched&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;social-engineering&quot;&gt;Social Engineering&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;attaks users that aren’t educated&lt;/li&gt;
  &lt;li&gt;Factors
    &lt;ul&gt;
      &lt;li&gt;Technical
        &lt;ul&gt;
          &lt;li&gt;power plugs&lt;/li&gt;
          &lt;li&gt;ethernet sockets&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Human
        &lt;ul&gt;
          &lt;li&gt;alertness/awareness of personal&lt;/li&gt;
          &lt;li&gt;knowledge&lt;/li&gt;
          &lt;li&gt;continuous education of staff&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Defence
    &lt;ul&gt;
      &lt;li&gt;Technical
        &lt;ul&gt;
          &lt;li&gt;block unused ports at the switch&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;human
        &lt;ul&gt;
          &lt;li&gt;keep awareness high&lt;/li&gt;
          &lt;li&gt;inform staff about methods
            &lt;ul&gt;
              &lt;li&gt;keep it non technical&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dns-tunneling&quot;&gt;DNS Tunneling&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;send data to a blocked target&lt;/li&gt;
  &lt;li&gt;control a DNS Server&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ability to send DNS lookup&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;domain names &amp;lt;= 253 characters
    &lt;ul&gt;
      &lt;li&gt;with label &amp;lt;= 63 characters&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;messages base64 encoded&lt;/li&gt;
  &lt;li&gt;make sure you dont look up the same domain name twice&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;defence&quot;&gt;Defence&lt;/h2&gt;
&lt;h3 id=&quot;firewall&quot;&gt;Firewall&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;strong defence&lt;/li&gt;
  &lt;li&gt;still trafic needs to come in and output&lt;/li&gt;
  &lt;li&gt;blocking everything is not an option&lt;/li&gt;
  &lt;li&gt;blocking everything is generally a good start
    &lt;ul&gt;
      &lt;li&gt;white list vs black list&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;descisions beased on rule sets&lt;/li&gt;
  &lt;li&gt;rules can be classified into categories
    &lt;ul&gt;
      &lt;li&gt;prerouting
        &lt;ul&gt;
          &lt;li&gt;all acitons before a routing decision is made&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;input
        &lt;ul&gt;
          &lt;li&gt;actions on incoming traffic&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;outout
        &lt;ul&gt;
          &lt;li&gt;actions on outgoing traffic&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;postrouting
        &lt;ul&gt;
          &lt;li&gt;all actions after a routing decision is made&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;everytime you write down firewall rules
    &lt;ul&gt;
      &lt;li&gt;it should be precise as possible
        &lt;ul&gt;
          &lt;li&gt;
            &lt;!-- i don't understand this--&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;src/dst ip&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;src/dst port&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;protocol&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;don’t permit everything&lt;/li&gt;
      &lt;li&gt;only permit necessary ports
&lt;img src=&quot;/cs-notes/assets/images/csf/dmzNetwork.PNG&quot; alt=&quot;DMZ Network&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;proxy-server&quot;&gt;Proxy Server&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;used to control the flow from the inside to the outside&lt;/li&gt;
  &lt;li&gt;can specify all traffic to go through proxy server&lt;/li&gt;
  &lt;li&gt;can filter traffic and block traffic&lt;/li&gt;
  &lt;li&gt;can monitor traffic&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;perfomance improvements&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;different types of proxys
    &lt;ul&gt;
      &lt;li&gt;HTTP&lt;/li&gt;
      &lt;li&gt;SOCKS
        &lt;ul&gt;
          &lt;li&gt;all kinds of traffic&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;TOR (The Onion Router)&lt;/li&gt;
      &lt;li&gt;…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ssh socks proxy tunnel&lt;/li&gt;
  &lt;li&gt;traffic from lan to ssh is encrypted&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ids&quot;&gt;IDS&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;monitoring traffic&lt;/li&gt;
  &lt;li&gt;filter malicious traffic
    &lt;ul&gt;
      &lt;li&gt;signature based&lt;/li&gt;
      &lt;li&gt;anomaly detection (ML based)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;alarm admin if malicious traffic is found&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ips&quot;&gt;IPS&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;same as IDS but
    &lt;ul&gt;
      &lt;li&gt;can take actions automatically
        &lt;ul&gt;
          &lt;li&gt;blocks ports, IP addresses …&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;vpn&quot;&gt;VPN&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;connects to a network through another one&lt;/li&gt;
  &lt;li&gt;connects to private network via public infrastructure
    &lt;ul&gt;
      &lt;li&gt;secure connection via insecure channels&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;access to all private network’s resources&lt;/li&gt;
  &lt;li&gt;can be used to circumvent restrictions
&lt;img src=&quot;/cs-notes/assets/images/csf/vpn.PNG&quot; alt=&quot;VPN&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;wifi&quot;&gt;WiFi&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;no phsicall security (no cables)&lt;/li&gt;
  &lt;li&gt;potentially everybody can listen&lt;/li&gt;
  &lt;li&gt;jamming&lt;/li&gt;
  &lt;li&gt;deauthentication spoofing&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;open-wifi&quot;&gt;Open Wifi&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;everyone can listening
    &lt;ul&gt;
      &lt;li&gt;never use unencrypted services to transmit any important piece of information&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;encrypted-wifi&quot;&gt;Encrypted WiFi&lt;/h3&gt;
&lt;p&gt;Wired Equivelent Privacy&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;sniff as much packets as you can&lt;/li&gt;
  &lt;li&gt;passive Attacks
    &lt;ul&gt;
      &lt;li&gt;analyse the traffic&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Active
    &lt;ul&gt;
      &lt;li&gt;inject the traffic&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;outocme: key
    &lt;ul&gt;
      &lt;li&gt;never use it&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;wpa2&quot;&gt;WPA2&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;per packet keys&lt;/li&gt;
  &lt;li&gt;protected against replay attacks until octber 17&lt;/li&gt;
  &lt;li&gt;problem
    &lt;ul&gt;
      &lt;li&gt;KRACK  recontructs the key thorugh replay attacks&lt;/li&gt;
      &lt;li&gt;weak per-shared keys, allow brute force&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;management frames unencrypted
    &lt;ul&gt;
      &lt;li&gt;deauthentication flooding&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;jamming
    &lt;ul&gt;
      &lt;li&gt;medium accessible for every sender&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
</description>
        <pubDate>Mon, 08 Jan 2018 12:00:00 +0000</pubDate>
        <link>http://localhost:4000/cs-notes/level3/semester2/2018/01/08/cyber-security-fundamentals.html</link>
        <guid isPermaLink="true">http://localhost:4000/cs-notes/level3/semester2/2018/01/08/cyber-security-fundamentals.html</guid>
        
        
        <category>Level3</category>
        
        <category>Semester2</category>
        
      </item>
    
      <item>
        <title>Interactive Systems</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory - edit this post and re-build (or run with the &lt;code class=&quot;highlighter-rouge&quot;&gt;-w&lt;/code&gt; switch) to see your changes!
To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention: YYYY-MM-DD-name-of-post.ext.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sat, 23 Sep 2017 19:50:00 +0100</pubDate>
        <link>http://localhost:4000/cs-notes/level3/semester1/2017/09/23/interactive-systems.html</link>
        <guid isPermaLink="true">http://localhost:4000/cs-notes/level3/semester1/2017/09/23/interactive-systems.html</guid>
        
        
        <category>Level3</category>
        
        <category>Semester1</category>
        
      </item>
    
      <item>
        <title>Data Fundamentals</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory - edit this post and re-build (or run with the &lt;code class=&quot;highlighter-rouge&quot;&gt;-w&lt;/code&gt; switch) to see your changes!
To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention: YYYY-MM-DD-name-of-post.ext.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sat, 23 Sep 2017 19:50:00 +0100</pubDate>
        <link>http://localhost:4000/cs-notes/level3/semester1/2017/09/23/data-fundamentals.html</link>
        <guid isPermaLink="true">http://localhost:4000/cs-notes/level3/semester1/2017/09/23/data-fundamentals.html</guid>
        
        
        <category>Level3</category>
        
        <category>Semester1</category>
        
      </item>
    
      <item>
        <title>Advanced Programming</title>
        <description>&lt;h4 id=&quot;lecture-1&quot;&gt;Lecture 1&lt;/h4&gt;
&lt;h4 id=&quot;introduction&quot;&gt;Introduction&lt;/h4&gt;

&lt;h5 id=&quot;application-level&quot;&gt;Application Level&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Java - Strong Types&lt;/li&gt;
  &lt;li&gt;Python - Auto Memory Mgt&lt;/li&gt;
  &lt;li&gt;Haskel - Abstract Resources&lt;/li&gt;
  &lt;li&gt;… - IDE
&lt;!--excerpt--&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;systems-level&quot;&gt;Systems Level&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Languages: C, Rust, OCaml&lt;/li&gt;
  &lt;li&gt;Used for:
    &lt;ul&gt;
      &lt;li&gt;OS&lt;/li&gt;
      &lt;li&gt;Communications&lt;/li&gt;
      &lt;li&gt;Numerical&lt;/li&gt;
      &lt;li&gt;Drivers&lt;/li&gt;
      &lt;li&gt;Embedded Systems&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;C/C++ most heavily used programming language&lt;/li&gt;
  &lt;li&gt;Used in OS and embeded systems&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;edit---compile---link---execute-cycle&quot;&gt;Edit - Compile - Link - Execute Cycle&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Source Files &amp;gt; Compiler &amp;gt; Bin &amp;gt; Linker &amp;gt; Executable
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc -o &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;test.o
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;memory-layout&quot;&gt;Memory Layout&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Higher Mem address
    &lt;ul&gt;
      &lt;li&gt;stack&lt;/li&gt;
      &lt;li&gt;heap&lt;/li&gt;
      &lt;li&gt;bss segment
        &lt;ul&gt;
          &lt;li&gt;stores uninitialized variables&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;data segment
        &lt;ul&gt;
          &lt;li&gt;initialized data is stord&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;test segment
        &lt;ul&gt;
          &lt;li&gt;read-only, holds instructions that the processor understands&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Lower mem adress&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;stack &amp;amp; heap shared memory&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;makefiles&quot;&gt;Makefiles&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;makes compiling bigger programs easier
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc -c mod_a.c
gcc -c mod_b.c
gcc -c mod_a.o mod_b.o -o app_x
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;becomes&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Makefile&quot;&gt;app_x: mod_a.o mod_b.o
	gcc mod_a.o mod_b.o -o app_x

mod_a.o: mod_a.c global.h
	gcc -c mod_a.c

mod_b.o: mod_b.c global.g
	gcc -c mod_a.c
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CFLAGS = -W -Wall
%.o : %.c
	gcc -c $(CFLAGS) $&amp;lt; -o $@
OBJECTS = mod_a.o mod_b.o

app_x: $(OBJECTS)
	gcc $(OBJECTS) –o app_x

mod_a.o: mod_a.c global.h
mod_b.o: mod_b.c global.h
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;lecture-2&quot;&gt;Lecture 2&lt;/h1&gt;
&lt;h1 id=&quot;overview-of-c&quot;&gt;Overview of C&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Must contain main()
    &lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;int main(){
  // something
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
printf()
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;char - 8 bits&lt;/li&gt;
  &lt;li&gt;short - 16 bits&lt;/li&gt;
  &lt;li&gt;long - 32 bits&lt;/li&gt;
  &lt;li&gt;float - 32 bit&lt;/li&gt;
  &lt;li&gt;long long - 64 bits&lt;/li&gt;
  &lt;li&gt;double - 64-bit&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;printf-formatting&quot;&gt;printf formatting&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;%d - print as a decimal integer&lt;/li&gt;
  &lt;li&gt;%6d - print as a decimal integer at least 6 characters wide with leading blanks&lt;/li&gt;
  &lt;li&gt;%06d - print as a decimal integer at least 6 characters wide with leading zeros&lt;/li&gt;
  &lt;li&gt;%f - print as a floating point number&lt;/li&gt;
  &lt;li&gt;%6f - print as a floating point number at least 6 characters wide&lt;/li&gt;
  &lt;li&gt;%.2f - print as a floating point number with 2 digits after the decimal point&lt;/li&gt;
  &lt;li&gt;%6.2f - print as a floating point number at least 6 characters wide with 2 digits after the decimal point&lt;/li&gt;
  &lt;li&gt;%c - print as a character&lt;/li&gt;
  &lt;li&gt;%s - print as a string&lt;/li&gt;
  &lt;li&gt;%x - print as a hexadecimal integer&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;while(condition) {
	statement;
}

for (int = i; i &amp;lt; length; ++i) {
	statement;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;//Constant
#define LOWER 0
#define UPPER 300
#define STEP 20
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// Character input
#include &amp;lt;stdio.h&amp;gt;
...
for (c = getchar(); c!=EOF;c=getchar()){
	statement;
}
// or
while ((c = getchar()) != EOF) {
	statement;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;arrays&quot;&gt;Arrays&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;int numbers[10];
numbers[4];
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;functions&quot;&gt;Functions&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// Must use prototype before
return-type function-name (parameter declarations, if any);
....
return-type function-name (parameter declarations, if any) {
	statements;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;call by value
    &lt;ul&gt;
      &lt;li&gt;manipulate actual values&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;call by reference
    &lt;ul&gt;
      &lt;li&gt;cannot manipulate actual values&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;arrays passewd by reference&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;/// External Variables
extern type varName;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;signed
    &lt;ul&gt;
      &lt;li&gt;can be negative or positive ($2^-(n-1)$ to $2^(n-1)$)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;unsigned
    &lt;ul&gt;
      &lt;li&gt;always positive or 0&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;escape-sequences&quot;&gt;escape sequences&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\a - alert (bell) character
\b - backspace
\f - formfeed
\n - newline
\r - carriage return
\t - horizontal tab
\v - vertical tab
\\ - backslash
\?
\'
\&quot;
\ooo - octal number
\xhh - hexadecimal number
\0 - null character (EOS)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;‘x’ - integer representing value of letter x&lt;/li&gt;
  &lt;li&gt;“x” - array of 2 chars, ‘x’ and ‘\0’&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// enum
enum months {JAN = 1; FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC};
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;variables-default-initialized&quot;&gt;Variables default initialized&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;external
    &lt;ul&gt;
      &lt;li&gt;0&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;automatic
    &lt;ul&gt;
      &lt;li&gt;undefined&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;“const” can be used with array arguments to functions, to tell the function not to change the array
    &lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;int strlen(const char[])
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;Conversion takes place across assignments; the value of the right hand side is converted to the type of the left hand side, which is the type of the result&lt;/li&gt;
  &lt;li&gt;Longer integers are converted to shorter ones by dropping the excess high order bits&lt;/li&gt;
  &lt;li&gt;float to int conversions cause truncation of any fractional part&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;cast&quot;&gt;cast&lt;/h4&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expression&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;++n // increments before value us used
n++ // increments after value is used
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;bitwise-operations&quot;&gt;Bitwise operations&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&amp;amp; - AND&lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;- OR&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;^ - EXOR&lt;/li&gt;
  &lt;li&gt;« - left shift&lt;/li&gt;
  &lt;li&gt;
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;ul&gt;
          &lt;li&gt;right shift&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;~ - one’s complement&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;n = n &amp;amp; 0xff;
/*sets all bits of n to 0 except the low order 8 bits */
n = n &amp;amp; ~0xff;
/* zeroes the low order 8 bits */
n = n | 0x11;
/* sets bits 0 and 4 to 1, leaving all others alone */
n = n ^ 0x11;
/* if n’s bit 0 has a value of 0, set it to 1; if it is 1, set it to
0; same for bit 4 */
n = n &amp;lt;&amp;lt; 2;
/* shift n’s value 2 bits left, filling with 0’s; equivalent to
multiplying by 4 */
n = n &amp;gt;&amp;gt; 3;
/* shift n’s value 3 bits right; if n is signed, fill vacated
bits with the sign bit; if unsigned, fill with 0; equivalent
to division by 8 */
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;x = expr1 ? expr2 : expr3;
// is the same as
if (expr1) {
	x = expr2;
} else {
	x = expr3;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Operations&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Associativity&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;() [] -&amp;gt; .&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;! ~ ++ – + - * &amp;amp; (type) sizeof&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;right to left&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;* / %&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;+ -&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;« »&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&amp;lt; &amp;lt;= &amp;gt; &amp;gt;=&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;== !=&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&amp;amp;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;^&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;|&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&amp;amp;&amp;amp;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;||&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;?;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;right to left&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;= += -= *= /= %= &amp;amp;= ^= |= «= »=&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;right to left&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;,&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;chapter-3&quot;&gt;Chapter 3&lt;/h1&gt;
&lt;h2 id=&quot;control-statements&quot;&gt;Control statements&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;if (/* condition */) {
	/* code */
} else if (/* condition */) {
	/* code */
} else {
	/* code */
}

while (/* condition */) {
	/* code */
}

for (size_t i = 0; i &amp;lt; count; i++) {
	/* code */
}

do {
	/* code */
} while(/* condition */);

switch (/* expression */) {
	case /* value */:
		/* statement */;
		break;
	default /* value */ :
		/* statement */;
		break;
}

for (. . .)
	for (. . .) {
		. . .
		if (disaster)
			goto error;
		. . .
	}

error:
/* cleanup the mess */
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;chapter-4&quot;&gt;Chapter 4&lt;/h1&gt;
&lt;h2 id=&quot;functions-1&quot;&gt;Functions&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// always use prototypes
return-type name(/* arguments */);

return-type name(/* arguments */) {
	/* code */
	return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;if funciton doesn’t have a type, it is set to int as default&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;static-variables&quot;&gt;Static Variables&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;static int sp;
// can only use this variable inside the file it's declared in
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;internal static variables are local to a particular function, just as automatic variables are, but unlike automatics, they remain in existence rather than coming and going each time that the function is activated&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;register-variables&quot;&gt;Register Variables&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;The keyword register hints to compiler that a given variable can be put in a register. It’s compiler’s choice to put it in a register or not&lt;/li&gt;
  &lt;li&gt;Registers are faster than memory to access, so the variables which are most frequently used in a C program can be put in registers using register keyword&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;register int x;
int f(register unsigned m, register long n) {…}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;preprocessor&quot;&gt;Preprocessor&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// file inclusion
#include &quot;filename&quot;
#include &amp;lt;filename&amp;gt;

// macro substitution
#define name replacement-text
// use &quot;\&quot; to continue for multiple lines
#define name replacement-textreplacement-textreplacement-textreplacement-text\
replacement-textreplacement-textreplacement-text\
replacement-textreplacement-textreplacement-text
// ## can concatenate arguments
#define paste(front, back) front ## back
paste(name, 1);
// will give
name1;

// Conditional evaluation
#if
	#endif
	#else
	#elif
// eg
#if SYSTEM == SYSV
	#define HDR “sysv.h”
#elif SYSTEM == BSD
	#define HDR “bsd.h”
#elif SYSTEM == MSDOS
	#define HDR “msdos.h”
#else
	#define HDR “default.h”
#endif /* SYSTEM */
#include HDR


#ifdef
#ifndef
// ifdef/ifndef is the same as checks if contents of a header file is only included once
#if !defined(_HDR_H_)
#define _HDR_H_
/* contents of hdr.h go here */
#endif /*_HDR_H_ */
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;Automatic variable
    &lt;ul&gt;
      &lt;li&gt;lives inside function&lt;/li&gt;
      &lt;li&gt;allocated upon function call&lt;/li&gt;
      &lt;li&gt;deallocated upon function return&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;External variable
    &lt;ul&gt;
      &lt;li&gt;lives outside functions&lt;/li&gt;
      &lt;li&gt;allocated upon program start&lt;/li&gt;
      &lt;li&gt;never deallocated&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;visibility-of-variables&quot;&gt;Visibility of variables&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;As default all top-level names are visible everywhere&lt;/li&gt;
  &lt;li&gt;use static to restrict visibility&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;chapter-5&quot;&gt;Chapter 5&lt;/h2&gt;
&lt;h3 id=&quot;pointers&quot;&gt;pointers&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// points to a value of type int
int*;
// points to a value of type int*
int**;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;purpose&quot;&gt;purpose?&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;call-by-reference&lt;/li&gt;
  &lt;li&gt;linked data structures&lt;/li&gt;
  &lt;li&gt;array indexing&lt;/li&gt;
  &lt;li&gt;higher order functions - functions that call some of their own arguments&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// stores address of int X in P
int *P = &amp;amp;X;

// writes 42 to the address pointed to by P
*P = 42;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;&amp;amp; cannot be used for register variables or complex expressions&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;int x = 1, y = 2;
int z[10];
int *p, *q; /* p and q are pointers to int */

p = &amp;amp;x; /* p now points to x */
y = *p; /* y is now 1 */
*p = 0; /* x is now 0 */
q = &amp;amp;z[3]; /* q now points to z[3] */
p = q; /* p now points to z[3] */
while (p == q) /* loop exits on 1st iter */
	break;
if (p != NULL) /* address of z[3] != 0 */
	p = &amp;amp;z[0]; /* p now points to z[0] */
if (q)
	q = &amp;amp;z[0]; /* q now equals p; */
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;Use pointers to call by reference
    &lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;swap(&amp;amp;a[i], &amp;amp;a[j])
// instead of
swap(intx , int y)
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;int a[10];
int *pa;

pa = a; // points to a[0]
pa++; // points to a[1]

// given pointers q, p that points to the same array
q-p; // is the number of array elements between pointers p ad q

//-------------

char amsg[] = &quot;this is a string&quot;; // array of 17 characters including '\0'
char *pmsg = &quot;this is a string&quot; // pointer to an array of the same 17 chars
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;pmsg can be resized but amsg can’t;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;memory-management&quot;&gt;Memory management&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;malloc(); // requests given no. of bytes adn returns a void * to the first byte
sizeof(t); // no. of bytes required to store a value of type t

free(); // deallocates memory that was malloced;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;given
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./program hello world
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// in int main(int argc *argv[]);
argc == 3
argv[0] == &quot;./program&quot;;
argv[1] == &quot;hello&quot;;
argv[2] == &quot;world&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;function-pointers&quot;&gt;Function pointers&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;void sort(char *lineptr[], int left, int right, int (*comp)(void *, void *));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;chapter-7&quot;&gt;Chapter 7&lt;/h2&gt;
&lt;h4 id=&quot;standard-input-and-output&quot;&gt;Standard Input and output&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;#include &amp;lt;stdio.h&amp;gt;

int getchar(void); // read one character at a time
int getchat(); // return next input char, returns EOF on end
int putchar(int ch); // prints ch to stdout
printf(); // prints to stdout
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;formated-io&quot;&gt;Formated I/O&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// Format string determines type of remaining arguments
int printf(const char *format, ...);
printf(&quot;%d\n&quot;, 8);

int scanf(char *format, ...); // same as printf formatting
int day, year;
char monthname[20];
scanf(“%d %s %d”, &amp;amp;day, monthname, &amp;amp;year);
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Character&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Input Data&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;d&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;decimal int&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;i&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;integer. integer may be octal(leading 0) or hexadecimal(leading 0x/0X)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;o&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;octal int(with/without leading 0)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;u&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;unsigned int&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;x&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;hexadecimal int&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;c&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;char&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;s&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;string&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;e,f,g&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;floating point with optional sight/decimal point/exponential&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;%&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;literal %, no assignment is made&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;file-io&quot;&gt;File I/O&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;FILE *fopen(char *name, char *mode);
int getc(FILE *fp);
int putc(int c, FILE *fp);
int fclose(FILE *fp);

// printf and scanf variants
int fscanf(FILE *fp, char *format, ...);
int fprintf(FILE *fp, char *format, ...);

// line buffered input/output
char *fgets(char *line, int maxline, FILE *fp);
int fputs(char *line, FILE *fp);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;chapter-6&quot;&gt;Chapter 6&lt;/h2&gt;
&lt;h4 id=&quot;structs&quot;&gt;Structs&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;struct [tag] {
	member declarations
};

struct point {
	int x;
	int y;
};

struct point p = {320, 200};
struct point q;
struct point *r;

q = p; // struct assignment
r = &amp;amp;q; // address of struct variable q

q.y; // access struct member y
r-&amp;gt;x; // dereference
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;Legal Operations
    &lt;ul&gt;
      &lt;li&gt;copying&lt;/li&gt;
      &lt;li&gt;passing to a function&lt;/li&gt;
      &lt;li&gt;returning from a function&lt;/li&gt;
      &lt;li&gt;taking the address with &amp;amp;&lt;/li&gt;
      &lt;li&gt;accessing members&lt;/li&gt;
      &lt;li&gt;assigning to members&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Illegal Operations
    &lt;ul&gt;
      &lt;li&gt;arithmetic&lt;/li&gt;
      &lt;li&gt;comparisons&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;self-referential-structs&quot;&gt;Self-referential structs&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;struct tnode {
	int value; // payload
	struct tnode *left; // ptr to left child
	struct tnode *right; // ptr to right child
};

struct tnode *;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;typedefs&quot;&gt;Typedefs&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;create new data type synonyms
    &lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;typedef type synonym;
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;```C
typedef int Length; // Length is synonym for int
typedef char *String; // String is synonym for char *&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Length len, maxlen; // Length variables
Length *lengths; // ptr to (array of) Length
String lineptr[MAXLINES]; // array of String
Length strlen(String s); // prototype&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
#### Unions
- Variable that may hold objects of different types and sizes
```C
union const_value { // type declaration
	int ival;
	double dval;
	char *sval;
};
union const_value val; // variable definition
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;assignment to any union member turns all other members into garbage&lt;/li&gt;
  &lt;li&gt;compiler doesn’t track this&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;differences-between-java-and-c&quot;&gt;Differences between Java and C&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Interface support
    &lt;ul&gt;
      &lt;li&gt;Java compiler checks that a class implements its interface&lt;/li&gt;
      &lt;li&gt;C compiler doesn’t check that .c file defines what .h declares&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Memory management
    &lt;ul&gt;
      &lt;li&gt;Java garbage collector&lt;/li&gt;
      &lt;li&gt;In C unused memory mused be freed explicitly&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Memory protection
    &lt;ul&gt;
      &lt;li&gt;Java - private attributes cannot be tampered with&lt;/li&gt;
      &lt;li&gt;Pointers to opaque structs can still be dereferenced
        &lt;ul&gt;
          &lt;li&gt;never leak pointers to internal data structures, for security reasons.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;threads-and-concurrency&quot;&gt;Threads and Concurrency&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Concurency&lt;/em&gt; means multiple computations are happening at the same time.&lt;/p&gt;

&lt;h4 id=&quot;process&quot;&gt;Process&lt;/h4&gt;
&lt;p&gt;A &lt;em&gt;process&lt;/em&gt; is an instance of a running program that is isolated from other processes on the same machine. In particular, it has its own private section of the machine’s memory.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Processes has:
    &lt;ul&gt;
      &lt;li&gt;An address space&lt;/li&gt;
      &lt;li&gt;A collection of OS state&lt;/li&gt;
      &lt;li&gt;A CPU context - a thread of control&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;threads&quot;&gt;Threads&lt;/h4&gt;
&lt;p&gt;A &lt;em&gt;thread&lt;/em&gt; is a locus of control inside a running program. Think of it as a place in the program that is being run, plus the stack of method calls that led to that place (so the thread can go back up the stack when it reaches return statements).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Why use threads?
    &lt;ul&gt;
      &lt;li&gt;Split program into routines to execute in parallel&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Shares a process address space with &amp;gt;= 0 threads&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;thread-models&quot;&gt;Thread Models&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Manager/Worker
    &lt;ul&gt;
      &lt;li&gt;Manager handles I/O and assignes work to worker threads&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Peer
    &lt;ul&gt;
      &lt;li&gt;similar to manager/worker, but after the main thread creates other threads it participates in the work&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Pipeline
    &lt;ul&gt;
      &lt;li&gt;Each thread handles a different stage of an assemply line&lt;/li&gt;
      &lt;li&gt;Threads hand word to each other in producer-consumer relationship&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;generic-threading-concepts&quot;&gt;Generic Threading Concepts&lt;/h2&gt;
&lt;h4 id=&quot;thread-lifecycle&quot;&gt;Thread Lifecycle&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Must be able to:
    &lt;ul&gt;
      &lt;li&gt;Create new thread
        &lt;ul&gt;
          &lt;li&gt;Create thread context&lt;/li&gt;
          &lt;li&gt;Associate thread with function&lt;/li&gt;
          &lt;li&gt;Pass arguments to function&lt;/li&gt;
          &lt;li&gt;Recieve identifier to be used in other lifecycle calls&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Start new thread executing&lt;/li&gt;
      &lt;li&gt;Interupt thread&lt;/li&gt;
      &lt;li&gt;Wait for another thread to terminate&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;critical-regions&quot;&gt;Critical Regions&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Inconsistent data when accessing concurrently&lt;/li&gt;
  &lt;li&gt;To keep data consistent we need mechanisms to make sure threads are executed in order&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;locks&quot;&gt;Locks&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Prevents other threads from accessing data&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;If another thread owns a lock, and your thread is requesting the lock, it will be blocked until the owning thread releases the lock&lt;/li&gt;
  &lt;li&gt;When your thread gets the lock and its not owned, it will own the lock&lt;/li&gt;
  &lt;li&gt;When done with execution, the thread releases the lock&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Any threads blocked will now own the lock&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Avoid Problems
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Deadlock&lt;/strong&gt;: when neither thread can make progress (eg. if a thread wants access but another thread is stuck in infinity loop)&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Livelock&lt;/strong&gt;: when threads are constantly changing and none of them can make progress&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Starvation&lt;/strong&gt;: when threads are denied the necessary resources for it to work&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;conditional-variables&quot;&gt;Conditional Variables&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Can be called only if the thread owns the lock
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wait()
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Releases the lock and blocked until another thread calls &lt;code class=&quot;highlighter-rouge&quot;&gt;signal()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;When unblocked, the thread owns the lock again&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;signal()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;If any threads are blocked waiting for a condition, then &lt;em&gt;one&lt;/em&gt; of the blocked threads will be unblocked&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;broadcast()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;If any threads are blocked waiting for a condition, the  &lt;em&gt;all&lt;/em&gt; of the blocked threads will be unblocked&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;java-support-for-multi-threading&quot;&gt;Java support for multi-threading&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Provide a Runnable object&lt;/li&gt;
  &lt;li&gt;Allows your class to subclass another class&lt;/li&gt;
  &lt;li&gt;More general
    &lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;public class TestRunnable implements Runnable {
  public void run() {
      // stuff
  }

  publoc static void main(String[] args) {
      Thread t = new Thread(new testRunnable());
      t.start();
  }
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;Subclass Thread&lt;/li&gt;
  &lt;li&gt;Simpler easier&lt;/li&gt;
  &lt;li&gt;Less general
    &lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;public class TestSubclass extends Thread {
  public void run() {
      // stuff
  }

  public static void main(String[] args) {
      Thread t = new TestSubclass();
      t.start();
  }
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;t.start(); // Start thread
t.interupt(); // Interupt Thread
t.join(); // Wait to terminate
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;class Object defines wait(), notify(), notifyAll()&lt;/li&gt;
  &lt;li&gt;Which is same as wait(), signal(), broadcast()
    &lt;h2 id=&quot;pthreads&quot;&gt;PThreads&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;thread-safe-adts&quot;&gt;Thread Safe ADTs&lt;/h2&gt;

&lt;h2 id=&quot;memory-management-1&quot;&gt;Memory Management&lt;/h2&gt;

&lt;h2 id=&quot;openmp&quot;&gt;OpenMP&lt;/h2&gt;

</description>
        <pubDate>Sat, 23 Sep 2017 19:50:00 +0100</pubDate>
        <link>http://localhost:4000/cs-notes/level3/semester1/2017/09/23/advanced-programming.html</link>
        <guid isPermaLink="true">http://localhost:4000/cs-notes/level3/semester1/2017/09/23/advanced-programming.html</guid>
        
        
        <category>Level3</category>
        
        <category>Semester1</category>
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory - edit this post and re-build (or run with the &lt;code class=&quot;highlighter-rouge&quot;&gt;-w&lt;/code&gt; switch) to see your changes!
To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention: YYYY-MM-DD-name-of-post.ext.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sun, 10 Nov 2013 10:18:00 +0000</pubDate>
        <link>http://localhost:4000/cs-notes/thriller/comedy/horror/2013/11/10/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">http://localhost:4000/cs-notes/thriller/comedy/horror/2013/11/10/welcome-to-jekyll.html</guid>
        
        
        <category>Thriller</category>
        
        <category>Comedy</category>
        
        <category>Horror</category>
        
      </item>
    
  </channel>
</rss>
