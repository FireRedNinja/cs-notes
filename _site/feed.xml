<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>My notes on CS Level 3</description>
    <link>https://fireredninja.github.io/cs-notes//cs-notes/</link>
    <atom:link href="https://fireredninja.github.io/cs-notes//cs-notes/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 13 Jan 2018 12:44:27 +0000</pubDate>
    <lastBuildDate>Sat, 13 Jan 2018 12:44:27 +0000</lastBuildDate>
    <generator>Jekyll v3.7.0</generator>
    
      <item>
        <title>Networked Systems H</title>
        <description>&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Networked System: Autonomous computing devices that exchange data to perform some application goal and how they communicate across a network&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;internet&lt;/li&gt;
  &lt;li&gt;digital broadcast&lt;/li&gt;
  &lt;li&gt;mobile voice telephony&lt;/li&gt;
  &lt;li&gt;sensor networks&lt;/li&gt;
  &lt;li&gt;controller area networks
&lt;!--excerpt--&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Communication: Messages transferred from source to destination(s) via some communications channel&lt;br /&gt;
   How would you convert a message so that both source and destination understand it?&lt;br /&gt;
   Limitations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;size of messages is bounded on a channel at any one time&lt;/li&gt;
  &lt;li&gt;simplex - send/receive in only one direction (broadcasting)&lt;/li&gt;
  &lt;li&gt;half-duplex - send or receive, but not simultaneously (wifi)&lt;/li&gt;
  &lt;li&gt;full-duplex - send and receive at the same time (two cables, for sending and receiving)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Information:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;information theory - amount of info in a message can be characterised mathematically&lt;/li&gt;
  &lt;li&gt;capacity of channels can be modelled - physical limits exist here (amount, speed, power)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Signals:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the physical form of a message - usually a wave&lt;/li&gt;
  &lt;li&gt;analogue - smooth continuation of values&lt;/li&gt;
  &lt;li&gt;digital - sequence of discrete symbols&lt;/li&gt;
  &lt;li&gt;coding - mapping information to symbols&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Analogue:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;amplitude directly codes value of interest&lt;/li&gt;
  &lt;li&gt;can be arbitrarily accurate&lt;/li&gt;
  &lt;li&gt;susceptible to noise and interference&lt;/li&gt;
  &lt;li&gt;difficult to process with digital electronics
    &lt;ul&gt;
      &lt;li&gt;sample the signal at a suitable rate&lt;/li&gt;
      &lt;li&gt;quantise to nearest allowable discrete value&lt;/li&gt;
      &lt;li&gt;convert to digital representation&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;sampling theorem&lt;/strong&gt; dictates rate of sampling&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Digital:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;fixed alphabet&lt;/li&gt;
  &lt;li&gt;underlying channel is almost always analogue&lt;/li&gt;
  &lt;li&gt;modulation - map a digital signal onto the channel&lt;/li&gt;
  &lt;li&gt;uses binary encoding&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Networked systems often use non-binary encoding:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;complex modulation schemes with either 16, 64 or 256 possible symbols&lt;/li&gt;
  &lt;li&gt;baud rate - number of symbols transmitted per second
    &lt;ul&gt;
      &lt;li&gt;can differ from bit rate&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Channels and Network Links:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;signal may be directly conveyed or modulated onto an underlying carrier&lt;/li&gt;
  &lt;li&gt;link - the combination of signal and channel
    &lt;ul&gt;
      &lt;li&gt;directly connects 1+ hosts (ethernet)&lt;/li&gt;
      &lt;li&gt;network comprises several links connected together (WAN)&lt;/li&gt;
      &lt;li&gt;switches/routers - connects the links&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Circuit Switched Networks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;dedicated circuit for A and B to communicate&lt;/li&gt;
  &lt;li&gt;exchange arbitrary length messages&lt;/li&gt;
  &lt;li&gt;guaranteed capacity once circuit is created&lt;/li&gt;
  &lt;li&gt;can block other communications&lt;/li&gt;
  &lt;li&gt;capacity of network gives blocking probability&lt;/li&gt;
  &lt;li&gt;traditional telephone network&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/ns/circuit_switched.jpg&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Packet Switched Networks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;messages split into small packets before transmission
    &lt;ul&gt;
      &lt;li&gt;size constraint&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;A-B and C-D can communicate all the time&lt;/li&gt;
  &lt;li&gt;share bottleneck link&lt;/li&gt;
  &lt;li&gt;connectivity guaranteed&lt;/li&gt;
  &lt;li&gt;available capacity varies based on other people on the network&lt;/li&gt;
  &lt;li&gt;internet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/ns/packet_switched.jpg&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All networked systems are build using these basic components:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;hosts - source and destination(s)&lt;/li&gt;
  &lt;li&gt;links - physical realisation of channel&lt;/li&gt;
  &lt;li&gt;switches/routers - connect multiple links&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;network-protocols&quot;&gt;Network Protocols&lt;/h2&gt;

&lt;p&gt;Network protocols give meaning to the messages that are exchanged&lt;br /&gt;
   Messages follow some well known &lt;strong&gt;syntax&lt;/strong&gt;, and have agreed &lt;strong&gt;semantics&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;an agreed language for encoding messages&lt;/li&gt;
  &lt;li&gt;rules defining what messages mean and when they can be sent&lt;/li&gt;
  &lt;li&gt;define the network behaviour&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Syntax:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;protocol data units (PDU) - types of message&lt;/li&gt;
  &lt;li&gt;each PDU has a particular syntax
    &lt;ul&gt;
      &lt;li&gt;decribing what info is included and how it’s formatted&lt;/li&gt;
      &lt;li&gt;may be formatted as textual info or binary data
        &lt;ul&gt;
          &lt;li&gt;textual PDU - has syntax and grammar that describes its format&lt;/li&gt;
          &lt;li&gt;binary PDU - similar rules&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;define what messages are legal to send&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Semantics:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;define when PDUs can be sent, and what response is needed
    &lt;ul&gt;
      &lt;li&gt;who can send and when&lt;/li&gt;
      &lt;li&gt;host roles&lt;/li&gt;
      &lt;li&gt;what the communicating entities are&lt;/li&gt;
      &lt;li&gt;how errors are handled&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;described with state-transition diagram
    &lt;ul&gt;
      &lt;li&gt;states - stages of protocol operation&lt;/li&gt;
      &lt;li&gt;transitions - in response to PDUs, may result in other PDUs being sent&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/ns/state_transmission.jpg&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Morse Code:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;signals on electrical cable form a channel&lt;/li&gt;
  &lt;li&gt;syntax - pattern of dots and dashes&lt;/li&gt;
  &lt;li&gt;semantics - different gap lengths to signal end of word, and “STOP” for end of message&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Protocol Layering:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;organisation of communications systems (means of abstraction)&lt;/li&gt;
  &lt;li&gt;structured design reduces complexity&lt;/li&gt;
  &lt;li&gt;services - offered by a layer to the next higher layer&lt;/li&gt;
  &lt;li&gt;well defined interfaces
    &lt;ul&gt;
      &lt;li&gt;highest layer is communicating application&lt;/li&gt;
      &lt;li&gt;lowest layer is physical communication channel&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;peers at a layer &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; communicate using layer &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; protocol
    &lt;ul&gt;
      &lt;li&gt;using lower layer services&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example with a web browser talking to web server:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/ns/protocol_layering.jpg&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OSI Reference Model:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;standard way of thinking about layered protocol design&lt;/li&gt;
  &lt;li&gt;design tool&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/ns/osi.jpg&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Physical Layer:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;defines characteristics of cable/optic fibre
    &lt;ul&gt;
      &lt;li&gt;size and shape of plugs&lt;/li&gt;
      &lt;li&gt;cable length&lt;/li&gt;
      &lt;li&gt;type of cable
        &lt;ul&gt;
          &lt;li&gt;electrical voltage&lt;/li&gt;
          &lt;li&gt;current&lt;/li&gt;
          &lt;li&gt;modulation&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;type of fibre
        &lt;ul&gt;
          &lt;li&gt;single or multi-mode&lt;/li&gt;
          &lt;li&gt;optical clarity&lt;/li&gt;
          &lt;li&gt;colour&lt;/li&gt;
          &lt;li&gt;power output&lt;/li&gt;
          &lt;li&gt;modulation of laser&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;wireless
    &lt;ul&gt;
      &lt;li&gt;radio frequency&lt;/li&gt;
      &lt;li&gt;transmission power&lt;/li&gt;
      &lt;li&gt;modulation scheme&lt;/li&gt;
      &lt;li&gt;antenna type&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Data Link Layer:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;structure and frame physical layer bit stream
    &lt;ul&gt;
      &lt;li&gt;split bit stream into messages&lt;/li&gt;
      &lt;li&gt;detect/correct errors&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;perform media access control
    &lt;ul&gt;
      &lt;li&gt;assign addresses to hosts&lt;/li&gt;
      &lt;li&gt;arbitrate access to link&lt;/li&gt;
      &lt;li&gt;detemine when hosts can send messages&lt;/li&gt;
      &lt;li&gt;ensure fair access to link - flow control&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ethernet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Network Layer:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;interconnects links to form a WAN from source host –&amp;gt; destination host
    &lt;ul&gt;
      &lt;li&gt;data delivery&lt;/li&gt;
      &lt;li&gt;naming and addressing&lt;/li&gt;
      &lt;li&gt;routing&lt;/li&gt;
      &lt;li&gt;flow control&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;IP&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Transport Layer:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;end-to-end transfer of data from source –&amp;gt; destination
    &lt;ul&gt;
      &lt;li&gt;between session level service at the source, and corresponding service at the destination&lt;/li&gt;
      &lt;li&gt;provides reliability, ordering, framing, congestion control&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;TCP&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Session Layer:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;manages transport layer connections&lt;/li&gt;
  &lt;li&gt;functions
    &lt;ul&gt;
      &lt;li&gt;open TCP/IP connections to download webpage with HTTP&lt;/li&gt;
      &lt;li&gt;use SMTP to transfer email messages over a TCP/IP&lt;/li&gt;
      &lt;li&gt;coordinate control, audio and video flows for video conference&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Presentation Layer:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;manages presentation, representation and conversion of data
    &lt;ul&gt;
      &lt;li&gt;character set&lt;/li&gt;
      &lt;li&gt;data markup langs.&lt;/li&gt;
      &lt;li&gt;data format conversion&lt;/li&gt;
      &lt;li&gt;content negotiation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Application Layer:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;user application protocols (not the app. programs themselves)&lt;/li&gt;
  &lt;li&gt;REST APIs/WebRTC&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Protocol Standards:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;formal description of a protocol&lt;/li&gt;
  &lt;li&gt;ensure interoperability of diverse implementations&lt;/li&gt;
  &lt;li&gt;set procedures
    &lt;ul&gt;
      &lt;li&gt;open or closed standards development process&lt;/li&gt;
      &lt;li&gt;free or restricted standards availability&lt;/li&gt;
      &lt;li&gt;rules around disclosure of intellectual property rights&lt;/li&gt;
      &lt;li&gt;individual vs corporate vs national membership&lt;/li&gt;
      &lt;li&gt;lead technical dev. vs describing existing practices&lt;/li&gt;
      &lt;li&gt;collaborative vs combative process&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;standards organisations
    &lt;ul&gt;
      &lt;li&gt;Internet Engineering Task Force&lt;/li&gt;
      &lt;li&gt;International Telecommunications Union&lt;/li&gt;
      &lt;li&gt;3rd Gen Partnership Project&lt;/li&gt;
      &lt;li&gt;World Wide Web Consortium&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 10 Jan 2018 18:50:00 +0000</pubDate>
        <link>https://fireredninja.github.io/cs-notes//cs-notes/level3/semester2/2018/01/10/networked-systems.html</link>
        <guid isPermaLink="true">https://fireredninja.github.io/cs-notes//cs-notes/level3/semester2/2018/01/10/networked-systems.html</guid>
        
        
        <category>Level3</category>
        
        <category>Semester2</category>
        
      </item>
    
      <item>
        <title>Algorithmics 1</title>
        <description>&lt;h5 id=&quot;useful-textbooks&quot;&gt;Useful Textbooks&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;M.T. Goodrich &amp;amp; R. Tamassia, Algorithm Design: Foundations, Analysis, and Internet Examples, Wiley, 2002&lt;/li&gt;
  &lt;li&gt;D. Harel &amp;amp; Y. Feldman, Algorithmics: the Spirit of Computing, Addison Wesley, 2004 (also earlier 1992 edition by D. Harel)&lt;/li&gt;
  &lt;li&gt;M. Sipser, Introduction to the Theory of Computation, Course Technology, 2006
&lt;!--excerpt--&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;contents&quot;&gt;Contents&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;#section_0&quot;&gt;Introduction&lt;/a&gt;&lt;br /&gt;
   &lt;a href=&quot;#section_1&quot;&gt;Fundamental Algorithms and Data Structures&lt;/a&gt;&lt;br /&gt;
   &lt;a href=&quot;#section_2&quot;&gt;Sorting Algorithms&lt;/a&gt;&lt;br /&gt;
   &lt;a href=&quot;#section_3&quot;&gt;Strings and text algorithms&lt;/a&gt;&lt;br /&gt;
   &lt;a href=&quot;#section_4&quot;&gt;Graphs and graph algorithms&lt;/a&gt;&lt;br /&gt;
   &lt;a href=&quot;#section_5&quot;&gt;NP Completeness&lt;/a&gt;&lt;br /&gt;
   &lt;a href=&quot;#section_6&quot;&gt;Computability&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;section_0&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;introduction&quot;&gt;Introduction&lt;/h4&gt;

&lt;h5 id=&quot;revision---algorithm-analysis&quot;&gt;Revision - Algorithm Analysis&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;Time and space complexity is written as a function of input size&lt;/li&gt;
  &lt;li&gt;Worst case - gives a guarantee of algorithm’s performance&lt;/li&gt;
  &lt;li&gt;Asymptotic behaviour indicates what will happen as input size grows&lt;/li&gt;
  &lt;li&gt;Expressed using Big O notation&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;big-o-notation&quot;&gt;Big O notation&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;f(n) = O(g(n))&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; grows no faster than &lt;code class=&quot;highlighter-rouge&quot;&gt;g&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;there exists a real constant &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt; and integer constant &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; such that &lt;code class=&quot;highlighter-rouge&quot;&gt;|f(n)| &amp;lt;= |c*g(n)|&lt;/code&gt; for all &lt;code class=&quot;highlighter-rouge&quot;&gt;n =&amp;gt; N&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; is usually a complex function, which is not known precisely&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;g&lt;/code&gt; is a known function eg O(1), O(n) etc&lt;/li&gt;
  &lt;li&gt;use the “tightest” &lt;code class=&quot;highlighter-rouge&quot;&gt;g&lt;/code&gt; we can find for an algorithm&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;log-function&quot;&gt;Log function&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;x = log&lt;sub&gt;a&lt;/sub&gt;n if n = a&lt;sup&gt;x&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;log&lt;sub&gt;a&lt;/sub&gt; m * n = log&lt;sub&gt;a&lt;/sub&gt;m + log&lt;sub&gt;a&lt;/sub&gt;n&lt;/li&gt;
  &lt;li&gt;log&lt;sub&gt;a&lt;/sub&gt; m / n = log&lt;sub&gt;a&lt;/sub&gt;m - log&lt;sub&gt;a&lt;/sub&gt;n&lt;/li&gt;
  &lt;li&gt;log&lt;sub&gt;a&lt;/sub&gt;n&lt;sup&gt;c&lt;/sup&gt; = c * log&lt;sub&gt;a&lt;/sub&gt;n&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;time-complexities&quot;&gt;Time complexities&lt;/h6&gt;

&lt;p&gt;&lt;strong&gt;For some constant &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Polynomial-time = O(n&lt;sup&gt;c&lt;/sup&gt;)&lt;/li&gt;
  &lt;li&gt;Exponential-time = no better than O(c&lt;sup&gt;n&lt;/sup&gt;) where &lt;code class=&quot;highlighter-rouge&quot;&gt;c &amp;gt; 1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;section_1&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;fundamental-algorithms-and-data-structures&quot;&gt;Fundamental Algorithms and Data Structures&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#stack_topic&quot;&gt;Stacks&lt;/a&gt;, &lt;a href=&quot;#queue_topic&quot;&gt;queues&lt;/a&gt; and &lt;a href=&quot;#priority_queue_topic&quot;&gt;priority queues&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cbt_topic&quot;&gt;Complete binary trees&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heap_topic&quot;&gt;Heaps and heap operations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#java_heap&quot;&gt;Java class&lt;/a&gt; for (integer) heaps&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heap_sort_topic&quot;&gt;Heap sort&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;stack_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;stack-abstract-data-type-lifo&quot;&gt;Stack abstract data type (LIFO)&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;Basic operations:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;create&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;isEmpty&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;push&lt;/em&gt; (to top of stack)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;pop&lt;/em&gt; (delete and return from top of stack)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Represent it as:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;an array - all operations are O(1)&lt;/li&gt;
  &lt;li&gt;a linked list - all operations are O(1)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;queue_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;queue-abstract-data-type-fifo&quot;&gt;Queue abstract data type (FIFO)&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;Basic operations:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;create&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;isEmpty&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;insert&lt;/em&gt; (to the back of queue)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;delete&lt;/em&gt; (delete and return item at front of queue)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Represent it as:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;an array - all operations are O(1) and it must be “wrapped around”, treated as circular&lt;/li&gt;
  &lt;li&gt;a linked list - all operations are O(1)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;priority_queue_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;priority-queue-abstract-data-type&quot;&gt;Priority queue abstract data type&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;Basic operations:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;create&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;isEmpty&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;insert&lt;/em&gt; (new item with given priority)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;delete&lt;/em&gt; (delete and return item with highest priority)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Represent it as:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;unordered list - &lt;em&gt;insert&lt;/em&gt; O(1), &lt;em&gt;delete&lt;/em&gt; O(n)&lt;/li&gt;
  &lt;li&gt;ordered list - &lt;em&gt;insert&lt;/em&gt; O(n), &lt;em&gt;delete&lt;/em&gt; O(1)&lt;/li&gt;
  &lt;li&gt;heap - &lt;em&gt;insert&lt;/em&gt; and &lt;em&gt;delete&lt;/em&gt; are O(logn)&lt;/li&gt;
  &lt;li&gt;in all cases &lt;em&gt;create&lt;/em&gt; and &lt;em&gt;isEmpty&lt;/em&gt; are O(1)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;cbt_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;complete-binary-trees&quot;&gt;Complete Binary Trees&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;Height of a node:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;length of the longest path from the node to a leaf&lt;/li&gt;
  &lt;li&gt;height of a heap is the height of its root node&lt;/li&gt;
  &lt;li&gt;a binary tree of height &lt;code class=&quot;highlighter-rouge&quot;&gt;h&lt;/code&gt; can contain maximum 2&lt;sup&gt;h+1&lt;/sup&gt; - 1 nodes&lt;/li&gt;
  &lt;li&gt;therefore the height of a CBT with &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; nodes is é log&lt;sub&gt;2&lt;/sub&gt;( n + 1 ) - 1 ù&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;A complete binary tree with &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; nodes has:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the minimum possible height&lt;/li&gt;
  &lt;li&gt;the maximum possible number of nodes at each level &lt;em&gt;except the last&lt;/em&gt; (ie for &lt;code class=&quot;highlighter-rouge&quot;&gt;i = 0, ... , h - 2&lt;/code&gt;, level &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; has 2&lt;sup&gt;i&lt;/sup&gt; nodes&lt;/li&gt;
  &lt;li&gt;the nodes on the &lt;em&gt;last&lt;/em&gt; level are as far to the left as possible&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Properties of a CBT:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;with a height &lt;code class=&quot;highlighter-rouge&quot;&gt;h&lt;/code&gt;, it has at &lt;em&gt;most&lt;/em&gt; 2&lt;sup&gt;h+1&lt;/sup&gt; - 1 nodes&lt;/li&gt;
  &lt;li&gt;with &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; nodes, its height is é log&lt;sub&gt;2&lt;/sub&gt;( n + 1 ) - 1 ù&lt;/li&gt;
  &lt;li&gt;then it has é n / 2 ù leaf nodes&lt;/li&gt;
  &lt;li&gt;and it has ⌊ n / 2 ⌋ branch nodes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;heap_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;heaps&quot;&gt;Heaps&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;Def:&lt;/strong&gt; A CBT where each node stores an item, and has a priority value&lt;br /&gt;
   &lt;strong&gt;Heap property:&lt;/strong&gt; Every node’s priority is greater than or equal to the priorities of all its descendent nodes&lt;br /&gt;
   &lt;strong&gt;Min-heap:&lt;/strong&gt; Inverted so that the minimum priority is at the root
&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;For a node &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;its children are nodes &lt;code class=&quot;highlighter-rouge&quot;&gt;2i + 1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;2i + 2&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;its parent is the node &lt;code class=&quot;highlighter-rouge&quot;&gt;⌊ (i - 1) / 2 ⌋&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Basic operations:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;insert&lt;/em&gt; an item&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;build&lt;/em&gt; a heap containing a given set of items&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;delete&lt;/em&gt; the item with highest priority&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;impose&lt;/em&gt; the heap property on a given node&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Complexity:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;build&lt;/em&gt; is O(n log n) and there is an O(n) alternative&lt;/li&gt;
  &lt;li&gt;all other operations are O(log n) for algorithms which take O(1) steps at each level of the heap&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Insertion:&lt;/strong&gt;&lt;br /&gt;
   &lt;code class=&quot;highlighter-rouge&quot;&gt;while (new_value NOT in root &amp;amp;&amp;amp; new_value &amp;gt; parent_value)  
   swap new_value with parent_value&lt;/code&gt;&lt;br /&gt;
   &lt;strong&gt;Imposing:&lt;/strong&gt;&lt;br /&gt;
   Pre-condition - a specified node may violate the heap property, but all its descendents satisfy the property&lt;br /&gt;
   Post-condition - the specified node and all of its descendents satisfy the property&lt;br /&gt;
   &lt;code class=&quot;highlighter-rouge&quot;&gt;while (bad_value NOT in leaf &amp;amp;&amp;amp; bad_value &amp;lt; larger_child)  
   swap bad_value with larger_child&lt;/code&gt;&lt;br /&gt;
   &lt;strong&gt;Deletion:&lt;/strong&gt;&lt;br /&gt;
   &lt;code class=&quot;highlighter-rouge&quot;&gt;swap root with node in last (bottom-right) leaf  
delete last leaf  
impose heap property on bad value now in root&lt;/code&gt;&lt;br /&gt;
   &lt;strong&gt;Building:&lt;/strong&gt;&lt;br /&gt;
   Pre-condition - values are in arbitrary order&lt;br /&gt;
   Post-condition - values form a heap&lt;br /&gt;
   &lt;code class=&quot;highlighter-rouge&quot;&gt;for each non-leaf node in bottom-to-top right-to-left order  
   impose heap propery&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;java_heap&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;an-integer-heap-class&quot;&gt;An integer heap class&lt;/h5&gt;

&lt;p&gt;Represent using an array, where:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;children of a node &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; are in the array at &lt;code class=&quot;highlighter-rouge&quot;&gt;2i + 1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;2i + 2&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;parent of a node &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; are in the array at &lt;code class=&quot;highlighter-rouge&quot;&gt;(i - 1) / 2&lt;/code&gt; (floored automatically in Java)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Heap class &lt;a href=&quot;#heap_class&quot;&gt;implementation in Java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;heap_sort_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;heap-sort&quot;&gt;Heap Sort&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;more efficient than selection sort&lt;/li&gt;
  &lt;li&gt;O(n log n) in the worst case&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heap_sort&quot;&gt;pseudocode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;section_2&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;sorting-algorithms&quot;&gt;Sorting Algorithms&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#comparison_topic&quot;&gt;Comparison-based sorting&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#radix_topic&quot;&gt;Radix&lt;/a&gt; sort&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#trie_topic&quot;&gt;Tries&lt;/a&gt; (re&lt;strong&gt;trie&lt;/strong&gt;val)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Common sorts:&lt;/strong&gt;&lt;br /&gt;
   O(n&lt;sup&gt;2&lt;/sup&gt;) - selection, insertion, bubble&lt;br /&gt;
   O(n log n) - merge, heap&lt;br /&gt;
   Quicksort is O(n log n) on average (but no better than O(n&lt;sup&gt;2&lt;/sup&gt;) in the worst case&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;comparison_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;comparison-based-sorting&quot;&gt;Comparison-based sorting&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;Claim:&lt;/strong&gt; No sorting algorithm that is based on pairwise comparison can be better than O(n log n) in the worst case&lt;br /&gt;
   &lt;strong&gt;Justification:&lt;/strong&gt; Draw out the algorithm using a binary decision tree, where each node represents a comparison between two elements&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;leaf nodes represent the possible outcomes of the algorithm&lt;/li&gt;
  &lt;li&gt;so the number of leaf nodes = the possible ordering of &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; items&lt;/li&gt;
  &lt;li&gt;so there are at least &lt;code class=&quot;highlighter-rouge&quot;&gt;n!&lt;/code&gt; and maximum 2&lt;sup&gt;h+1&lt;/sup&gt; leaf nodes&lt;/li&gt;
  &lt;li&gt;its worst case complexity is O(h) where &lt;code class=&quot;highlighter-rouge&quot;&gt;h&lt;/code&gt; = its height&lt;/li&gt;
  &lt;li&gt;it follows that n! &amp;lt;= 2&lt;sup&gt;h+1&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/decision_tree.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Reversing inequality and taking log&lt;sub&gt;2&lt;/sub&gt; of both sides:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/comparison_based_complexity.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Giving a complexity of O(n log n) as required&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;radix_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;radix-sorting&quot;&gt;Radix sorting&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;O(n) complexity&lt;/li&gt;
  &lt;li&gt;exploits the structure of items to be sorted to achieve this&lt;/li&gt;
  &lt;li&gt;faster than O(n log n) only for very large &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;How it works:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;each iteration the items are distributed into buckets (lists)&lt;/li&gt;
  &lt;li&gt;during an &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;&lt;sup&gt;th&lt;/sup&gt; iteration an item is placed in the bucket corresponding to the integer represented by its bits&lt;/li&gt;
  &lt;li&gt;at the end of an iteration the buckets are concatenated to give a new sequence which will be used as the starting point of the next iteration&lt;/li&gt;
  &lt;li&gt;there are &lt;code class=&quot;highlighter-rouge&quot;&gt;m / b&lt;/code&gt; iterations, where &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; is the length of bit-sequences representing an item, and &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; is a chosen factor of &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To sort the following sequence: &lt;code class=&quot;highlighter-rouge&quot;&gt;15 43 5 27 60 18 26 2&lt;/code&gt;&lt;br /&gt;
   Where binary encodings are given by:&lt;br /&gt;
   &lt;code class=&quot;highlighter-rouge&quot;&gt;15 = 001111  43 = 101011  5 = 000101  27 = 011011&lt;/code&gt;&lt;br /&gt;
   &lt;code class=&quot;highlighter-rouge&quot;&gt;60 = 111100  18 = 010010  26 = 011010  2 = 000010&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Items have bit positions 0, …, 5 so &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; = 6&lt;br /&gt;
   &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; must be a factor of &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt;, so choose &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; = 2&lt;br /&gt;
   So we have 2&lt;sup&gt;b&lt;/sup&gt; = 2&lt;sup&gt;2&lt;/sup&gt; = 4 buckets labelled 0, 1, 2, 3 (or 00, 01, 10, 11)
   And &lt;code class=&quot;highlighter-rouge&quot;&gt;m / b = 3&lt;/code&gt; iterations are required&lt;/p&gt;

&lt;p&gt;See radix sorting pseudocode &lt;a href=&quot;#radix_sort&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Correctness:&lt;/strong&gt; For two items &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; where &lt;code class=&quot;highlighter-rouge&quot;&gt;x &amp;lt; y&lt;/code&gt;, we need to show that &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; precedes &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; in the final sequence&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;During the last iteration&lt;/strong&gt; where some bits of &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; differ:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the bits of &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; must be smaller than &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;so &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; goes into a bucket before &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; does&lt;/li&gt;
  &lt;li&gt;so &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; precedes &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; in the sequence after this iteration&lt;/li&gt;
  &lt;li&gt;in later iterations, &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; go in the same bucket as they don’t have any more differing bits&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Complexity:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;during each of the &lt;code class=&quot;highlighter-rouge&quot;&gt;m / b&lt;/code&gt; iterations, the sequence is scanned –&amp;gt; O(n) time, and buckets are concatenated –&amp;gt; O(2&lt;sup&gt;b&lt;/sup&gt;) time&lt;/li&gt;
  &lt;li&gt;overall, O(m / b (n + 2&lt;sup&gt;b&lt;/sup&gt;)) –&amp;gt; O(n)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Time-space trade-off:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the larger the value of b, the smaller the multiplicative constant (m / b) in the complexity function and so the faster the algorithm will become&lt;/li&gt;
  &lt;li&gt;an array of size 2&lt;sup&gt;b&lt;/sup&gt; is required, so increasing &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; will increase space requirements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;trie_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;tries&quot;&gt;Tries&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;stored items have a key that is interpreted as a sequence of bits/characters&lt;/li&gt;
  &lt;li&gt;there is a multiway branch at each node where each branch has an associated symbol&lt;/li&gt;
  &lt;li&gt;no two siblings have the same symbol&lt;/li&gt;
  &lt;li&gt;the branch to be taken at level &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; is determined by the &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;&lt;sup&gt;th&lt;/sup&gt; element of the key&lt;/li&gt;
  &lt;li&gt;tracing a path from root to a node spells out the key of the item&lt;/li&gt;
  &lt;li&gt;eg, used to store strings&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/trie.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Search&lt;/em&gt; and &lt;em&gt;insert&lt;/em&gt; algorithms for the trie found &lt;a href=&quot;#trie_alg&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Represent it as:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;an array of pointers, which represent children&lt;/li&gt;
  &lt;li&gt;linked lists, containing children of each node&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/trie_list.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#trie_class&quot;&gt;Example&lt;/a&gt; trie class to represent a dictionary&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;section_3&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;strings-and-text-algorithms&quot;&gt;Strings and text algorithms&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#compression_topic&quot;&gt;Text compression&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#huffman_topic&quot;&gt;Huffman&lt;/a&gt; and &lt;a href=&quot;#lzw_topic&quot;&gt;LZW&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#string_comparison_topic&quot;&gt;String comparison&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#string_distance_topic&quot;&gt;String distance&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#pattern_topic&quot;&gt;String/pattern search&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#brute_topic&quot;&gt;Brute force&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#kmp_topic&quot;&gt;KMP&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#bm_topic&quot;&gt;BM&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;compression_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;text-compression&quot;&gt;Text compression&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;lossless&lt;/li&gt;
  &lt;li&gt;compression ratio is &lt;code class=&quot;highlighter-rouge&quot;&gt;x / y&lt;/code&gt; where &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; = compressed and &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; = original&lt;/li&gt;
  &lt;li&gt;space saved = &lt;code class=&quot;highlighter-rouge&quot;&gt;1 - (x / y) * 100%&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;huffman_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;huffman-encoding&quot;&gt;Huffman encoding&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;statistical method&lt;/li&gt;
  &lt;li&gt;unique, variable-length codeword for each character&lt;/li&gt;
  &lt;li&gt;no codeword is the prefix of another&lt;/li&gt;
  &lt;li&gt;each character is a leaf node&lt;/li&gt;
  &lt;li&gt;codeword is the path from root to appropriate leaf&lt;/li&gt;
  &lt;li&gt;when going down the path, left route = 0, right route = 1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Huffman tree construction:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;add leaf nodes containing the character represented and its frequency&lt;/li&gt;
  &lt;li&gt;while there are &amp;gt; 1 parentless nodes
    &lt;ul&gt;
      &lt;li&gt;add new parent to the two nodes of smallest weight (frequency)&lt;/li&gt;
      &lt;li&gt;weight of the parent node = sum of child weights&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The tree for a file with char frequencies:&lt;br /&gt;
   &lt;code class=&quot;highlighter-rouge&quot;&gt;Space = 15  E = 11  A = 9  T = 8  I = 7  S = 7&lt;/code&gt;&lt;br /&gt;
   &lt;code class=&quot;highlighter-rouge&quot;&gt;R = 7  O = 6  N = 4  U = 3  H = 2  C = 1  D = 1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/huffman_1.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tree construction &lt;a href=&quot;#huff_contruct&quot;&gt;pseudocode&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Generating the codewords:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;following left and right paths down the constructed tree
    &lt;ul&gt;
      &lt;li&gt;Space &lt;code class=&quot;highlighter-rouge&quot;&gt;10&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;E &lt;code class=&quot;highlighter-rouge&quot;&gt;010&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;111&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;T &lt;code class=&quot;highlighter-rouge&quot;&gt;110&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;I &lt;code class=&quot;highlighter-rouge&quot;&gt;0000&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;S &lt;code class=&quot;highlighter-rouge&quot;&gt;0001&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;R &lt;code class=&quot;highlighter-rouge&quot;&gt;0011&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;O &lt;code class=&quot;highlighter-rouge&quot;&gt;0110&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;N &lt;code class=&quot;highlighter-rouge&quot;&gt;0111&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;U &lt;code class=&quot;highlighter-rouge&quot;&gt;00101&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;H &lt;code class=&quot;highlighter-rouge&quot;&gt;001001&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;C &lt;code class=&quot;highlighter-rouge&quot;&gt;0010000&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;D &lt;code class=&quot;highlighter-rouge&quot;&gt;0010001&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Weighted path length of tree T:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SUM( weight * distance from root )&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;sum is over all leaf nodes&lt;/li&gt;
  &lt;li&gt;this gives the number of bits in the compressed file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Complexity:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;building tree - O(n)&lt;/li&gt;
  &lt;li&gt;compression - O(n)&lt;/li&gt;
  &lt;li&gt;decompression - O(n)&lt;/li&gt;
  &lt;li&gt;use &lt;strong&gt;adaptive&lt;/strong&gt; Huffman coding
    &lt;ul&gt;
      &lt;li&gt;same tree built and adapted by compressor and decompressor&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;lzw_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;lzw-compression&quot;&gt;LZW compression&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;dictionary method&lt;/li&gt;
  &lt;li&gt;collection of strings, each with a bit pattern that represents it&lt;/li&gt;
  &lt;li&gt;dictionary built dynamically during compression and decompression&lt;/li&gt;
  &lt;li&gt;if string &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; is represented, so is every prefix of &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;a &lt;strong&gt;trie&lt;/strong&gt; is an ideal representation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At any given time during comp./decomp. there is a &lt;strong&gt;current codeword length &lt;code class=&quot;highlighter-rouge&quot;&gt;k&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2&lt;sup&gt;k&lt;/sup&gt; distinct codewords available&lt;/li&gt;
  &lt;li&gt;limits size of dictionary, but can be incremented as necessary (so doubling the codeword availability)&lt;/li&gt;
  &lt;li&gt;initial &lt;code class=&quot;highlighter-rouge&quot;&gt;k&lt;/code&gt; should be large enough to encode all strings of length &lt;code class=&quot;highlighter-rouge&quot;&gt;l&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;LZW compression &lt;a href=&quot;#lzw&quot;&gt;pseudocode&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/lzw_1.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LZW variants:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;constant - fixed capacity dictionary&lt;/li&gt;
  &lt;li&gt;dynamic - add 1 to current length whenever dictionary becomes full&lt;/li&gt;
  &lt;li&gt;LRU - when full, current string replaces the least recently used string in the dictionary&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;LZW decompression:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;builds same dictionary as compression but &lt;strong&gt;1 step out of phase&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;may encounter codeword that is not in dictionary
    &lt;ul&gt;
      &lt;li&gt;if (lookup fails) newS = oldS + oldS.charAt(0);&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;LZW decompression &lt;a href=&quot;#lzw_decomp&quot;&gt;pseudocode&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/lzw_2.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Complexity:&lt;/strong&gt; O(n) for comp. and decomp. each&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;string_comparison_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;string-comparison&quot;&gt;String comparison&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;given strings &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; of lengths &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;, what is the smallest number of basic operations needed to transform &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; into &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt;?&lt;/li&gt;
  &lt;li&gt;use
    &lt;ul&gt;
      &lt;li&gt;insertion&lt;/li&gt;
      &lt;li&gt;deletion&lt;/li&gt;
      &lt;li&gt;subsitution&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;String distance:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/distance_1.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prefixes:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;&lt;sup&gt;th&lt;/sup&gt; prefix of string &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; is first &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; chars of &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;let &lt;code class=&quot;highlighter-rouge&quot;&gt;d( i,j )&lt;/code&gt; = distance between prefix &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; and prefix &lt;code class=&quot;highlighter-rouge&quot;&gt;j&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;then distance between &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; = &lt;code class=&quot;highlighter-rouge&quot;&gt;d( m,n )&lt;/code&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;len(s) = m&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;len(t) = n&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Optimal alignment:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The last position of the alignment must either be of the form&lt;br /&gt;
   &lt;img src=&quot;/cs-notes/assets/images/algs/optimal_alignment.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In other words,&lt;br /&gt;
   &lt;img src=&quot;/cs-notes/assets/images/algs/optimal_alignment_alt.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;string_distance_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;distance-with-dynamic-programming&quot;&gt;Distance with dynamic programming&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;fill in entries of an &lt;code class=&quot;highlighter-rouge&quot;&gt;m * n&lt;/code&gt; table row by row, and column by column&lt;/li&gt;
  &lt;li&gt;time and space complexity = O(mn)&lt;/li&gt;
  &lt;li&gt;keep most recent entry in each column of the table
    &lt;ul&gt;
      &lt;li&gt;space complexity = O(m + n)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Distances table:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/distance_table.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;entries calculated one by one by applying formula above&lt;/li&gt;
  &lt;li&gt;final entry &lt;code class=&quot;highlighter-rouge&quot;&gt;d( 7,8 ) = 4&lt;/code&gt; so string distance is &lt;strong&gt;4&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;trace back to entry &lt;code class=&quot;highlighter-rouge&quot;&gt;( 0,0 )&lt;/code&gt; to find optimal alignment
    &lt;ul&gt;
      &lt;li&gt;vertical = deletion&lt;/li&gt;
      &lt;li&gt;horizontal = insertion&lt;/li&gt;
      &lt;li&gt;diagonal = match/substitution&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;pattern_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;stringpattern-search&quot;&gt;String/pattern search&lt;/h5&gt;

&lt;p&gt;Given a text &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; of length &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;, and a string/pattern &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; of length &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt;, find the position of the last occurence of &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;brute_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;brute-force-algorithm&quot;&gt;Brute force algorithm&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;current starting position in text = 0&lt;/li&gt;
  &lt;li&gt;compare chars from &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; left to right until the entire string is matched&lt;/li&gt;
  &lt;li&gt;if mismatch, advance starting position by 1 and repeat&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Brute force &lt;a href=&quot;#brute_force&quot;&gt;pseudocode&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Effectiveness:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;expressed using char arrays rather than strings in Java&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; char comparisons needed at each &lt;code class=&quot;highlighter-rouge&quot;&gt;n - (m + 1)&lt;/code&gt; positions in text before the pattern is found&lt;/li&gt;
  &lt;li&gt;worse case O(mn)&lt;/li&gt;
  &lt;li&gt;average case O(n)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;kmp_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;kmp-algorithm&quot;&gt;KMP algorithm&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;online - removes need to back-up in text&lt;/li&gt;
  &lt;li&gt;worst case O(n)&lt;/li&gt;
  &lt;li&gt;need to pre-process the string into a border table (an array &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; with an entry &lt;code class=&quot;highlighter-rouge&quot;&gt;b[j]&lt;/code&gt; for each position &lt;code class=&quot;highlighter-rouge&quot;&gt;j&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;if mismatch at &lt;code class=&quot;highlighter-rouge&quot;&gt;j&lt;/code&gt;, remain at current text char&lt;/li&gt;
  &lt;li&gt;the border table says what to compare next&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Border of a string &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a substring that
    &lt;ul&gt;
      &lt;li&gt;is a prefix&lt;/li&gt;
      &lt;li&gt;is a suffix&lt;/li&gt;
      &lt;li&gt;cannot be the string itself&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;eg for string &lt;code class=&quot;highlighter-rouge&quot;&gt;s = a c a c g a t a c a c&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;borders are &lt;code class=&quot;highlighter-rouge&quot;&gt;ac&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;acac&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;acac&lt;/code&gt; is the longest border&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Border table:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/border_table.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;b[j]&lt;/code&gt; is
    &lt;ul&gt;
      &lt;li&gt;the length of the longest border of &lt;code class=&quot;highlighter-rouge&quot;&gt;s[0...j-1]&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;max { k | s[0...k-1] = s[j-k...j-1] }&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;KMP seach :&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#kmp&quot;&gt;implementation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;this is O(n) worst case&lt;/li&gt;
  &lt;li&gt;naive method requires O(j&lt;sup&gt;2&lt;/sup&gt;) steps to find &lt;code class=&quot;highlighter-rouge&quot;&gt;b[j]&lt;/code&gt;, so O(m&lt;sup&gt;2&lt;/sup&gt;) overall&lt;/li&gt;
  &lt;li&gt;can be implemented in O(m + n) time (to set up border table and to conduct search)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;bm_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;boyer-moore-algorithm&quot;&gt;Boyer-Moore algorithm&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;string scanned left-to-right&lt;/li&gt;
  &lt;li&gt;mismatched char used to decide next comparison&lt;/li&gt;
  &lt;li&gt;need to pre-process string to record position of last occurence of each char in the alphabet&lt;/li&gt;
  &lt;li&gt;alphabet must be fixed in advance of search&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Position of last occurence of char &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt; in string &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;max { k | s[k] = c }&lt;/code&gt; if such a &lt;code class=&quot;highlighter-rouge&quot;&gt;k&lt;/code&gt; exists, &lt;code class=&quot;highlighter-rouge&quot;&gt;-1&lt;/code&gt; otherwise&lt;/li&gt;
  &lt;li&gt;store last occurence position of &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt; in array element &lt;code class=&quot;highlighter-rouge&quot;&gt;p[c]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Jump steps on a mismatch:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;if mismatch between &lt;code class=&quot;highlighter-rouge&quot;&gt;s[j]&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;t[i]&lt;/code&gt;, move &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; along so &lt;code class=&quot;highlighter-rouge&quot;&gt;p[t[i]]&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; aligns with &lt;code class=&quot;highlighter-rouge&quot;&gt;t[i]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;if this moves &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; in the “wrong direction”, instead move &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; one position to the right&lt;/li&gt;
  &lt;li&gt;if &lt;code class=&quot;highlighter-rouge&quot;&gt;t[i]&lt;/code&gt; doesn’t appear in the string, slide the string past &lt;code class=&quot;highlighter-rouge&quot;&gt;t[i]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Jump step cases:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;p[t[i]] &amp;lt; j and =&amp;gt; 0&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;new &lt;code class=&quot;highlighter-rouge&quot;&gt;i = i + m - 1 - p[t[i]]&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;new &lt;code class=&quot;highlighter-rouge&quot;&gt;j = m - 1&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;new &lt;code class=&quot;highlighter-rouge&quot;&gt;sp = sp + j - p[t[i]]&lt;/code&gt; (starting position)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;p[t[i]] &amp;gt; j&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;new &lt;code class=&quot;highlighter-rouge&quot;&gt;i = i + m - j&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;new &lt;code class=&quot;highlighter-rouge&quot;&gt;j = m - 1&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;new &lt;code class=&quot;highlighter-rouge&quot;&gt;sp = sp + 1&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;p[t[i]] = -1&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;new &lt;code class=&quot;highlighter-rouge&quot;&gt;i = i + m&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;new &lt;code class=&quot;highlighter-rouge&quot;&gt;j = m - 1&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;new &lt;code class=&quot;highlighter-rouge&quot;&gt;sp = sp + j + 1&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;BM &lt;a href=&quot;#bm&quot;&gt;implementation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BM complexity:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;worst case O(mn)&lt;/li&gt;
  &lt;li&gt;search for &lt;code class=&quot;highlighter-rouge&quot;&gt;s = ab...aa&lt;/code&gt; of length &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;t = aa...aaaa..aa&lt;/code&gt; of length &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;m - 1&lt;/code&gt; char comparisons needed at each &lt;code class=&quot;highlighter-rouge&quot;&gt;n - (m + 1)&lt;/code&gt; positions in text&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;section_4&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;graphs-and-graph-algorithms&quot;&gt;Graphs and graph algorithms&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#graph_basics_topic&quot;&gt;Graph basics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#graph_representations_topic&quot;&gt;Graph representations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#graph_search_topic&quot;&gt;Searching and traversal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#graph_weight_topic&quot;&gt;Weighted graphs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#topological_topic&quot;&gt;Topological ordering&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;graph_basics_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;graph-basics&quot;&gt;Graph basics&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;Undirected graphs:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;G = (V,E)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;each vertex is a point&lt;/li&gt;
  &lt;li&gt;each edge is a line joining a pair of vertices&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Connected:&lt;/strong&gt; every vertex pair is joined by a path&lt;br /&gt;
   &lt;strong&gt;Non-connected:&lt;/strong&gt; graph has 2+ connected components&lt;br /&gt;
   &lt;strong&gt;Tree:&lt;/strong&gt; connected and acyclic (no cycles)&lt;br /&gt;
   &lt;strong&gt;Forest:&lt;/strong&gt; acyclic and components are trees&lt;br /&gt;
   &lt;strong&gt;Complete (clique):&lt;/strong&gt; every vertex pair is joined by an edge&lt;br /&gt;
   &lt;strong&gt;Bipartite:&lt;/strong&gt; vertices are in two dijoint sets &lt;code class=&quot;highlighter-rouge&quot;&gt;U&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;W&lt;/code&gt; and &lt;strong&gt;every&lt;/strong&gt; edge joins a vertex in &lt;code class=&quot;highlighter-rouge&quot;&gt;U&lt;/code&gt; to one in &lt;code class=&quot;highlighter-rouge&quot;&gt;W&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/undirected_1.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For the graphs above:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;adjacent - &lt;code class=&quot;highlighter-rouge&quot;&gt;{ a,z } Î E&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;non-adjacent - &lt;code class=&quot;highlighter-rouge&quot;&gt;{ a,b } ∉ E&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; is &lt;strong&gt;incident to&lt;/strong&gt; edge &lt;code class=&quot;highlighter-rouge&quot;&gt;{ a,z }&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a, x, b, y, c&lt;/code&gt; is a path of length 4&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a, x, b, y, a&lt;/code&gt; is a cycle of length 4&lt;/li&gt;
  &lt;li&gt;all vertices have &lt;strong&gt;degree&lt;/strong&gt; 3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Directed graphs (digraphs):&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;D = (V,E)&lt;/code&gt; where &lt;code class=&quot;highlighter-rouge&quot;&gt;V&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;E&lt;/code&gt; are &lt;strong&gt;finite&lt;/strong&gt; sets&lt;/li&gt;
  &lt;li&gt;edges are ordered pairs&lt;/li&gt;
  &lt;li&gt;drawn as arrows&lt;/li&gt;
  &lt;li&gt;vertices have &lt;strong&gt;in-degrees&lt;/strong&gt; and &lt;strong&gt;out-degrees&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;paths and cycles must follow edge directions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/directed_1.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the graph above:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;u&lt;/code&gt; is adjacent &lt;strong&gt;to&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt; is ajdacent &lt;strong&gt;from&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;u&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; has in-degree 2 and out-degree 1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;graph_representations_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;graph-representations&quot;&gt;Graph representations&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;Representing the undirected graph G:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/undirected_2.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Representing the directed graph D:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/directed_2.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Implementing adjaceny lists:&lt;/strong&gt;&lt;br /&gt;
   Define classes representing&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;an entry of adjacency lists&lt;/li&gt;
  &lt;li&gt;a vertex (with a linked list representing its adjacency list)&lt;/li&gt;
  &lt;li&gt;a graph (with a size and an array of vertices)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Java &lt;a href=&quot;#adjacency_list&quot;&gt;implementation&lt;/a&gt; of an adjacency list&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;graph_search_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;graph-searching-and-traversal-algorithms&quot;&gt;Graph searching and traversal algorithms&lt;/h5&gt;

&lt;p&gt;Graph traversal is efficient if it visits all vertices of the graph in &lt;code class=&quot;highlighter-rouge&quot;&gt;O( |V| + |E| )&lt;/code&gt; time (by travelling along edges)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Depth-first search:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;follow a path of unvisited vertices until path can be extended no further&lt;/li&gt;
  &lt;li&gt;backtrack until an unvisited vertex is reached&lt;/li&gt;
  &lt;li&gt;repeat until there are no unvisited vertices (in all components of graph)&lt;/li&gt;
  &lt;li&gt;edges used form a &lt;strong&gt;depth-first spanning tree&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Represent it as:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;explicit stack&lt;/li&gt;
  &lt;li&gt;containing vertices on the path to the current vertex&lt;/li&gt;
  &lt;li&gt;popping corresponds to backtracking&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;DFS example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/dfs_1.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;DFS &lt;a href=&quot;#dfs&quot;&gt;implementation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DFS complexity:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;each vertex is visited ( &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; )&lt;/li&gt;
  &lt;li&gt;each element in adj. list is processed ( &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; )&lt;/li&gt;
  &lt;li&gt;O(n + m)&lt;/li&gt;
  &lt;li&gt;can adapt to adj. matrix representation, but this increases complexity to O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Applications of DFS:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;determine if graph is connected and/or identify its connected components&lt;/li&gt;
  &lt;li&gt;determine if a graph is bipartite&lt;/li&gt;
  &lt;li&gt;determine if a graph contains a cycle&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Breadth-first search:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;visit all adjacent vertices of current vertex (processing)&lt;/li&gt;
  &lt;li&gt;vertices processed in the order in which they are visited (queue)&lt;/li&gt;
  &lt;li&gt;continue until all vertices in current component have been processed&lt;/li&gt;
  &lt;li&gt;edges used form a &lt;strong&gt;breadth-first spanning tree&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Represent it as:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;queue&lt;/li&gt;
  &lt;li&gt;visited vertices are added&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;BFS example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/bfs_1.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;BFS &lt;a href=&quot;#bfs&quot;&gt;implementation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BFS complexity:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;each vertex visited and queued exactly once&lt;/li&gt;
  &lt;li&gt;each adj. list traversed once&lt;/li&gt;
  &lt;li&gt;O(n + m)&lt;/li&gt;
  &lt;li&gt;can adapt to adj. matrix as with DFS, but also O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Applications of BFS:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;finding distance between two vertices&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Distance between two vertices:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;assign distance &lt;code class=&quot;highlighter-rouge&quot;&gt;v = 0&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;carry out BFS from &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;when visiting a new vertex
    &lt;ul&gt;
      &lt;li&gt;assign its distance to be &lt;code class=&quot;highlighter-rouge&quot;&gt;1 + distance to its predecessor&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/bfs_2.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;graph_weight_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;weighted-graphs&quot;&gt;Weighted graphs&lt;/h5&gt;

&lt;p&gt;Each edge &lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt; has an integer weight given by &lt;code class=&quot;highlighter-rouge&quot;&gt;wt( e ) &amp;gt; 0&lt;/code&gt; (undirected or directed)&lt;br /&gt;
   Can represent weighted graphs using adj. lists and matrices as before&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/weighted_1.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/weighted_2.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dijkstra’s algorithm:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;finds shortest path from one vertex &lt;code class=&quot;highlighter-rouge&quot;&gt;u&lt;/code&gt; to all other vertices&lt;/li&gt;
  &lt;li&gt;maintains a set containing all vertices for which shortest path from &lt;code class=&quot;highlighter-rouge&quot;&gt;u&lt;/code&gt; is currently known&lt;/li&gt;
  &lt;li&gt;each vertex &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt; not in the set has a label &lt;code class=&quot;highlighter-rouge&quot;&gt;d(v)&lt;/code&gt; = length of a shortest path from &lt;code class=&quot;highlighter-rouge&quot;&gt;u -&amp;gt; v&lt;/code&gt; passing &lt;strong&gt;only&lt;/strong&gt; through vertices in the set&lt;/li&gt;
  &lt;li&gt;after adding &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt; to the set, carry out &lt;strong&gt;edge relaxation&lt;/strong&gt; (updating distance &lt;code class=&quot;highlighter-rouge&quot;&gt;d(w)&lt;/code&gt; for all vertices &lt;code class=&quot;highlighter-rouge&quot;&gt;w&lt;/code&gt; still not in the set)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Edge relaxation:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;suppose &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;w&lt;/code&gt; are not in &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt;, then we know
    &lt;ul&gt;
      &lt;li&gt;the shortest path from &lt;code class=&quot;highlighter-rouge&quot;&gt;u -&amp;gt; v&lt;/code&gt; passing only through &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;d(v)&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;the shortest path from &lt;code class=&quot;highlighter-rouge&quot;&gt;u -&amp;gt; w&lt;/code&gt; passing only through &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;d(w)&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;suppose &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt; is added to &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; and the edge &lt;code class=&quot;highlighter-rouge&quot;&gt;e = { v,w }&lt;/code&gt; has weight &lt;code class=&quot;highlighter-rouge&quot;&gt;wt( e )&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;calculate the shortest path &lt;code class=&quot;highlighter-rouge&quot;&gt;u -&amp;gt; w&lt;/code&gt; passing only through &lt;code class=&quot;highlighter-rouge&quot;&gt;S ∪ { v }&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/dijkstra_1.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is either:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the original path through &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; of length &lt;code class=&quot;highlighter-rouge&quot;&gt;d(w)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;the path combining edge &lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt; and shortest path &lt;code class=&quot;highlighter-rouge&quot;&gt;v -&amp;gt; u&lt;/code&gt; with length &lt;code class=&quot;highlighter-rouge&quot;&gt;wt( e ) + d(v)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Therefore, the distance is: &lt;br /&gt;
   &lt;code class=&quot;highlighter-rouge&quot;&gt;d(w) = min{ d(w), d(v) + wt( e ) }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Dijkstra’s algorithm &lt;a href=&quot;#dijkstra&quot;&gt;implementation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dijkstra complexity:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;with &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; vertices and &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; edges, using an &lt;strong&gt;unordered array&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;O(n) to initialise distances&lt;/li&gt;
      &lt;li&gt;O(n&lt;sup&gt;2&lt;/sup&gt;) to find minimum&lt;/li&gt;
      &lt;li&gt;O(m) for relaxation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;hence, O(n&lt;sup&gt;2&lt;/sup&gt;) overall&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;with &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; vertices and &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; edges, using a &lt;strong&gt;heap&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;O(n) to initialise distances and create heap&lt;/li&gt;
      &lt;li&gt;O(n log n) to find minimum&lt;/li&gt;
      &lt;li&gt;O(m log n) for relaxation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;hence, O(m log n) overall (more edges than vertices)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Dijkstra example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/dijkstra_2.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spanning tree:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;subgraph which is both a tree and spans every vertex&lt;/li&gt;
  &lt;li&gt;obtained from a connected graph by &lt;strong&gt;deleting edges&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;its weight = sum of weights of its edges&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For a weighted connected undirected graph, find a &lt;strong&gt;minimum weight spanning tree&lt;/strong&gt; (represents the cheapest way of interconnecting the vertices)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/spanning_tree.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Minimum weight spanning tree problem:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is an example of a &lt;strong&gt;greedy&lt;/strong&gt; algorithm&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;makes a sequence of decisions based on &lt;strong&gt;local optimality&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;ends up with the &lt;strong&gt;globally optimal&lt;/strong&gt; solution&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Prim-Jarnik algorithm:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;minimum spanning tree contructed by choosing a sequence of edges&lt;/li&gt;
  &lt;li&gt;initialisation is O(n) (where &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; is number of vertices)&lt;/li&gt;
  &lt;li&gt;outer loop executed &lt;code class=&quot;highlighter-rouge&quot;&gt;n - 1&lt;/code&gt; times&lt;/li&gt;
  &lt;li&gt;inner loop checks all edges from a tree-vertex to a non-tree vertex, of which there can be O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/li&gt;
  &lt;li&gt;overall, alg. is O(n&lt;sup&gt;3&lt;/sup&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Prim-Jarnik algorithm &lt;a href=&quot;#prim_jarnik&quot;&gt;pseudocode&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Prim-Jarnik example&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/prim_jarnik.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Prim-Jarnik proof of correctness will &lt;strong&gt;not&lt;/strong&gt; be part of the exam, so it is omitted here.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dijkstra’s refinement:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Introduce attribute &lt;code class=&quot;highlighter-rouge&quot;&gt;bestTV&lt;/code&gt; for each non-tree vertex &lt;code class=&quot;highlighter-rouge&quot;&gt;q&lt;/code&gt;&lt;br /&gt;
   This is the best tree vertex &lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt; for which &lt;code class=&quot;highlighter-rouge&quot;&gt;wt( {p, q} )&lt;/code&gt; is minimised&lt;br /&gt;
   &lt;a href=&quot;#dijkstra_refinement&quot;&gt;Pseudocode&lt;/a&gt; for this concept&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;initialisation is O(n)&lt;/li&gt;
  &lt;li&gt;while loop executed &lt;code class=&quot;highlighter-rouge&quot;&gt;n - 1&lt;/code&gt; time&lt;/li&gt;
  &lt;li&gt;O(n) to find minimal ntv&lt;/li&gt;
  &lt;li&gt;O(1) to adjoin and update&lt;/li&gt;
  &lt;li&gt;overall alg. is O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;topological_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;topological-ordering&quot;&gt;Topological ordering&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;Directed Acyclic Graphs:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;topological order&lt;/strong&gt; on a DAG is a labelling of the vertices &lt;code class=&quot;highlighter-rouge&quot;&gt;1, ..., n&lt;/code&gt; such that &lt;code class=&quot;highlighter-rouge&quot;&gt;(u, v) Î E&lt;/code&gt; implies &lt;code class=&quot;highlighter-rouge&quot;&gt;label(u) &amp;lt; label(v)&lt;/code&gt;&lt;br /&gt;
   A directed graph D has a topological order if and only if D is a DAG&lt;br /&gt;
   A &lt;strong&gt;source&lt;/strong&gt; is a vertex of in-degree 0 and a &lt;strong&gt;sink&lt;/strong&gt; has out-degree 0&lt;br /&gt;
   &lt;strong&gt;A DAG has at least one souce and at least one sink&lt;/strong&gt;, which forms the basis of a topological ordering alg.&lt;/p&gt;

&lt;p&gt;Topological ordering of DAG &lt;code class=&quot;highlighter-rouge&quot;&gt;D&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/dag.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Topological ordering alg. &lt;a href=&quot;#topological_ordering&quot;&gt;implementation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TOA correctness:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A vertex is given a label only when the number of incoming edges from unlabelled vertices is 0&lt;br /&gt;
   For &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; vertices, &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; edges:&lt;/p&gt;

&lt;p&gt;Adj. matrix representation involves&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;finding in-degree of each vertex, by scanning each column - O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/li&gt;
  &lt;li&gt;main loop executed &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; times for each row - O(n)&lt;/li&gt;
  &lt;li&gt;overall alg. is O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adj. list representation involves&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;finding in-degree of each vertex, by scanning the list - O(n + m)&lt;/li&gt;
  &lt;li&gt;main loop executed &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; times for each list&lt;/li&gt;
  &lt;li&gt;overall alg. is O(n + m)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Deadlock detection:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Methods to detect whether a digraph contains a cycle&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;adaptation of topological ordering alg.
    &lt;ul&gt;
      &lt;li&gt;if source list becomes empty before all vertices are labelled, there must be a cycle&lt;/li&gt;
      &lt;li&gt;if all vertices can be labelled, the digraph is acyclic&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;adaptation of DFS
    &lt;ul&gt;
      &lt;li&gt;when a vertex is visited, check where there is an edge from it to another vertex which is on the current path from the current starting vertex&lt;/li&gt;
      &lt;li&gt;the existence of such a vertex indicates a cycle&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a name=&quot;section_5&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;np-completeness&quot;&gt;NP Completeness&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#np_intro_topic&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#np_complete_topic&quot;&gt;NP-complete problems&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#classes_topic&quot;&gt;The classes P and NP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#poly_time_topic&quot;&gt;Polynomial-time reductions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#np_def_topic&quot;&gt;Formal def. of NP-completeness&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#prove_np_topic&quot;&gt;How to prove a problem is NP-complete&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;np_intro_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;introduction-1&quot;&gt;Introduction&lt;/h5&gt;

&lt;p&gt;We have seen algorithms for a wide range of problems, all of which are polynomial-time: their worst cast complexity is O(n&lt;sup&gt;c&lt;/sup&gt;) for some constant &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Recall the Eulerian cycle problem: whether a graph has a cycle that traverses each &lt;strong&gt;edge&lt;/strong&gt; exactly once&lt;br /&gt;
   Theorem: A connected undirected graph has an Eulerian cycle if and only if each vertex has even degree&lt;br /&gt;
   Therefore we can test and find such a cycle in a graph &lt;code class=&quot;highlighter-rouge&quot;&gt;G&lt;/code&gt; in&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;O(n&lt;sup&gt;2&lt;/sup&gt;) time if &lt;code class=&quot;highlighter-rouge&quot;&gt;G&lt;/code&gt; is represented with an adj. matrix&lt;/li&gt;
  &lt;li&gt;O(m + n) if it is represented with an adj. list (&lt;code class=&quot;highlighter-rouge&quot;&gt;m = |E|&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;n = |V|&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Recall the Hamiltonian cycle problem: whether a graph has a cycle that traverses each &lt;strong&gt;vertex&lt;/strong&gt; exactly once&lt;br /&gt;
   It is similar to the Eulerian cycle problem, but a polynomial-time algorithm has &lt;strong&gt;not&lt;/strong&gt; been found to solve it&lt;br /&gt;
   Its complexity is O(n&lt;sup&gt;2&lt;/sup&gt; * n!) in the worst case&lt;br /&gt;
   No polynomial-time algorithm has been found to solve this&lt;br /&gt;
   Therefore this problem is &lt;strong&gt;NP-complete&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;this is exponential (no better than O(b&lt;sup&gt;n&lt;/sup&gt;) for some &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;and cannot be expressed as O(n&lt;sup&gt;c&lt;/sup&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Polynomial vs exponential:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/poly_vs_exp.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Similar behaviour emerges in terms of computing power&lt;br /&gt;
   Basically, a thousand-fold increase in computing power would only add &lt;code class=&quot;highlighter-rouge&quot;&gt;6&lt;/code&gt; to the size of the largest problem instance solvable in &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; hour, for an algorithm of 3&lt;sup&gt;n&lt;/sup&gt; complexity&lt;/p&gt;

&lt;p&gt;A problem is &lt;strong&gt;polynomial-time solvable&lt;/strong&gt; if it admits a polynomial-time algorithm&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;np_complete_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;np-completeness-1&quot;&gt;NP-completeness&lt;/h5&gt;

&lt;p&gt;No polynomial-time algorithm is known for an NP-complete problem&lt;br /&gt;
   &lt;strong&gt;However&lt;/strong&gt;, if one of them is solvable, then they all are&lt;/p&gt;

&lt;p&gt;No proof of intractability is known for an NP-complete problem&lt;br /&gt;
   &lt;strong&gt;However&lt;/strong&gt;, if one of them is intractable, then they all are&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Causes of intractability:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;polynomial time is not sufficient in order to discover a solution
    &lt;ul&gt;
      &lt;li&gt;there are intractability proofs for this&lt;/li&gt;
      &lt;li&gt;some problems are &lt;strong&gt;undecidable&lt;/strong&gt; (no alg. could solve them)&lt;/li&gt;
      &lt;li&gt;some decidable problems have been shown to be intractable&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;solution itself is so large that exp. time is needed to output it
    &lt;ul&gt;
      &lt;li&gt;eg problems of generating all cycles for a given graph&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Roadblock:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;two players A and B&lt;/li&gt;
  &lt;li&gt;network of roads, with intersections&lt;/li&gt;
  &lt;li&gt;each road is coloured black, blue or green&lt;/li&gt;
  &lt;li&gt;some intersections are marked “A wins” or “B wins”&lt;/li&gt;
  &lt;li&gt;a player has a fleet of cars located at intersections (one car per intersection)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Player A begins, and then they take turns to&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;move a car of theirs on one or more roads of the same colour&lt;/li&gt;
  &lt;li&gt;a car may not overlap an intersection which already has a car&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The problem is deciding, for a given starting configuration, whether A can win, regardless of what moves B takes&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/roadblock.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So, &lt;code class=&quot;highlighter-rouge&quot;&gt;NP-complete problems&lt;/code&gt; must be &lt;strong&gt;equal&lt;/strong&gt; to one of: &lt;code class=&quot;highlighter-rouge&quot;&gt;Polynomial-time solvable problems&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Intractable problems&lt;/code&gt;, and &lt;strong&gt;not equal&lt;/strong&gt; to the other&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problems:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A problem is characterised by unspecified parameters&lt;br /&gt;
   A problem instance is created by giving these parameters values&lt;br /&gt;
   An example of a decision problem is the Hamiltonian cycle:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the answer is a “yes” or “no”&lt;/li&gt;
  &lt;li&gt;its instance if a graph &lt;code class=&quot;highlighter-rouge&quot;&gt;G&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;every instance is either a “yes”-instance or a “no”-instance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Other NP-complete problems:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Travelling Salesman Decision Problem&lt;br /&gt;
   Instance: a set of &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; cities and integer distance &lt;code class=&quot;highlighter-rouge&quot;&gt;d(i, j)&lt;/code&gt; between each pair of cities &lt;code class=&quot;highlighter-rouge&quot;&gt;i, j&lt;/code&gt; and a target integer &lt;code class=&quot;highlighter-rouge&quot;&gt;K&lt;/code&gt;&lt;br /&gt;
   Question: is there a permutation &lt;code class=&quot;highlighter-rouge&quot;&gt;P1P2...Pn-1Pn&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;1, 2,..., n&lt;/code&gt; such that &lt;code class=&quot;highlighter-rouge&quot;&gt;d(P1, P2) + d(P2, P3) + ... + d(Pn-1, Pn) + d(Pn, P1) &amp;lt;= K&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Clique Problem&lt;br /&gt;
   Instance: a graph &lt;code class=&quot;highlighter-rouge&quot;&gt;G&lt;/code&gt; and target integer &lt;code class=&quot;highlighter-rouge&quot;&gt;K&lt;/code&gt;&lt;br /&gt;
   Question: does &lt;code class=&quot;highlighter-rouge&quot;&gt;G&lt;/code&gt; contain a clique of size &lt;code class=&quot;highlighter-rouge&quot;&gt;K&lt;/code&gt;? (a set of &lt;code class=&quot;highlighter-rouge&quot;&gt;K&lt;/code&gt; verices for which there is an edge between all pairs&lt;/p&gt;

&lt;p&gt;Graph Colouring Problem&lt;br /&gt;
   Instance: a graph &lt;code class=&quot;highlighter-rouge&quot;&gt;G&lt;/code&gt; and target integer &lt;code class=&quot;highlighter-rouge&quot;&gt;K&lt;/code&gt;&lt;br /&gt;
   Question: can one of &lt;code class=&quot;highlighter-rouge&quot;&gt;K&lt;/code&gt; colours be attached to each vertex of &lt;code class=&quot;highlighter-rouge&quot;&gt;G&lt;/code&gt; so that adjacent vertices always have different colours?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/graph_colouring.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Satisfiability&lt;br /&gt;
   Instance: boolean expression &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; in &lt;strong&gt;conjunctive normal form&lt;/strong&gt;&lt;br /&gt;
   CNF: &lt;code class=&quot;highlighter-rouge&quot;&gt;C1 ∧ C2 ∧ ... ∧ Cn&lt;/code&gt; where each &lt;code class=&quot;highlighter-rouge&quot;&gt;Ci&lt;/code&gt; is a &lt;strong&gt;clause&lt;/strong&gt;&lt;br /&gt;
   Clause &lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;L1 ∨ L2 ∨ ... ∨ Lm&lt;/code&gt; where each &lt;code class=&quot;highlighter-rouge&quot;&gt;Lj&lt;/code&gt; is a &lt;strong&gt;literal&lt;/strong&gt;&lt;br /&gt;
   Literal &lt;code class=&quot;highlighter-rouge&quot;&gt;L&lt;/code&gt;: a variable &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; or its negation &lt;code class=&quot;highlighter-rouge&quot;&gt;¬x&lt;/code&gt;&lt;br /&gt;
   Question: is &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; satisfiable? (can values be assigned to the variables that make &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; true?)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/satisfiability.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;NP-completeness deals primarily with decision problems&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;corresponding to each instance of an optimisation or search problem&lt;/li&gt;
  &lt;li&gt;there is a family of instances of a decision problem obtainable by setting “target” values&lt;/li&gt;
  &lt;li&gt;an optimisation or search problem can be solved in poly. time if and only if the corresponding decision problem can&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;classes_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;the-classes-p-and-np&quot;&gt;The classes P and NP&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;P:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the class of all decision problems that can be solved in poly. time&lt;/li&gt;
  &lt;li&gt;often extended to include search and optimisation problems&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;NP:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the class of decision problems solvable in &lt;strong&gt;non-deterministic&lt;/strong&gt; polynomial time (a non-deterministic alg. can make non-deterministic choices, and hence is more powerful than a deterministic alg.)&lt;/li&gt;
  &lt;li&gt;P is contained within NP&lt;/li&gt;
  &lt;li&gt;there is no problem known to be in NP and known not to be in P&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;P vs NP:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A decision problem is NP if every “yes”-instance has a &lt;strong&gt;short certificate&lt;/strong&gt;&lt;br /&gt;
   i.e. a structure that can be used to verify, in polynomial time, that it is a “yes”-instance&lt;br /&gt;
   No corresponding claim is made for “no”-instances&lt;/p&gt;

&lt;p&gt;It is immediate that &lt;code class=&quot;highlighter-rouge&quot;&gt;P ⊆ NP&lt;/code&gt;, but whether &lt;code class=&quot;highlighter-rouge&quot;&gt;P = NP&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;P ⊂ NP&lt;/code&gt; is unknown&lt;br /&gt;
   Most believe that &lt;code class=&quot;highlighter-rouge&quot;&gt;P ≠ NP&lt;/code&gt;&lt;br /&gt;
   But if so, there are problems that must lie in NP and not in P, and these are the NP-complete problems (the hardest, eg HC, TSDP, Graph Colouring etc)&lt;br /&gt;
   A poly. time alg. for any of these would imply that they are &lt;strong&gt;all&lt;/strong&gt; in P&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Non-deterministic algorithms:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;has an extra operation: non-deterministic choice&lt;/li&gt;
  &lt;li&gt;has many possible executions depending on values returned from the choice&lt;/li&gt;
  &lt;li&gt;it solves a decision problem &lt;code class=&quot;highlighter-rouge&quot;&gt;Π&lt;/code&gt; if
    &lt;ul&gt;
      &lt;li&gt;for a “yes”-instance &lt;code class=&quot;highlighter-rouge&quot;&gt;I&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;Π&lt;/code&gt; there is &lt;strong&gt;some&lt;/strong&gt; execution that returns “yes”&lt;/li&gt;
      &lt;li&gt;for a “no”-instance &lt;code class=&quot;highlighter-rouge&quot;&gt;I&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;Π&lt;/code&gt; there is &lt;strong&gt;no&lt;/strong&gt; execution that returns “yes”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;and solves a decision problem &lt;code class=&quot;highlighter-rouge&quot;&gt;Π&lt;/code&gt; in poly. time if
    &lt;ul&gt;
      &lt;li&gt;for every “yes”-instance &lt;code class=&quot;highlighter-rouge&quot;&gt;I&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;Π&lt;/code&gt; there is &lt;strong&gt;some&lt;/strong&gt; execution &lt;code class=&quot;highlighter-rouge&quot;&gt;E&lt;/code&gt; that returns “yes”, which uses a number of steps bounded by a polynomial in the input&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A non-deterministic alg. can be viewed as&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a guessing stage (non-deterministic)&lt;/li&gt;
  &lt;li&gt;a checking stage (deterministic and poly. time)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Start —&amp;gt; guess a “certificate” —&amp;gt; verify the certificate —&amp;gt; Stop&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#non_deterministic&quot;&gt;Example&lt;/a&gt; of a non-deterministic alg.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;poly_time_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;polynomial-time-reductions&quot;&gt;Polynomial-time reductions&lt;/h5&gt;

&lt;p&gt;A mapping &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; from a decision problem &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1&lt;/code&gt; to a decision problem &lt;code class=&quot;highlighter-rouge&quot;&gt;Π2&lt;/code&gt; such that&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;for every instance &lt;code class=&quot;highlighter-rouge&quot;&gt;I1&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1&lt;/code&gt; we have
    &lt;ul&gt;
      &lt;li&gt;the instance &lt;code class=&quot;highlighter-rouge&quot;&gt;f(I1)&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;Π2&lt;/code&gt; can be contructed in poly. time&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;f(I1)&lt;/code&gt; is a “yes”-instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;Π2&lt;/code&gt; if and only if &lt;code class=&quot;highlighter-rouge&quot;&gt;I1&lt;/code&gt; is a “yes”-instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;we write &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1 ∝ Π2&lt;/code&gt; as an abbreviation for: there is a polynomial-time reduction from &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Π2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Properties of polynomial-time reductions:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Transitivity: &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1 ∝ Π2&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Π2 ∝ Π3&lt;/code&gt; implies that &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1 ∝ Π3&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Since &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1 ∝ Π2&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Π2 ∝ Π3&lt;/code&gt; we have&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a PTR &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Π2&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;a PTR &lt;code class=&quot;highlighter-rouge&quot;&gt;g&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;Π2&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Π3&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For any instance &lt;code class=&quot;highlighter-rouge&quot;&gt;I1&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1&lt;/code&gt;, since &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; is a PTR, we have&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;I2 = f( I1 )&lt;/code&gt; is an instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;Π2&lt;/code&gt; that can be constructed in poly. time&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;I2&lt;/code&gt; has the same answer as &lt;code class=&quot;highlighter-rouge&quot;&gt;I1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since &lt;code class=&quot;highlighter-rouge&quot;&gt;g&lt;/code&gt; is a PTR, we have&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;I3 = g( I2 )&lt;/code&gt; is an instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;Π3&lt;/code&gt; that can be constructed in poly. time&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;I3&lt;/code&gt; has the same answer as &lt;code class=&quot;highlighter-rouge&quot;&gt;I2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Putting the results together, for any instance &lt;code class=&quot;highlighter-rouge&quot;&gt;I1&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;I3 = g( f( I1 ) )&lt;/code&gt; is an instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;Π3&lt;/code&gt; constructed in poly. time&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;I3&lt;/code&gt; has the same answer as &lt;code class=&quot;highlighter-rouge&quot;&gt;I1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;ie the composition of &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;g&lt;/code&gt; is a PTR from &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Π3&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Π1 ∝ Π2&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Π2 Î P&lt;/code&gt; implies that &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1 Î P&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;to solve an instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1&lt;/code&gt;, reduce it to an instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;Π2&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Π1 ∝ Π2&lt;/code&gt; means that &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1&lt;/code&gt; is no harder than &lt;code class=&quot;highlighter-rouge&quot;&gt;Π2&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;i.e. if we can solve &lt;code class=&quot;highlighter-rouge&quot;&gt;Π2&lt;/code&gt;, then we can solve &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1&lt;/code&gt; without much more effort&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, reducing the Hamiltonian cycle problem to the travelling salesman problem:&lt;br /&gt;
   HC instance: a graph G&lt;br /&gt;
   HC question: does G contain a cycle that visits each vertex exactly once?&lt;/p&gt;

&lt;p&gt;TSDP instance: a set of &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; cities and integer distance &lt;code class=&quot;highlighter-rouge&quot;&gt;d(i, j)&lt;/code&gt; between each pair of cities &lt;code class=&quot;highlighter-rouge&quot;&gt;i, j&lt;/code&gt; and a target integer &lt;code class=&quot;highlighter-rouge&quot;&gt;K&lt;/code&gt;&lt;br /&gt;
   TSDP question: is there a permutation &lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;{1, 2,..., n}&lt;/code&gt; such that &lt;code class=&quot;highlighter-rouge&quot;&gt;d(P1, P2) + d(P2, P3) + ... + d(Pn-1, Pn) + d(Pn, P1) &amp;lt;= K&lt;/code&gt;?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;G = (V, E)&lt;/code&gt; is an instance of HC&lt;/li&gt;
  &lt;li&gt;construct TSP &lt;code class=&quot;highlighter-rouge&quot;&gt;f(G)&lt;/code&gt; where
    &lt;ul&gt;
      &lt;li&gt;cities = &lt;code class=&quot;highlighter-rouge&quot;&gt;V&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;d(u, v) = 1&lt;/code&gt; if &lt;code class=&quot;highlighter-rouge&quot;&gt;{u, v} Î E&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; otherwise&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;K = |V|&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;f(G)&lt;/code&gt; can be constructed in poly. time&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;f(G)&lt;/code&gt; has a tour of length &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;= |V|&lt;/code&gt; if and only if &lt;code class=&quot;highlighter-rouge&quot;&gt;G&lt;/code&gt; has a Hamiltonian cycle (cannot take any of the edges with weight 2)&lt;/li&gt;
  &lt;li&gt;therefore &lt;code class=&quot;highlighter-rouge&quot;&gt;TSDP Î P&lt;/code&gt; implies that &lt;code class=&quot;highlighter-rouge&quot;&gt;HC Î P&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;equivalently &lt;code class=&quot;highlighter-rouge&quot;&gt;HC Ï P&lt;/code&gt;implies that &lt;code class=&quot;highlighter-rouge&quot;&gt;TSDP Ï P&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/hc_to_tsdp.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;np_def_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;definition&quot;&gt;Definition&lt;/h5&gt;

&lt;p&gt;A decision problem &lt;code class=&quot;highlighter-rouge&quot;&gt;Π&lt;/code&gt; is NP-complete if&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Π Î NP&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Π’&lt;/code&gt; is polynomial-time reducable to &lt;code class=&quot;highlighter-rouge&quot;&gt;Π&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;Π’∝Π&lt;/code&gt; for every problem &lt;code class=&quot;highlighter-rouge&quot;&gt;Π’&lt;/code&gt; in NP)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So if &lt;code class=&quot;highlighter-rouge&quot;&gt;Π&lt;/code&gt; is NP-complete and &lt;code class=&quot;highlighter-rouge&quot;&gt;Π Î P&lt;/code&gt; then P = NP&lt;br /&gt;
   Every problem in NP can be solved in polynomial time by reduction to &lt;code class=&quot;highlighter-rouge&quot;&gt;Π&lt;/code&gt;&lt;br /&gt;
   Supposing P ≠ NP, if &lt;code class=&quot;highlighter-rouge&quot;&gt;Π&lt;/code&gt; is NP-complete, then &lt;code class=&quot;highlighter-rouge&quot;&gt;Π Ï P&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/np_structure.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;prove_np_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;proving-np-completeness&quot;&gt;Proving NP-completeness&lt;/h5&gt;

&lt;p&gt;It is not feasible to describe a reduction from &lt;strong&gt;every&lt;/strong&gt; problem in NP&lt;br /&gt;
   However, suppose we knew just one NP-complete problem &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To prove &lt;code class=&quot;highlighter-rouge&quot;&gt;Π2&lt;/code&gt; is NP-complete, it is enough to show&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Π2&lt;/code&gt; is in NP&lt;/li&gt;
  &lt;li&gt;there exists a polynomial-time reduction from &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Π2&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;Π1 ∝ Π2&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Correctness of the approach:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;for any &lt;code class=&quot;highlighter-rouge&quot;&gt;Π' Î NP&lt;/code&gt;, since &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1&lt;/code&gt; is NP-complete we have &lt;code class=&quot;highlighter-rouge&quot;&gt;Π' ∝ Π1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;since &lt;code class=&quot;highlighter-rouge&quot;&gt;Π' ∝ Π&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1 ∝ Π2&lt;/code&gt; and in is transitive, it follows that &lt;code class=&quot;highlighter-rouge&quot;&gt;Π' ∝ Π2&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;since &lt;code class=&quot;highlighter-rouge&quot;&gt;Π' Î NP&lt;/code&gt; was arbitrary, &lt;code class=&quot;highlighter-rouge&quot;&gt;Π' ∝ Π2&lt;/code&gt; for all &lt;code class=&quot;highlighter-rouge&quot;&gt;Π' Î NP&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;hence &lt;code class=&quot;highlighter-rouge&quot;&gt;Π2&lt;/code&gt; is NP-complete&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cook’s Theorem, where the Satisfiability (SAT) problem is NP-complete&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;proof consists of generic poly-time reduction to SAT from an abstract definition of a general problem in NP&lt;/li&gt;
  &lt;li&gt;generic reduction could be instantiated to give an actual reduction for each individual NP problem&lt;/li&gt;
  &lt;li&gt;given this theorem, to prove that problem P is NP-complete it is sufficient to show that
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Π&lt;/code&gt; is in NP&lt;/li&gt;
      &lt;li&gt;there exists a poly-time reduction from SAT to &lt;code class=&quot;highlighter-rouge&quot;&gt;Π&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Clique Problem:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Instance: graph G and target integer K&lt;br /&gt;
   Question: does G contain a clique of size K?&lt;br /&gt;
   Proving: show clique is in NP, and that there exists a poly-time reduction from SAT to &lt;code class=&quot;highlighter-rouge&quot;&gt;Π&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We need to show SAT ∝ Clique:&lt;br /&gt;
   Given an instance B of SAT we construct a &lt;code class=&quot;highlighter-rouge&quot;&gt;(G, K)&lt;/code&gt; instance of Clique&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;K number of clauses of B&lt;/li&gt;
  &lt;li&gt;vertices of G are pairs &lt;code class=&quot;highlighter-rouge&quot;&gt;(l, C)&lt;/code&gt; where &lt;code class=&quot;highlighter-rouge&quot;&gt;l&lt;/code&gt; is a literal clause of &lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;{(l, C), (m, D)}&lt;/code&gt; is an edge of G if and only if &lt;code class=&quot;highlighter-rouge&quot;&gt;l ≠ ¬m&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;C ≠ D&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;edge if distinct literals from different clauses can be satisfied simultaneously&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;poly-time construction O(n&lt;sup&gt;2&lt;/sup&gt;) (with &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; literals)&lt;/li&gt;
  &lt;li&gt;this is a poly-time reduction since B has a satisfying argument if and only if G has a clique of size K&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Proving it is a poly-time reduction:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;if B has a satisfying assignment then
    &lt;ul&gt;
      &lt;li&gt;if we choose a &lt;strong&gt;true&lt;/strong&gt; literal in each clause the corresponding vertices form a clique of size K in G&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;if G has a clique of size K then
    &lt;ul&gt;
      &lt;li&gt;assigning each literal associated with a vertex in the clique to be true yields a satisfying assignment for B&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following graph G has a clique of size 4 if and only if B has a satisfying assignment (which is a clique of size 4 here)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/clique.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;B = (x1 ∨ x2 ∨ ¬x3) ∧ (¬x1 ∨ x3 ∨ ¬x4) ∧ (¬x2 ∨ x4) ∧ (x2 ∨ ¬x3 ∨ x4)&lt;/code&gt;&lt;br /&gt;
   There are K = 4 clauses (bracket pairs)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problem restrictions:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A restriction consists of a subset of the instances of the original problem&lt;br /&gt;
  If a restriction of a given decision problem &lt;code class=&quot;highlighter-rouge&quot;&gt;Π&lt;/code&gt; is NP-complete, then so is &lt;code class=&quot;highlighter-rouge&quot;&gt;Π&lt;/code&gt;&lt;br /&gt;
  Given NP-complete &lt;code class=&quot;highlighter-rouge&quot;&gt;Π&lt;/code&gt;, a restriction of &lt;code class=&quot;highlighter-rouge&quot;&gt;Π&lt;/code&gt; &lt;strong&gt;might&lt;/strong&gt; be NP-complete&lt;/p&gt;

&lt;p&gt;eg a clique restricted to cubic graphs is in P, so a largest clique has size at most 4, so exhaustive search is O(n&lt;sup&gt;4&lt;/sup&gt;)&lt;/p&gt;

&lt;p&gt;K-colouring:&lt;br /&gt;
   Restriction of Graph Colouring for a fixed K number of colours&lt;br /&gt;
   2-colouring is in P, while 3-colouring is NP-complete&lt;/p&gt;

&lt;p&gt;K-SAT:&lt;br /&gt;
   Restriction of SAT in which every clause contains exactly K literals&lt;br /&gt;
   2-SAT is in P, while 3-SAT in NP-complete&lt;br /&gt;
   Showing 3-SAT Î NP is easy&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SAT ∝ 3-SAT:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Given instance B of SAT we will construct an instance B’ of 3-SAT&lt;br /&gt;
   For each clause Ci of B we construct a number of clauses of B’&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;if &lt;code class=&quot;highlighter-rouge&quot;&gt;C = l1&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;introduce 2 additional variables x1 and x2, and add the clauses &lt;code class=&quot;highlighter-rouge&quot;&gt;(l1 ∨ x1 ∨ x2), (l1 ∨ x1 ∨ ¬x2), (l1 ∨ ¬x1 ∨ x2), (l1 ∨ ¬x1 ∨ ¬x2)&lt;/code&gt; to B’&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;if &lt;code class=&quot;highlighter-rouge&quot;&gt;C = (l1 ∨ l2)&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;introduce 1 additional variable y and the clauses &lt;code class=&quot;highlighter-rouge&quot;&gt;(l1 ∨ l2 ∨ y) and (l1 ∨ l2 ∨ ¬y)&lt;/code&gt; to B’&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;if &lt;code class=&quot;highlighter-rouge&quot;&gt;C = (l1 ∨ l2 ∨ l3)&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;add the clause C to B’&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;if &lt;code class=&quot;highlighter-rouge&quot;&gt;C = (l1 ∨ ... ∨ lk)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;k &amp;gt; 3&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;introduce k - 3 additional variables z&lt;sub&gt;1&lt;/sub&gt;, …, z&lt;sub&gt;k-3&lt;/sub&gt;&lt;/li&gt;
      &lt;li&gt;add the clauses &lt;code class=&quot;highlighter-rouge&quot;&gt;(l1 ∨ l2 ∨ z1), (¬z1 ∨ l3 ∨ z2), (¬z2 ∨ l4 ∨ z3), ..., (¬zk-4 ∨ lk-2 ∨ zk-3), (¬zk-3 ∨ lk-1 ∨ lk)&lt;/code&gt; to B’&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Coping with NP-completeness:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Maybe only a restricted version is of interest (which may be in P)&lt;br /&gt;
   Seek an exponential-time alg. which improves on exhaustive search&lt;br /&gt;
   For an optimisation problem:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;settle for an approximation alg. that runs in poly-time&lt;/li&gt;
  &lt;li&gt;esp. if it gives a probably good result&lt;/li&gt;
  &lt;li&gt;use a heuristic&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For a decision problem:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;settle for a probabilistic alg. (correct answer with high probability)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;section_6&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;computability&quot;&gt;Computability&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#computability_intro&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#halting_topic&quot;&gt;The halting problem&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#computation_models_topic&quot;&gt;Models of computation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;computability_intro&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;introduction-2&quot;&gt;Introduction&lt;/h5&gt;

&lt;p&gt;A computer is:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;input x --&amp;gt; BLACK BOX --&amp;gt; output f(x)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The black box computes a function that maps an input to an output&lt;br /&gt;
   What functions can be computed? Alternatively, what problems can be solved?&lt;br /&gt;
   We need a definition of an algorithm if we view a computer as a device that can execute one&lt;/p&gt;

&lt;p&gt;Some problems cannot be solved by a computer, eg the Tiling problem&lt;br /&gt;
   A 1x1 square tile divided into 4 triangles by its diagonals with each triangle a given colour&lt;br /&gt;
   Each tile has a fixed orientation and no rotations are allowed&lt;br /&gt;
   Instance: a finite set &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; of tile descriptions&lt;br /&gt;
   Question: can any finite area, of any size, be completely covered using only tiles of types in &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt;, so that adjacent tile colours match?&lt;/p&gt;

&lt;p&gt;For example, tiling a 5x5 square:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/tiling_1.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Or extending to a larger region:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;overlap the top two rows with the bottom two rows (for an 8x5 tiled area)&lt;/li&gt;
  &lt;li&gt;place two of these 8x5’s side by side (with the right hand rectangle one row above the left hand rectangle)&lt;/li&gt;
  &lt;li&gt;and repeat this pattern to tile any finite area&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/tiling_2.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tiling a 10x10 square:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/tiling_3.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There is &lt;strong&gt;no&lt;/strong&gt; alg. for this problem&lt;br /&gt;
   For any alg. A that we might formulate, there is a set of tiles &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; for which either A doesn’t terminate or gives the wrong answer&lt;br /&gt;
   The problem is that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;“any size” means that we have to check all finite areas and there are infinitely many of these&lt;/li&gt;
  &lt;li&gt;for certain sets of tile descriptions that can tile any area, there is no “repeated pattern” we can use&lt;/li&gt;
  &lt;li&gt;would really have to be exhaustive&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Undecidable problems:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A problem &lt;code class=&quot;highlighter-rouge&quot;&gt;Π&lt;/code&gt; that admits no alg. is called &lt;strong&gt;non-computable&lt;/strong&gt; or &lt;strong&gt;unsolvable&lt;/strong&gt;&lt;br /&gt;
   If &lt;code class=&quot;highlighter-rouge&quot;&gt;Π&lt;/code&gt; is a decision problem and admits no alg., then it is called &lt;strong&gt;undecidable&lt;/strong&gt; (tiling problem is one)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Post’s correspondence problem:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A word is a finite string over some given finite alphabet&lt;br /&gt;
   Instance: two finite sequences of words &lt;code class=&quot;highlighter-rouge&quot;&gt;X1, ..., Xn&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Y1, ..., Yn&lt;/code&gt; (in the same alphabet)&lt;br /&gt;
   Question: does there exist a sequence &lt;code class=&quot;highlighter-rouge&quot;&gt;i1, i2, ..., ir&lt;/code&gt; of integers chosen from &lt;code class=&quot;highlighter-rouge&quot;&gt;{1, ..., n}&lt;/code&gt; such that &lt;code class=&quot;highlighter-rouge&quot;&gt;Xi1Xi2...Xir = Yi1Yi2...Yir&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;For &lt;code class=&quot;highlighter-rouge&quot;&gt;n = 5&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;X1 = abb, X2 = a, X3 = bab, X4 = baba, X5 = aba&lt;/li&gt;
  &lt;li&gt;Y1 = bbab, Y2 = aa, Y3 = ab, Y4 = aa, Y5 = a&lt;/li&gt;
  &lt;li&gt;correspondence given by sequence &lt;code class=&quot;highlighter-rouge&quot;&gt;2, 1, 1, 4, 1, 5&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;word constructed from Xi’s = aabbabbbabaabbaba&lt;/li&gt;
      &lt;li&gt;word constructed from Yi’s = aabbabbbabaabbaba&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;however, if we removed the first letter from X1 and Y1, then we could never get a correspondence&lt;/li&gt;
  &lt;li&gt;thus this problem is undecidable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;halting_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;the-halting-problem&quot;&gt;The halting problem&lt;/h5&gt;

&lt;p&gt;Instance: a legal Java program &lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt; and an input string &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt;&lt;br /&gt;
   Question: does &lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt; halt when run on &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt;?&lt;br /&gt;
   We will prove that no such program can exist, and that thus, the halting problem is undecidable&lt;/p&gt;

&lt;p&gt;The below program &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt; will terminate if and only if input &lt;code class=&quot;highlighter-rouge&quot;&gt;n ≠ 1&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	  &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With a word “erratic”, &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt; is called with &lt;code class=&quot;highlighter-rouge&quot;&gt;n = 7&lt;/code&gt; sequence of values:&lt;br /&gt;
   &lt;code class=&quot;highlighter-rouge&quot;&gt;22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1&lt;/code&gt;&lt;br /&gt;
   Then nobody knows whether “erratic” terminates for all values of &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Proof by contradiction that HP is undecidable:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Suppose we have alg. &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; that solves HP&lt;br /&gt;
   Let &lt;code class=&quot;highlighter-rouge&quot;&gt;Q&lt;/code&gt; be an implementation of this alg. as a Java method with &lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; parameters&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/halting_1.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Define a new program &lt;code class=&quot;highlighter-rouge&quot;&gt;P&lt;/code&gt; with a legal program &lt;code class=&quot;highlighter-rouge&quot;&gt;W&lt;/code&gt; as input&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/halting_2.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;P&lt;/code&gt; makes a copy of &lt;code class=&quot;highlighter-rouge&quot;&gt;W&lt;/code&gt; and calls &lt;code class=&quot;highlighter-rouge&quot;&gt;Q(W, W)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Q&lt;/code&gt; terminates by assumption&lt;/li&gt;
  &lt;li&gt;if it returns “yes”, &lt;code class=&quot;highlighter-rouge&quot;&gt;P&lt;/code&gt; enters an infinite loop&lt;/li&gt;
  &lt;li&gt;if it returns “no”, &lt;code class=&quot;highlighter-rouge&quot;&gt;P&lt;/code&gt; is terminated&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now let the input &lt;code class=&quot;highlighter-rouge&quot;&gt;W&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;P&lt;/code&gt; be the program &lt;code class=&quot;highlighter-rouge&quot;&gt;P&lt;/code&gt; itself&lt;br /&gt;
   Then &lt;code class=&quot;highlighter-rouge&quot;&gt;P&lt;/code&gt; would call &lt;code class=&quot;highlighter-rouge&quot;&gt;Q(P, P)&lt;/code&gt; (recall we assumed that &lt;code class=&quot;highlighter-rouge&quot;&gt;Q&lt;/code&gt; solves HP)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;if &lt;code class=&quot;highlighter-rouge&quot;&gt;Q&lt;/code&gt; returns “yes”, then by definition of &lt;code class=&quot;highlighter-rouge&quot;&gt;Q&lt;/code&gt; this means &lt;code class=&quot;highlighter-rouge&quot;&gt;P&lt;/code&gt; terminates&lt;/li&gt;
  &lt;li&gt;but this also means &lt;code class=&quot;highlighter-rouge&quot;&gt;P&lt;/code&gt; does not terminate (it enters into the loop)&lt;/li&gt;
  &lt;li&gt;this is a contradiction, therefore &lt;code class=&quot;highlighter-rouge&quot;&gt;Q&lt;/code&gt; must return “no”&lt;/li&gt;
  &lt;li&gt;and this means by definition of &lt;code class=&quot;highlighter-rouge&quot;&gt;Q&lt;/code&gt; that &lt;code class=&quot;highlighter-rouge&quot;&gt;P&lt;/code&gt; does no terminate&lt;/li&gt;
  &lt;li&gt;but it also means that &lt;code class=&quot;highlighter-rouge&quot;&gt;P&lt;/code&gt; does terminate&lt;/li&gt;
  &lt;li&gt;again, it is a contradiction&lt;/li&gt;
  &lt;li&gt;so if it can return neither reply, no such &lt;code class=&quot;highlighter-rouge&quot;&gt;Q&lt;/code&gt; can exist&lt;/li&gt;
  &lt;li&gt;therefore no alg. can solve HP&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Proving undecidabiltiy by reduction:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Suppose we can reduce any instance &lt;code class=&quot;highlighter-rouge&quot;&gt;I&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1&lt;/code&gt; into an instance &lt;code class=&quot;highlighter-rouge&quot;&gt;J&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;Π2&lt;/code&gt; such that &lt;code class=&quot;highlighter-rouge&quot;&gt;I&lt;/code&gt; has a “yes” answer for &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1&lt;/code&gt; if and only if &lt;code class=&quot;highlighter-rouge&quot;&gt;J&lt;/code&gt; has a “yes” answer for &lt;code class=&quot;highlighter-rouge&quot;&gt;Π2&lt;/code&gt; (no need for &lt;code class=&quot;highlighter-rouge&quot;&gt;J&lt;/code&gt; to be constructed in poly-time)&lt;br /&gt;
   If &lt;code class=&quot;highlighter-rouge&quot;&gt;Π1&lt;/code&gt; is undecidable and we can perform such a reduction, then &lt;code class=&quot;highlighter-rouge&quot;&gt;Π2&lt;/code&gt; is undecidable&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hierarchy of decision problems:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/decision_hierarchy.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;computation_models_topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;models-of-computation&quot;&gt;Models of computation&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;Deterministic finite-state automata (DFAs):&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;simple machines with limited memory&lt;/li&gt;
  &lt;li&gt;recognise input on a read-only tape&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consists of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a finite input alphabet &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;a finite set of states &lt;code class=&quot;highlighter-rouge&quot;&gt;Q&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;an initial state &lt;code class=&quot;highlighter-rouge&quot;&gt;q0 ∈ Q&lt;/code&gt; and set of &lt;strong&gt;accepting&lt;/strong&gt; states &lt;code class=&quot;highlighter-rouge&quot;&gt;F ⊆ Q&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;control/program or &lt;strong&gt;transition relation&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;T ⊆ (Q * A) * Q&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;((q, a), q') ∈ T&lt;/code&gt; means if in state &lt;code class=&quot;highlighter-rouge&quot;&gt;q&lt;/code&gt; and read &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;, then move to state &lt;code class=&quot;highlighter-rouge&quot;&gt;q'&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;deterministic means that if &lt;code class=&quot;highlighter-rouge&quot;&gt;((q, a1), q1), ((q, a2), q2) ∈ T&lt;/code&gt; either &lt;code class=&quot;highlighter-rouge&quot;&gt;a1 ≠ a2&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;q1 = q2&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;for any state and action there is at most one move&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/dfa_1.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;initial state denoted by incoming arrow&lt;/li&gt;
  &lt;li&gt;accepting states denoted by double circles&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Control/program for the above example:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/dfa_control.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A DFA defines a language&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;determines whether the string on the input tape belongs to that lang.&lt;/li&gt;
  &lt;li&gt;ie solves a decision problem&lt;/li&gt;
  &lt;li&gt;it &lt;strong&gt;accepts&lt;/strong&gt; a lang., through the input strings which, when “run”, end in an accepting state&lt;/li&gt;
  &lt;li&gt;in the above example, the DFA accepts the lang. consisting of the set of all strings comprising one or more a’s followed by one or more b’s (and its complement ie the language of strings with no consecutive a’s)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Non-deteministic finite-state automation (NFA):&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/dfa_2.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This one recognises strings that start and end with a &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; (in state &lt;code class=&quot;highlighter-rouge&quot;&gt;q1&lt;/code&gt; the &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; underneath can move to &lt;code class=&quot;highlighter-rouge&quot;&gt;q1&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;q2&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;Recognition for NFA is similar to non-deterministics algs. solving a decision problem&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;only require there exists a “run” that ends in an accepting state&lt;/li&gt;
  &lt;li&gt;any NFA can be converted to a DFA&lt;/li&gt;
  &lt;li&gt;therefore non-determinism doesn’t expand the class of languages that can be recognised by finite state automata&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;NFA to DFA reduction:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;use the subset construction
    &lt;ul&gt;
      &lt;li&gt;states of DFA are sets of states of the NFA&lt;/li&gt;
      &lt;li&gt;construction can cause a blow-up in number of states&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example without blow-up (recognises strings that start and end with &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/nfa_to_dfa.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Regular languages:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Languages that can be recognised by finite state automata&lt;br /&gt;
   A reg. lang. over an alphabet &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; can be specified by a &lt;strong&gt;regular expression&lt;/strong&gt; over &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt;&lt;br /&gt;
   &lt;code class=&quot;highlighter-rouge&quot;&gt;ε&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;σ&lt;/code&gt; are regex’s&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Regular expressions:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If &lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; are regex’s then so are (in order of lowest precedence first):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;R | S&lt;/code&gt; which denotes choice&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RS&lt;/code&gt; which denotes concatenation&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;R*&lt;/code&gt; which denotes 0 or more copies or &lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt; (closure)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(R)&lt;/code&gt; which is needed to override operator precedence&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additional operations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;complement &lt;code class=&quot;highlighter-rouge&quot;&gt;¬x&lt;/code&gt; (equivalent to the “or” of all chars. in &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; except &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;any single char. &lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt; (equivalent to the “or” of all chars.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;the lang. comprising 1+ a’s followed by 1+ b’s
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;aa*bb*&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;the lang. of string containing 2 consecutive a’s
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(a* | b*)* a a (a* | b*)*&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;the lang of strings that don’t contain 2 consecutive a’s
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;b* (abb*)* (ε | a)&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;the lang. of strings that start and end with &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;b (a* | b*)* b&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;L(R*)&lt;/code&gt; does not mean &lt;code class=&quot;highlighter-rouge&quot;&gt;{ r* | r ∈ L(R) }&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;for certain regex’s, this cannot be recognised by any DFA&lt;/li&gt;
  &lt;li&gt;for such a lang., would need a memory to remember which string in &lt;code class=&quot;highlighter-rouge&quot;&gt;r ∈ L(R)&lt;/code&gt; is repeated
    &lt;ul&gt;
      &lt;li&gt;might be an unbounded number&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Regex example:&lt;/p&gt;

&lt;p&gt;Consider lang. &lt;code class=&quot;highlighter-rouge&quot;&gt;(aa*bb*)*&lt;/code&gt; with DFA&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/regex_dfa.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A DFA can’t recognise &lt;code class=&quot;highlighter-rouge&quot;&gt;{ r* | r ∈ L(aa*bb*) }&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ie { (a&lt;sup&gt;m&lt;/sup&gt;b&lt;sup&gt;n&lt;/sup&gt;)&lt;code class=&quot;highlighter-rouge&quot;&gt;* |&lt;/code&gt; m &amp;gt; 0 and n &amp;gt; 0 }&lt;/li&gt;
  &lt;li&gt;would need to remember the &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; to check that a string is in the lang.&lt;/li&gt;
  &lt;li&gt;infinitely many values for &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;so it would need infintely many states&lt;/li&gt;
  &lt;li&gt;so, this is not a regular language&lt;/li&gt;
  &lt;li&gt;similarly, it can’t recognise { (a&lt;sup&gt;n&lt;/sup&gt;b&lt;sup&gt;n&lt;/sup&gt;)&lt;code class=&quot;highlighter-rouge&quot;&gt;* |&lt;/code&gt; n &amp;gt; 0 }
    &lt;ul&gt;
      &lt;li&gt;might need to use a stack, where a’s are pushed as they are read, and popped as b’s are read (like a counter)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Pushdown automata:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;unlimited memory&lt;/li&gt;
  &lt;li&gt;behave like a stack&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consists of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;finite input alphabet &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;finite set of stack symbols &lt;code class=&quot;highlighter-rouge&quot;&gt;G&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;finite set of states &lt;code class=&quot;highlighter-rouge&quot;&gt;Q&lt;/code&gt; including start state and set of accepting states&lt;/li&gt;
  &lt;li&gt;control/transition relation &lt;code class=&quot;highlighter-rouge&quot;&gt;T ⊆ (Q * AÈ{ε} * GÈ{ε}) * (Q * GÈ{ε})&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/pushdown_1.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Informally, the transition &lt;code class=&quot;highlighter-rouge&quot;&gt;(q, a, w) --&amp;gt; (r, v)&lt;/code&gt; means that&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;if we are in state &lt;code class=&quot;highlighter-rouge&quot;&gt;q&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;if &lt;code class=&quot;highlighter-rouge&quot;&gt;a ≠ ε&lt;/code&gt; then &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; is at head of tape&lt;/li&gt;
  &lt;li&gt;if &lt;code class=&quot;highlighter-rouge&quot;&gt;w ≠ ε&lt;/code&gt; then &lt;code class=&quot;highlighter-rouge&quot;&gt;w&lt;/code&gt; is at top of stack&lt;/li&gt;
  &lt;li&gt;move to state &lt;code class=&quot;highlighter-rouge&quot;&gt;r&lt;/code&gt; and
    &lt;ul&gt;
      &lt;li&gt;if &lt;code class=&quot;highlighter-rouge&quot;&gt;a ≠ ε&lt;/code&gt; then head++&lt;/li&gt;
      &lt;li&gt;if &lt;code class=&quot;highlighter-rouge&quot;&gt;w ≠ ε&lt;/code&gt; then pop &lt;code class=&quot;highlighter-rouge&quot;&gt;w&lt;/code&gt; from stack&lt;/li&gt;
      &lt;li&gt;if &lt;code class=&quot;highlighter-rouge&quot;&gt;v ≠ ε&lt;/code&gt; then push &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt; onto stack&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A PDA accepts an input if and only if after the input has been read, the stack is empty and control is in an accepting state&lt;br /&gt;
   There is no explicit test for empty stack, but you can just add a &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; symbol to the stack at start of computation&lt;br /&gt;
   Then check for emptiness when this symbol is at top of stack&lt;/p&gt;

&lt;p&gt;The PDA defined here are non-deterministic (NDPDA)&lt;br /&gt;
   More powerful than deterministic PDAs&lt;br /&gt;
   ie it can recognise languages that the DPDA might not, such as palindromes&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Palindromes:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sequences of chars. that read the same backwards as forwards&lt;br /&gt;
   Recognising with a PDA:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;push first half of sequence onto stack&lt;/li&gt;
  &lt;li&gt;as you read each char., check that it’s the same as the top of the stack and pop that element&lt;/li&gt;
  &lt;li&gt;enter an accepting state if all checks succeed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Why we need non-determinism:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;need to “guess” where middle of the stack is&lt;/li&gt;
  &lt;li&gt;cannot work this out and then check string
    &lt;ul&gt;
      &lt;li&gt;would need an unbounded number of states as the string could be of any finite length&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Palindrome example:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/pushdown_2.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;alphabet is &lt;code class=&quot;highlighter-rouge&quot;&gt;{a, b}&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;s0&lt;/code&gt; is start state and &lt;code class=&quot;highlighter-rouge&quot;&gt;s0&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;s3&lt;/code&gt; are the only accepting states&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(s0, ε, ε) --&amp;gt; (s1, $)&lt;/code&gt; move to &lt;code class=&quot;highlighter-rouge&quot;&gt;s1&lt;/code&gt; and push &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; onto stack&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(s1, a, ε) --&amp;gt; (s1, 1)&lt;/code&gt; read &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; and push &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(s1, b, 1) --&amp;gt; (s2, ε)&lt;/code&gt; read &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; is on top, pop, move to &lt;code class=&quot;highlighter-rouge&quot;&gt;s2&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(s2, b, 1) --&amp;gt; (s2, ε)&lt;/code&gt; read &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; is on top, pop&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(s2, ε, $) --&amp;gt; (s3, ε)&lt;/code&gt; if &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; is top, pop, move to &lt;code class=&quot;highlighter-rouge&quot;&gt;s3&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So the automaton recognises the language { (a&lt;sup&gt;n&lt;/sup&gt;b&lt;sup&gt;n&lt;/sup&gt;)&lt;code class=&quot;highlighter-rouge&quot;&gt; |&lt;/code&gt; n =&amp;gt; 0 }&lt;/p&gt;

&lt;p&gt;PDA are more powerful than finite-state - can recognise languages that a DFA cannot&lt;br /&gt;
   These languages are the &lt;strong&gt;context-free languages&lt;/strong&gt;&lt;br /&gt;
   Not all languages are context-free, for example, { (a&lt;sup&gt;n&lt;/sup&gt;b&lt;sup&gt;n&lt;/sup&gt;c&lt;sup&gt;n&lt;/sup&gt;)&lt;code class=&quot;highlighter-rouge&quot;&gt; |&lt;/code&gt; n =&amp;gt; 0 } cannot be recognised by a PDA&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Turing Machines:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Recognises a particular languages consisting of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;finite alphabet &lt;code class=&quot;highlighter-rouge&quot;&gt;Σ&lt;/code&gt;, including blank symbol &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;unbounded &lt;strong&gt;tape&lt;/strong&gt; of squares
    &lt;ul&gt;
      &lt;li&gt;each holding a single symbol of &lt;code class=&quot;highlighter-rouge&quot;&gt;Σ&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;unbounded in both directions&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;tape head&lt;/strong&gt; that scans a single square
    &lt;ul&gt;
      &lt;li&gt;read and write to square&lt;/li&gt;
      &lt;li&gt;moves 1 square left/right along the tape&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;set &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; of &lt;strong&gt;states&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;start state &lt;code class=&quot;highlighter-rouge&quot;&gt;s0&lt;/code&gt; and two &lt;strong&gt;halt&lt;/strong&gt; (or terminal) states &lt;code class=&quot;highlighter-rouge&quot;&gt;sY&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;sN&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;transition function&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;the inbuilt program&lt;/li&gt;
      &lt;li&gt;of the form &lt;code class=&quot;highlighter-rouge&quot;&gt;f: ((S/{sY, sN}) * Σ) --&amp;gt; (S * Σ * {left, right})&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For each non-terminal state and symbol, &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; specifies&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a new state&lt;/li&gt;
  &lt;li&gt;a new symbol&lt;/li&gt;
  &lt;li&gt;a direction in which to move&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;f(s, σ) = (s', σ', d)&lt;/code&gt; means reading &lt;code class=&quot;highlighter-rouge&quot;&gt;σ&lt;/code&gt; from the tape in state &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;move to state &lt;code class=&quot;highlighter-rouge&quot;&gt;s' ∈ S&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;overwrite &lt;code class=&quot;highlighter-rouge&quot;&gt;σ&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;σ ∈ Σ&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;move head in the direction &lt;code class=&quot;highlighter-rouge&quot;&gt;d ∈ {left, right}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Computation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;finite input string placed on tape&lt;/li&gt;
  &lt;li&gt;head placed on first symbol of the input&lt;/li&gt;
  &lt;li&gt;starts in state &lt;code class=&quot;highlighter-rouge&quot;&gt;s0&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;if halts in state &lt;code class=&quot;highlighter-rouge&quot;&gt;sY&lt;/code&gt;, answer is “yes”&lt;/li&gt;
      &lt;li&gt;if halts in state &lt;code class=&quot;highlighter-rouge&quot;&gt;sN&lt;/code&gt;, answer is “no”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Palindrome problem:&lt;br /&gt;
   Instance: finite string &lt;code class=&quot;highlighter-rouge&quot;&gt;Y&lt;/code&gt;
   Question: is &lt;code class=&quot;highlighter-rouge&quot;&gt;Y&lt;/code&gt; a palindrome?&lt;br /&gt;
   Java &lt;a href=&quot;#turing_palindrome&quot;&gt;method&lt;/a&gt; for this&lt;/p&gt;

&lt;p&gt;We can use a Turing machine for this problem, as we don’t need nondeterminism (don’t need to guess the middle)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#turing_palindrome_2&quot;&gt;TM algorithm&lt;/a&gt; for the palindrome problem&lt;/p&gt;

&lt;p&gt;For this, we need the following states:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;s0&lt;/code&gt; reading, erasing and remember leftmost symbol&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;s1, s2&lt;/code&gt; moving right, remembering symbol erased&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;s3, s4&lt;/code&gt; testing for appropritate rightmost symbol&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;s5&lt;/code&gt; moving back to leftmost symbol&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A TM can be described with a &lt;strong&gt;state transition diagram&lt;/strong&gt;&lt;br /&gt;
   A directed graph where&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;each state represented by vertex&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;f(s, σ) = (s', σ', d)&lt;/code&gt; represented by an edge from &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;s'&lt;/code&gt; labelled &lt;code class=&quot;highlighter-rouge&quot;&gt;(σ --&amp;gt; σ', d)&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;edge represents moving to &lt;code class=&quot;highlighter-rouge&quot;&gt;s'&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;σ --&amp;gt; σ'&lt;/code&gt; represents overwriting symbol on tape&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;d&lt;/code&gt; represents moving tape in a direction &lt;code class=&quot;highlighter-rouge&quot;&gt;d&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/algs/turing.png&quot; nopin=&quot;nopin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Functions:&lt;/p&gt;

&lt;p&gt;TM that accepts language &lt;code class=&quot;highlighter-rouge&quot;&gt;L&lt;/code&gt; actually computes the function &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; where &lt;code class=&quot;highlighter-rouge&quot;&gt;f(s) = 1&lt;/code&gt; if &lt;code class=&quot;highlighter-rouge&quot;&gt;s ∈ L&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; otherwise&lt;/p&gt;

&lt;p&gt;The definition of a TM can be amended as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;to have set &lt;code class=&quot;highlighter-rouge&quot;&gt;H&lt;/code&gt; of halt states&lt;/li&gt;
  &lt;li&gt;function it computers is defined by &lt;code class=&quot;highlighter-rouge&quot;&gt;f(s) = s'&lt;/code&gt; where
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; is inital string&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;s'&lt;/code&gt; is string on tape when the machine halts&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;eg, the palindrome TM can be redefined such that it deletes the tape contents and&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;instead of entering &lt;code class=&quot;highlighter-rouge&quot;&gt;sY&lt;/code&gt;, it writes &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; on tape and enters halt state&lt;/li&gt;
  &lt;li&gt;instead of entering &lt;code class=&quot;highlighter-rouge&quot;&gt;sN&lt;/code&gt;, it writes &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; on tape and enters halt state&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Designing a TM to compute &lt;code class=&quot;highlighter-rouge&quot;&gt;f(k) = k + 1&lt;/code&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;input 1 0 0 0 1 0, output 1 0 0 0 1 1
    &lt;ul&gt;
      &lt;li&gt;pattern: replace rightmost &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;then moving right: if &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;, replace with &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; and continue right / if blank, halt&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;input 1 0 0 1 1 1, output 1 0 1 0 0 0
    &lt;ul&gt;
      &lt;li&gt;same pattern as 1&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;input 1 1 1 1 1, output 1 0 0 0 0 0
    &lt;ul&gt;
      &lt;li&gt;this is a special case&lt;/li&gt;
      &lt;li&gt;no rightmost &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;replace first blank before input with &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;then moving right: if &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; replace with &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; and continue right / if blank, halt&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;#turing_example&quot;&gt;TM algorithm&lt;/a&gt; for the above function&lt;/p&gt;

&lt;p&gt;For this, we need the following states:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;s0&lt;/code&gt; initial state moving right seeking start of input&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;s1&lt;/code&gt; moving left to rightmost &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; or blank&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;s2&lt;/code&gt; finding first &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; or blank, changing it to &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; and moving right, changing &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;s to &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;s&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;s3&lt;/code&gt; halt state&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Recognisable and decidable:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Language &lt;code class=&quot;highlighter-rouge&quot;&gt;L&lt;/code&gt; is &lt;strong&gt;Turing-recognisable&lt;/strong&gt; if, given input string &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;if &lt;code class=&quot;highlighter-rouge&quot;&gt;s ∈ L&lt;/code&gt;, then TM halts in state &lt;code class=&quot;highlighter-rouge&quot;&gt;sY&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;if &lt;code class=&quot;highlighter-rouge&quot;&gt;s Ï L&lt;/code&gt;, then TM halts in state &lt;code class=&quot;highlighter-rouge&quot;&gt;sN&lt;/code&gt; or fails to halt&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Language &lt;code class=&quot;highlighter-rouge&quot;&gt;L&lt;/code&gt; is &lt;strong&gt;Turing-decidable&lt;/strong&gt; if, given input string &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;if &lt;code class=&quot;highlighter-rouge&quot;&gt;s ∈ L&lt;/code&gt;, then TM halts in state &lt;code class=&quot;highlighter-rouge&quot;&gt;sY&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;if &lt;code class=&quot;highlighter-rouge&quot;&gt;s Ï L&lt;/code&gt;, then TM halts in state &lt;code class=&quot;highlighter-rouge&quot;&gt;sN&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Every decidable language is recognisable, but not every recognisable language is decidable&lt;/p&gt;

&lt;p&gt;A function &lt;code class=&quot;highlighter-rouge&quot;&gt;f: S* --&amp;gt; S*&lt;/code&gt; is &lt;strong&gt;Turing-computable&lt;/strong&gt; if there is a TM &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; such that, for any input &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; halts with output &lt;code class=&quot;highlighter-rouge&quot;&gt;f(s)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enhanced Turing Machines:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;TM can be enhanced in a few ways&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2+ tapes, rather than just one&lt;/li&gt;
  &lt;li&gt;a 2-dimensional “tape”&lt;/li&gt;
  &lt;li&gt;TM may operate non-deterministically (transition function may be a relation instead)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;None of these enhancements change the computing power&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;every lang./func. that is recognisable/decidable/computable with an enhanced TM is also R/D/C with a basic TM
    &lt;ul&gt;
      &lt;li&gt;non-determinism adds power to PDA, but not to DFAs nor TMs&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;proved by showing that basic TM can simulate any of these enhanced TMs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;P and NP:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;P often introduced as the class as decision problems solvable by a TM in poly-time&lt;br /&gt;
   NP introduced as the class of decision problems solvable by a non-deterministic TM in poly-time&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;in a non-deterministic TM, transition function replaced by a relation &lt;code class=&quot;highlighter-rouge&quot;&gt;f ⊆ ( (S * Σ) * (S * Σ * {left, right}) )&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;can make a number of different transition based on current state and symbol at head&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;non-det. doesn’t change what can be computed, but speeds it up&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To show P ≠ NP, sufficient to show that a standard TM cannot solve an NP-complete problem in poly-time&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Counter-programs:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These have&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;vartiables of type &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;labelled statements of the form &lt;code class=&quot;highlighter-rouge&quot;&gt;L: unlabelled_statement&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;unlabelled statements of the form
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;x = 0&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;x = y + 1&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;x = y - 1&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;if x == 0 goto L&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;halt;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Counter program &lt;a href=&quot;#counter_program&quot;&gt;example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Church-Turing thesis:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Based on the fact that a whole range of different computational models turn out to be equivalent in terms of what they can compute&lt;br /&gt;
   Reasonable to infer that any one of these models encapsulates what is effectively computable&lt;br /&gt;
   This thesis states that everything “effectively computable” is computable by a TM (not a theorem as uses informal terms)&lt;br /&gt;
   So there is an effective procedure for computing the value of the function, including all computers/programming langs. that we know about at present and even those we do not&lt;/p&gt;

&lt;p&gt;So the TM is an appropriate model for the “black box”&lt;/p&gt;

&lt;p&gt;Equivalent computational models (each can “simulate” the others):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;lambda calculus (Church)&lt;/li&gt;
  &lt;li&gt;TMs (Turing)&lt;/li&gt;
  &lt;li&gt;recursive functions (Kleene)&lt;/li&gt;
  &lt;li&gt;production systems (Post)&lt;/li&gt;
  &lt;li&gt;counter programs and all general purpose programming languages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;heap_class&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;heap-class-implementation-in-java&quot;&gt;Heap class implementation in Java&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Heap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;// create empty heap of max capacity n&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  
    &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;// create heap of capacity n containing items from array a&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// impose heap property&lt;/span&gt;
    
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// build a heap on current items&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// for each non-leaf node in bottom-to-top right-to-left order&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// start at parent of final leaf&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;impose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// insert item k&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  
  &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// current position(starting at new leaf node)&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//swap with parent&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// new position is position of parent&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// finalise location of item&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// delete and return the max&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;deleteMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// root&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// swap root with last leaf&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;impose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// on bad value in root&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// impose property on node i&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;impose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;finished&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;finished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  
    &lt;span class=&quot;c1&quot;&gt;// find larger child&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// assume left child first&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// change if right exists and is larger&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// bad node&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// swap&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// new position&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;finished&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// not bad node&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// finalise location&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&quot;heap_sort&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;heapsort-pseudocode&quot;&gt;Heapsort pseudocode&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Build&lt;/strong&gt; sequence into a heap; // O(n)
    &lt;ul&gt;
      &lt;li&gt;for (int k = 0; k &amp;lt; n-1; k++)&lt;/li&gt;
      &lt;li&gt;// invariant: items 0,…,n-k-1 form a heap&lt;/li&gt;
      &lt;li&gt;// invariant: items n-k,…,n-1 are sorted&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Find&lt;/strong&gt; the largest unsorted item; // is in position 0, so O(1)&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Swap&lt;/strong&gt; it into position n-1-k; // its correct place O(1)&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Reduce&lt;/strong&gt; the size of the heap by 1; // O(1)&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Impose&lt;/strong&gt; the heap property on position 0; // this is O(log n)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Restore&lt;/strong&gt; size to original value;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Loop is iterated &lt;code class=&quot;highlighter-rouge&quot;&gt;n - 1&lt;/code&gt; times&lt;br /&gt;
   Each iteration takes O(log n) time&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;radix_sort&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;radix-sort-pseudocode&quot;&gt;Radix sort pseudocode&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// helper method which would return the value represented by the b bits of x when starting at position p&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// a is the sequence to be sorted&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// m is the number of bits in each item of a&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// b is the block length of radix sort&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numIterations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numBuckets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ArraList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// sequence a&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// representing the buckets&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bucket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;numBuckets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numBuckets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numIterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// clear buckets&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numBuckets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;// distribute items in order&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// find correct bucket&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// clear sequence&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;// concatenate buckets in order&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numBuckets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;trie_alg&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;tries-1&quot;&gt;Tries&lt;/h6&gt;

&lt;p&gt;&lt;strong&gt;Search:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// search for a word w in a trie t&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// current position in w&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;labelled&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// if can match the char of word in the current position&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// end of word&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;intermediate&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;absent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;present&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// not at end of word&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// move to child&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// move to next char&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;absent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// can't match current char&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Insert:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// insert word w into trie t&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// go through chars of word&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;labelled&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;such&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;mark&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;intermediate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// move to child node&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;mark&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;representing&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;trie_class&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;trie-class&quot;&gt;Trie class&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// label of incoming branch&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isWord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true when node represents a word&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sibling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// next sibling&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// first child&lt;/span&gt;
  
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  
    &lt;span class=&quot;nx&quot;&gt;letter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;isWord&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;sibling&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// include accessors and mutators for the various components of a class&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Trie&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Trie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MIN_VALUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;huff_contruct&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;huffman-tree-construction&quot;&gt;Huffman tree construction&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// set up leaf nodes&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;distinct&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;occuring&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parentless&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;frequency&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setCharacter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setLeftChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setRightChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// construct branch nodes and links&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parentless&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nodes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parentless&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parentless&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nodes&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;minimum&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setLeftChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setRightChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// the final z is root&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;lzw&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;lzw-compression-1&quot;&gt;LZW compression&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;initialise&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;codeword&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;initialise&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dictionary&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;exhausted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  
  &lt;span class=&quot;nx&quot;&gt;identify&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;longest&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;starting&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;represented&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;codeword&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// using k bits&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;// move to next position in t&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// move forward by the length of the string just encoded&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// char in next position&lt;/span&gt;
  
  &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;paired&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;available&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;codeword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// involves adding a new leaf node if d is represented by a trie&lt;/span&gt;
  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;lzw_decomp&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;lzw-decompression&quot;&gt;LZW decompression&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;initialise&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;codeword&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;initialise&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dictionary&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;codeword&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;compressed&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// read k bits&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lookUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// look up codeword in d&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// output decompressed string&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;exhausted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oldS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// copy last string decompressed&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;full&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;codeword&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loopUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// look up codeword in d&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// output decompressed string&lt;/span&gt;
  
  &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oldS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// string to add to d&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newS&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;paired&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;available&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;codeword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;brute_force&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;brute-force-algorithm-1&quot;&gt;Brute force algorithm&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// return smallest k such that s occurs in t starting at position k, or -1 if no k exists&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bruteForce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// length of string/pattern&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// length of text&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// starting position in t&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// curr position in t&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// curr position in s&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// not reached end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// chars match&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// move on in t&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// move on in s&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// start again in s&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// advance starting position&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// back up in text to new starting position&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;kmp&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;kmp-search-implementation&quot;&gt;KMP search implementation&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// return smallest k such that s occurs from position k in t, or -1 if no k exists&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// create border table&lt;/span&gt;
  
  &lt;span class=&quot;nx&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// set up border table&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// not reached end of text&lt;/span&gt;
  
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// positions match&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// move on in text&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// move on in string&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// reached end of string so a match&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// mismatch so adjust curr position in string using border table&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// if there is a common prefix/suffix then change position in string&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// no common prefix/suffix&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// then move forward 1 position in text if not advanced&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// else start from beginning of string&lt;/span&gt;
	  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// no occurence&lt;/span&gt;
  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;bm&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;boyer-moore-implementation&quot;&gt;Boyer-Moore implementation&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// return smallest k such that s occurs at k in t, or -1 if no k exists&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// pos in text&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// pos in string&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// declare a suitable array p&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// set up last occurence array&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// match&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// move back in text&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// move back in string&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;sp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]);&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]);&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// return to end of string&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;adjacency_list&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;adjacency-list-implementation&quot;&gt;Adjacency list implementation&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// an entry in the adjacency list&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AdjListNode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertexIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// possibly other fields eg weight, capacity...&lt;/span&gt;
  
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AjdListNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;vertexIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getVertexIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertexIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setVertexIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;vertexIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// a vertex&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vertex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// the index of this vertex&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AjdListNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adjList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// and its adjacency list&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// possibly other fields eg storing data&lt;/span&gt;
  
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;adjList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AjdListNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// add vertex with index m to the adj list&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addToAdjList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;adjList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addLast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AjdListNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertexDegree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adjList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// a graph&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Graph&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numVertices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// possibly other fields for graph properties&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;// create graph with vertices indexed 0,..., n-1&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;numVertices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;vertices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numVertices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;dfs&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;depth-first-search-implementation&quot;&gt;Depth-first search implementation&lt;/h6&gt;

&lt;p&gt;Add this to the previously defined &lt;strong&gt;vertex&lt;/strong&gt; class:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// index of predecessor vertex&lt;/span&gt;
   
   &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getVisited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setVisited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;visited&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getPred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setPred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;pred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And add this to the previously defined &lt;strong&gt;graph&lt;/strong&gt; class:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;c1&quot;&gt;// visit vertex v with predecessor p&lt;/span&gt;
   &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Vertex&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   
     &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setVisited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// update&lt;/span&gt;
	 &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setPred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// set predecessor (-1 if none)&lt;/span&gt;
	 &lt;span class=&quot;nx&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AdjListNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAjdList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// get adj. list&lt;/span&gt;
	 
	 &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AdjListNode&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// go through all adjacent vertices&lt;/span&gt;
	   &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vertices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getVisited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vertices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// if current vertex hasn't been visited, continue the search from there&lt;/span&gt;
	 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	 
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   
   &lt;span class=&quot;c1&quot;&gt;// carry out a df traversal&lt;/span&gt;
   &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   
     &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Vertex&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setVisited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// initialise&lt;/span&gt;
	 &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Vertex&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getVisited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// if vertex not visited, start search there&lt;/span&gt;
   
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;bfs&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;breadth-first-search-implementation&quot;&gt;Breadth-first search implementation&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Vertex&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setVisited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// initialise&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Vertex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Vertex&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getVisited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// start search&lt;/span&gt;
  
    &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setVisited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// now visited&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setPredecessor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// v initial vertex&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ready to be processed&lt;/span&gt;
	
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	
	  &lt;span class=&quot;nx&quot;&gt;Vertex&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// get next vertex to process&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AdjListNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAdjList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// get its adj. list&lt;/span&gt;
	  
	  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AdjListNode&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// go through its adj. list&lt;/span&gt;
	  
	    &lt;span class=&quot;nx&quot;&gt;Vertex&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getVertexIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// next vertex in list&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getVisited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		  
		  &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setVisited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// now visited&lt;/span&gt;
		  &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setPredecessor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// set predecessor of w to be u&lt;/span&gt;
		  &lt;span class=&quot;nx&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// add to queue&lt;/span&gt;
		  
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	  
	  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;dijkstra&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;dijkstras-algorithm-implementation&quot;&gt;Dijkstra’s algorithm implementation&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// S is set of vertices for which shortest path from u is known&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// d(w) is length of a shortest path from u to w passing only through vertices of S&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// initialise S&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertex&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// initialise distances&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// still vertices to add in S&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;minimum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adjacent&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// perfom relaxation&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;non_deterministic&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;graph-colouring---example-of-a-non-deterministic-alg&quot;&gt;Graph colouring - example of a non-deterministic alg.&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// return true if graph g is k-colourable&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nDGC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Graph&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertex&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setColour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nonDeterministicChoice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// guess a colour for each vertex&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;edge&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getColour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getColour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// verify the colouring&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;prim_jarnik&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;prim-jarnik-algorithm-pseudocode&quot;&gt;Prim-Jarnik algorithm pseudocode&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arbitrary&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertex&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vertex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertices&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;non&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vertices&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ntv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ntv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;edge&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;graph&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;such&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;that&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ntv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;wt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;minimised&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;adjoin&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;edge&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;spanning&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;dijkstra_refinement&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;dijkstras-refinement-to-the-prim-jarnik-algorithm&quot;&gt;Dijkstra’s refinement to the Prim-Jarnik algorithm&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arbitrary&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertex&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vertex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertices&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;non&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vertices&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ntv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ntv&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bestTV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r is the only tv&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ntv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ntv&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;which&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bestTV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;minimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;adjoin&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bestTV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ntv&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bestTV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// update as tv set changed&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;topological_ordering&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;topological-ordering-algorithm&quot;&gt;Topological ordering algorithm&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// assume each vertex has 2 integer attributes, label and count&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// count is the number of incoming edges from unlabelled vertices&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertex&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getInDegree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;up&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;empty&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sourceQueue&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vertex&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sourceQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// add vertices with no incoming edges&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nextLabel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// to give the topological order&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sourceQueue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;take&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sourceQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nextLabel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// label the vertex&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  
    &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// update attribute count&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sourceQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// add vertex if no incoming vertices&lt;/span&gt;
  
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;turing_palindrome&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;java-method-for-the-palindrome-problem&quot;&gt;Java method for the palindrome problem&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isPalindrome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isPalindrome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;turing_palindrome_2&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;turing-machine-alg-for-the-palindrome-problem&quot;&gt;Turing machine alg. for the palindrome problem&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;erase&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;enter&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;remembers&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;only&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;blank&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;remain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;enter&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;accepting&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;halt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;matches&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;erased&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;erase&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;too&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; 
  &lt;span class=&quot;nx&quot;&gt;enter&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rejecting&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;halt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;enter&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;accepting&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;halt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;remaining&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;repeat&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;turing_example&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;turing-machine-alg-for-the-function-fk--k--1&quot;&gt;Turing Machine alg. for the function &lt;code class=&quot;highlighter-rouge&quot;&gt;f(k) = k + 1&lt;/code&gt;&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;seeking&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;blank&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;looking&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;blank&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;blank&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;found&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;changing&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;halt&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;blank&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reached&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;counter_program&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;counter-program-to-evaluate-the-product-x-x-y-with-a-b-c-labels&quot;&gt;Counter program to evaluate the product &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; x &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; (with &lt;code class=&quot;highlighter-rouge&quot;&gt;A, B, C&lt;/code&gt; labels&lt;/h6&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// initialise some vars.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// finished product&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// end of outer for loop&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// perform this loop x times&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// each time around the loop we set v = y&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// in a slightly contrived way&lt;/span&gt;
  
&lt;span class=&quot;nl&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// end of inner for loop&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// perform this loop v times&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// each time incrementing z, so really add y to z by end of inner loop&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// return to start of inner loop&lt;/span&gt;
  
&lt;span class=&quot;nl&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;halt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 10 Jan 2018 18:50:00 +0000</pubDate>
        <link>https://fireredninja.github.io/cs-notes//cs-notes/level3/semester1/2018/01/10/algorithmics-1.html</link>
        <guid isPermaLink="true">https://fireredninja.github.io/cs-notes//cs-notes/level3/semester1/2018/01/10/algorithmics-1.html</guid>
        
        
        <category>Level3</category>
        
        <category>Semester1</category>
        
      </item>
    
      <item>
        <title>Mobile HCI	</title>
        <description>&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Notion of mobiles varies from coutruy to countriy
    &lt;ul&gt;
      &lt;li&gt;UK - mobile&lt;/li&gt;
      &lt;li&gt;Germany - andly&lt;/li&gt;
      &lt;li&gt;Finish - travel phone&lt;/li&gt;
      &lt;li&gt;Japanese - portable telephone&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;!--excerpt--&gt;

&lt;ul&gt;
  &lt;li&gt;What is mobile to me?
    &lt;ul&gt;
      &lt;li&gt;Helper, Communication, Keys to Internet&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Do we check our mobiles too much?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How are people using cameras?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reading books - phisical/electronic?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Impact on Humans
    &lt;ul&gt;
      &lt;li&gt;Addiction&lt;/li&gt;
      &lt;li&gt;Controlling our world/being controlled by our phone&lt;/li&gt;
      &lt;li&gt;Negative in social sitiations&lt;/li&gt;
      &lt;li&gt;Gradually deskill us&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Social aspects
    &lt;ul&gt;
      &lt;li&gt;Social media faster than news&lt;/li&gt;
      &lt;li&gt;More power to the citizens&lt;/li&gt;
      &lt;li&gt;It changes the way we communicate with each other&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Consequences on society?&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;android&quot;&gt;Android&lt;/h1&gt;

&lt;h2 id=&quot;android-architecture&quot;&gt;Android Architecture&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/mobhci/androidArchitecture.PNG&quot; alt=&quot;Android Architecture&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;android-stack&quot;&gt;Android Stack&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/mobhci/androidStack.PNG&quot; alt=&quot;Android Software Stack&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Java apps running on Java-based, object-oriented application framework on top of Java core libraries running on Dalvik virtual machine&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Android apps written in Java&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Bundled by &lt;em&gt;aapt tool&lt;/em&gt; to return a &lt;strong&gt;.apk&lt;/strong&gt; file&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;By default each app runs in its own Linux process&lt;/li&gt;
  &lt;li&gt;Each process has its own VM&lt;/li&gt;
  &lt;li&gt;Each app is assigned a unique Linux user ID&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;components&quot;&gt;Components&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Activity&lt;/li&gt;
  &lt;li&gt;Intent&lt;/li&gt;
  &lt;li&gt;Service&lt;/li&gt;
  &lt;li&gt;Content Provider&lt;/li&gt;
  &lt;li&gt;Broadcast Receiver&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;activity&quot;&gt;Activity&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;An &lt;strong&gt;activity&lt;/strong&gt; is a single, focused thing that the user can do&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Forms a UI, but each activity is independent from others&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Task&lt;/strong&gt; consists of a &lt;em&gt;stack&lt;/em&gt; of activity elements
    &lt;ul&gt;
      &lt;li&gt;eg: You open Gmail and it shows a list of emails. When you open a message, it is pushed into the stack and you will see the message. When you press back, it is popped out of the stack and you will see the list of emails&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;android-lifecycle&quot;&gt;Android Lifecycle&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/mobhci/androidLifecycle.png&quot; alt=&quot;Android Lifecycle&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;intent&quot;&gt;Intent&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;An &lt;strong&gt;intent&lt;/strong&gt; is a messaging object you can use to request an action from another app
    &lt;ul&gt;
      &lt;li&gt;eg: From Gmail, you click a website link and it starts an intent to open the web browser, from there if you click a YouTube link, it starts an intent to open YouTube&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;service&quot;&gt;Service&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;A &lt;strong&gt;service&lt;/strong&gt; is an application component that can perform long-running operations in the background, and it doesn’t provide a UI
    &lt;ul&gt;
      &lt;li&gt;eg: Playing music in the background&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;broadcast-receivers&quot;&gt;Broadcast receivers&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;A broadcast receiver is a component that receive and react to broadcast announcements
    &lt;ul&gt;
      &lt;li&gt;eg: If you are playing music and you get a phonecall(broadcast announcement), and your receiver can take this annoucement and stop the music.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;content-providers&quot;&gt;Content providers&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;A &lt;strong&gt;content provider&lt;/strong&gt; makes a specific set of application’s data available to other aplications&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;manifest&quot;&gt;Manifest&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Provides essential information about your app to the Android system.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;android-ui&quot;&gt;Android UI&lt;/h2&gt;
&lt;h3 id=&quot;basic-concepts&quot;&gt;Basic Concepts&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;View
    &lt;ul&gt;
      &lt;li&gt;UI elements that can be drawn&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;View group
    &lt;ul&gt;
      &lt;li&gt;eg: Linear Layout&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Intent&lt;/li&gt;
  &lt;li&gt;Content privider&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Service&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;XML Layout
    &lt;ul&gt;
      &lt;li&gt;Where you describe how the activity looks&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;layouts&quot;&gt;Layouts&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Linear&lt;/li&gt;
  &lt;li&gt;Relative&lt;/li&gt;
  &lt;li&gt;Table&lt;/li&gt;
  &lt;li&gt;Grid&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Frame&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;To make UI, you can write Java code like Swing(Procedural) or write XML code(Declarative)&lt;/li&gt;
  &lt;li&gt;Preferably Declarative&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Images, text, XML layouts, sound files, databases…&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Held in res/ directory&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;To attach the view to hierarchy tree to screen for rendering, the activity must call setContentView() in the Java file (usually made one for you by default for you)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;widget&quot;&gt;Widget&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Anything you can interact with
    &lt;ul&gt;
      &lt;li&gt;Eg: Buttons, Radiobutton, checkbox, textview&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;fragments&quot;&gt;Fragments&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Represebts a &lt;em&gt;behavior&lt;/em&gt; or a &lt;em&gt;portion of UI&lt;/em&gt; in activity.&lt;/li&gt;
  &lt;li&gt;eg: you can combine multiple fragments in a single activity to build a multi-pane UI and reuse a fragmet in multiple activities&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
</description>
        <pubDate>Tue, 09 Jan 2018 10:00:00 +0000</pubDate>
        <link>https://fireredninja.github.io/cs-notes//cs-notes/level3/semester2/2018/01/09/mobile-hci.html</link>
        <guid isPermaLink="true">https://fireredninja.github.io/cs-notes//cs-notes/level3/semester2/2018/01/09/mobile-hci.html</guid>
        
        
        <category>Level3</category>
        
        <category>Semester2</category>
        
      </item>
    
      <item>
        <title>Cyber Security Fundamentals	</title>
        <description>&lt;h1 id=&quot;lecture-1---introduction&quot;&gt;Lecture 1 - Introduction&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt; State/Condition of being pretected from or not exposed to danger from some internal or external threat
&lt;!--excerpt--&gt;&lt;/li&gt;
  &lt;li&gt;Hacking against the law
    &lt;ul&gt;
      &lt;li&gt;Unauthorised access to computer material&lt;/li&gt;
      &lt;li&gt;Unauthorised access with intent to commit or facilitate a crime&lt;/li&gt;
      &lt;li&gt;Unauthorised modification of computer material.&lt;/li&gt;
      &lt;li&gt;Making, supplying or obtaining anything which can be used in computer misuse offences.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;”..prevention and detection of unauthorised actions by users of a computer system” - Deiter Gollman&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“the prevention and detection of unauthorised actions by users of a computer” - Microsoft&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;socio-technical-systems&quot;&gt;Socio-technical Systems&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;System&lt;/strong&gt; is a purposefull collection of interrelated ocmponents of differen kinds, which work together to achive some ovjective&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Socio-Technical systems&lt;/strong&gt; include technical ystems,but also organisational processses and people who use and interact with the technical sustem&lt;/li&gt;
  &lt;li&gt;governed b organisational and regulatory policies and rules&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Computer Security&lt;/strong&gt; - protection of hardware, software &amp;amp; data assets&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Information Security&lt;/strong&gt; - protection of information and information systems from unauthorized access, use, disclosure, disruption, modification, or destruction in order to provide confidentiality, integrity, and availability&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;security-model&quot;&gt;Security model&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/csf/securityModel.PNG&quot; alt=&quot;security model&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;cia&quot;&gt;CIA&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Confidentiality&lt;/strong&gt; - Prevention of unauthorised disclosure&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Integrity&lt;/strong&gt; - Prevention of unauthorised modification of information&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Availability&lt;/strong&gt; - Prevention of unauthorised withholding of information and rescources&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/csf/CIA.png&quot; alt=&quot;CIA&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Vulnerability&lt;/strong&gt; - Weakness in your system
    &lt;ul&gt;
      &lt;li&gt;Hardware&lt;/li&gt;
      &lt;li&gt;Software&lt;/li&gt;
      &lt;li&gt;Network&lt;/li&gt;
      &lt;li&gt;Personnel&lt;/li&gt;
      &lt;li&gt;Location&lt;/li&gt;
      &lt;li&gt;Organisational&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Threat&lt;/strong&gt; - Potential exploitation of vulnerability&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Attack&lt;/strong&gt; - Attempted violation of vulnerability&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Passive&lt;/strong&gt; - Just watches and maybe collect data&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Active&lt;/strong&gt; - Attempts to change resources or operations&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;threat-types&quot;&gt;Threat Types&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/csf/threatTypes.PNG&quot; alt=&quot;Threat Types&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Physical Damage&lt;/li&gt;
  &lt;li&gt;Natural Events&lt;/li&gt;
  &lt;li&gt;Loss of essential services&lt;/li&gt;
  &lt;li&gt;Disturbances due to radiation&lt;/li&gt;
  &lt;li&gt;Compromise of Information&lt;/li&gt;
  &lt;li&gt;Technical Failures&lt;/li&gt;
  &lt;li&gt;Unauthorised Access&lt;/li&gt;
  &lt;li&gt;Compromise of Functions&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;deal-with-threats&quot;&gt;Deal with threats&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Reduce/Remove threats by
    &lt;ul&gt;
      &lt;li&gt;Prevent&lt;/li&gt;
      &lt;li&gt;Detect&lt;/li&gt;
      &lt;li&gt;React&lt;/li&gt;
      &lt;li&gt;Correct&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Accepted (“it’s not a bug its a feature”)&lt;/li&gt;
  &lt;li&gt;Avoided&lt;/li&gt;
  &lt;li&gt;Transfered (give the problem to someone else)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Doing Security == Risk Management&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Asset identification&lt;/li&gt;
  &lt;li&gt;Risk identification
    &lt;ul&gt;
      &lt;li&gt;Find assest’s vulnerabilities&lt;/li&gt;
      &lt;li&gt;Find the relavent threats&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Risk treatment analysis&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Treat the risk&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Asset protection&lt;/li&gt;
  &lt;li&gt;What are my assets&lt;/li&gt;
  &lt;li&gt;What danger are they in&lt;/li&gt;
  &lt;li&gt;How can I protect it&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-4---security-engineering&quot;&gt;Section 4 - Security Engineering&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Security Engineering&lt;/strong&gt; is about building systems to remain dependable in the face of malice , error or mischance&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;What are ny security requirements&lt;/li&gt;
  &lt;li&gt;What are my policies&lt;/li&gt;
  &lt;li&gt;Policy and Guidence&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Policy&lt;/strong&gt;- What you want to achieve?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;poits-of-interest&quot;&gt;Poits of Interest&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Simple &amp;gt; Rich mechanisms&lt;/li&gt;
  &lt;li&gt;Trade-offs
    &lt;ul&gt;
      &lt;li&gt;cost/speed&lt;/li&gt;
      &lt;li&gt;effort&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Should the effort I put in to securing the data be relatied to the worth of the data?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;key-principles&quot;&gt;Key principles&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Easist penetration&lt;/li&gt;
  &lt;li&gt;Adequate protection&lt;/li&gt;
  &lt;li&gt;Weakest link&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Effectiveness&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Security should not be an afterthought&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Crytography is not a silver bullet&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;actors&quot;&gt;Actors&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Amatues/Script kiddies&lt;/li&gt;
  &lt;li&gt;Hackers
    &lt;ul&gt;
      &lt;li&gt;Black Hat&lt;/li&gt;
      &lt;li&gt;White Hat&lt;/li&gt;
      &lt;li&gt;Gray Hat&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Hactivist&lt;/li&gt;
  &lt;li&gt;Carrer criminals&lt;/li&gt;
  &lt;li&gt;Terrorists&lt;/li&gt;
  &lt;li&gt;Government&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;intro-to-cryptography&quot;&gt;Intro to Cryptography&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Confidentiality
    &lt;ul&gt;
      &lt;li&gt;Public key encryption&lt;/li&gt;
      &lt;li&gt;Block ciphers&lt;/li&gt;
      &lt;li&gt;Stream ciphers&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Integrity
    &lt;ul&gt;
      &lt;li&gt;Cryptograhic hash function&lt;/li&gt;
      &lt;li&gt;Message authentication codes&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Authenticity
    &lt;ul&gt;
      &lt;li&gt;Digital signatures&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;primitives&quot;&gt;Primitives&lt;/h2&gt;
&lt;h3 id=&quot;hashfunctionsmessage-digiest&quot;&gt;Hashfunctions/Message digiest&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Takes some data in&lt;/li&gt;
  &lt;li&gt;Gets signiture out
    &lt;blockquote&gt;
      &lt;p&gt;Funcion to compute a unique random signature for some data&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/csf/cryptographicHashFn.PNG&quot; alt=&quot;Hash Function&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Guarantee towards: Data Integrity&lt;/li&gt;
  &lt;li&gt;Preimage resistance&lt;/li&gt;
  &lt;li&gt;Second Preimage resistance&lt;/li&gt;
  &lt;li&gt;Collision resistance&lt;/li&gt;
  &lt;li&gt;Eg: MD, SHA&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;block-cypherssymmetric-crytography&quot;&gt;Block Cyphers/Symmetric crytography&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/cs-notes/assets/images/csf/symmetricCrypto.PNG&quot; alt=&quot;Symmetric Cryptography&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Guarantee towards: Confidentiality&lt;/li&gt;
  &lt;li&gt;Uses sameto encrypt and decrypt&lt;/li&gt;
  &lt;li&gt;Efficient for large messages&lt;/li&gt;
  &lt;li&gt;Eg: Blowfish, TripleDES, Skipjack, AES&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;asymmetric-ciphers&quot;&gt;Asymmetric ciphers&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;3 functions&lt;/li&gt;
  &lt;li&gt;1 to Encrypt&lt;/li&gt;
  &lt;li&gt;1 to Decrypt&lt;/li&gt;
  &lt;li&gt;1 to create key
&lt;img src=&quot;/cs-notes/assets/images/csf/asymmetricCipher.PNG&quot; alt=&quot;Asymmetric Ciphers&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Guarantee towards: Confidentiality&lt;/li&gt;
  &lt;li&gt;Key Pairs&lt;/li&gt;
  &lt;li&gt;Encrypting and signing&lt;/li&gt;
  &lt;li&gt;Inefficient on large data&lt;/li&gt;
  &lt;li&gt;Eg: DSA, (EC)DSA, ECC, RSA, ElGamal&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;workflows&quot;&gt;Workflows&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Primitives can be used to have guarantees for more than one of
    &lt;ul&gt;
      &lt;li&gt;Information Security&lt;/li&gt;
      &lt;li&gt;Efficient Information Security&lt;/li&gt;
      &lt;li&gt;Sender Authentication&lt;/li&gt;
      &lt;li&gt;Secrecy with Authentication&lt;/li&gt;
      &lt;li&gt;Secrecy with Signature&lt;/li&gt;
      &lt;li&gt;Secrecy with Integrity&lt;/li&gt;
      &lt;li&gt;Signature with Appendix&lt;/li&gt;
      &lt;li&gt;Secrecy with Signature with Appendix&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;digital-signitures&quot;&gt;Digital Signitures&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Authenticity of message origin&lt;/li&gt;
  &lt;li&gt;Non-Repudiation of message origin&lt;/li&gt;
  &lt;li&gt;Message Integrity&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;public-key-encryption--digital-signitures-combination&quot;&gt;Public Key Encryption &amp;amp; Digital Signitures (Combination)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Message confidentiality &amp;amp; integrty&lt;/li&gt;
  &lt;li&gt;Authenticity of message origin&lt;/li&gt;
  &lt;li&gt;Non-Repudiation of message origin&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;kemdem-hybrid&quot;&gt;KEM/DEM (Hybrid)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Symmetric Encryption to encrypt data&lt;/li&gt;
  &lt;li&gt;Assymetric to encrypt symmetric key&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;implementing&quot;&gt;Implementing&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;RSA System
    &lt;ul&gt;
      &lt;li&gt;Encryption&lt;/li&gt;
      &lt;li&gt;Digital signitures&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Descrete logarithm system
    &lt;ul&gt;
      &lt;li&gt;Key exchange&lt;/li&gt;
      &lt;li&gt;Digital signiture algorithm&lt;/li&gt;
      &lt;li&gt;Discrete logarithm integrated encryption scheme&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
</description>
        <pubDate>Mon, 08 Jan 2018 12:00:00 +0000</pubDate>
        <link>https://fireredninja.github.io/cs-notes//cs-notes/level3/semester2/2018/01/08/cyber-security-fundamentals.html</link>
        <guid isPermaLink="true">https://fireredninja.github.io/cs-notes//cs-notes/level3/semester2/2018/01/08/cyber-security-fundamentals.html</guid>
        
        
        <category>Level3</category>
        
        <category>Semester2</category>
        
      </item>
    
      <item>
        <title>Professional Software Development</title>
        <description>&lt;h4 id=&quot;video-lecture-3&quot;&gt;Video Lecture 3&lt;/h4&gt;
&lt;!--excerpt--&gt;

&lt;h4 id=&quot;video-lecture-5&quot;&gt;Video Lecture 5&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-6&quot;&gt;Video Lecture 6&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-7&quot;&gt;Video Lecture 7&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-8&quot;&gt;Video Lecture 8&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-9&quot;&gt;Video Lecture 9&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-10&quot;&gt;Video Lecture 10&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-12&quot;&gt;Video Lecture 12&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-13&quot;&gt;Video Lecture 13&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-14&quot;&gt;Video Lecture 14&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-15&quot;&gt;Video Lecture 15&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-16&quot;&gt;Video Lecture 16&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-19&quot;&gt;Video Lecture 19&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-22&quot;&gt;Video Lecture 22&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-23&quot;&gt;Video Lecture 23&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-26&quot;&gt;Video Lecture 26&lt;/h4&gt;
&lt;h5 id=&quot;software-inspection-techniques&quot;&gt;Software Inspection Techniques&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;What are Inspections?&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Managing an Inspection&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;What can be the subject of an inspection?
    &lt;ul&gt;
      &lt;li&gt;application source code packages, classes or methods&lt;/li&gt;
      &lt;li&gt;source code documentation&lt;/li&gt;
      &lt;li&gt;test harnesses&lt;/li&gt;
      &lt;li&gt;design descriptions, such as UML component or class diagrams&lt;/li&gt;
      &lt;li&gt;requirements specications, such as user stories&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Why take inspections?
    &lt;ul&gt;
      &lt;li&gt;Deteck defects in software&lt;/li&gt;
      &lt;li&gt;identify opportunities for refactoring&lt;/li&gt;
      &lt;li&gt;as part of white/glass box testing process, or QA activities&lt;/li&gt;
      &lt;li&gt;develop a shared understanding of the purpose and function of a system&lt;/li&gt;
      &lt;li&gt;share good practice between team&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Dont use inspections for&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Identifying poor performance&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;inspections should be used to identify improvement&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;total defects = target method + other methods + + undetected&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;defect detection rate = (target method) / (total defects)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;How effective is it?
    &lt;ul&gt;
      &lt;li&gt;Fagan [1976] reported a DDR of 66% and 82% for two IBM case studies employing a comprehensive inspection process&lt;/li&gt;
      &lt;li&gt;Jones [1986] reported a DDR of 60% for design inspections alone, compared to a DDR of just 25% for unit testing&lt;/li&gt;
      &lt;li&gt;Boehm [1981] surveyed four case studies reported between1978 and 1980, finding that inspections discovered between 63% and 75% of defects&lt;/li&gt;
      &lt;li&gt;Wilkerson et al. [2012] found that inspections led to fewer defects left in a system than a test driven development approach to implementation&lt;/li&gt;
      &lt;li&gt;Runeson et al. [2006] reported a more complex picture from a survey of 12 case studies&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Cost of inspections?
    &lt;ul&gt;
      &lt;li&gt;Fagan [1986] reported several anecdotal case studies where
  development and/or maintenance costs were signicantly
  reduced as a net result of applying inspections. One project
  experienced a 95% reduction in maintenance costs&lt;/li&gt;
      &lt;li&gt;Boehm [1981]’s survey of case studies reported that code
  inspections could produce between 10 and 120 delivered lines
  of source code per person hour, compared with 5-24 lines for
  unit testing&lt;/li&gt;
      &lt;li&gt;Wilkerson et al. [2012] found that applying software
  inspections cost about three times a much in total time
  compared with test driven development&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;images/soft_insp1.PNG&quot; alt=&quot;initial costs of software inspections&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When to conduct an inspection?
    &lt;ul&gt;
      &lt;li&gt;Periodically as part of a clean-up or refactoring exercise&lt;/li&gt;
      &lt;li&gt;After a period of requirements gathering and specication&lt;/li&gt;
      &lt;li&gt;During staging of a new feature implementation&lt;/li&gt;
      &lt;li&gt;As a feature is implemented (pair programming)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Roles in inspection
    &lt;ul&gt;
      &lt;li&gt;Mod: responsible for coordinating the arrangements for the inspection&lt;/li&gt;
      &lt;li&gt;Author(s): &amp;gt;=1 team members who make &amp;gt;=1 software atifacts for inspection&lt;/li&gt;
      &lt;li&gt;Inspector(s): responsibel for identifying defects in artifact during inspection&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;../images/soft_insp2.PNG&quot; alt=&quot;software inspection process&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Choosing what to review
    &lt;ul&gt;
      &lt;li&gt;if artifact’s been changed, must be inspected before change can be committed to prod&lt;/li&gt;
      &lt;li&gt;if artifact is associated with high priority feature&lt;/li&gt;
      &lt;li&gt;if artifact has been associated with large no of defect reports&lt;/li&gt;
      &lt;li&gt;if artifact has been subject to a large number of recent changes&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Static analysis tools
    &lt;ul&gt;
      &lt;li&gt;Design metrics, used to identify parts of system that are poorly structured&lt;/li&gt;
      &lt;li&gt;Source code metrics
        &lt;ul&gt;
          &lt;li&gt;No. of lines of code per funct/module&lt;/li&gt;
          &lt;li&gt;Ratio btwn executable and comment lines of code&lt;/li&gt;
          &lt;li&gt;No. of spelling mistakes&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Soft process metrics
        &lt;ul&gt;
          &lt;li&gt;No. of changes per commit for module or over a period&lt;/li&gt;
          &lt;li&gt;No of defects discovered over a period for a module&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Rules for conducting an inspection
    &lt;ul&gt;
      &lt;li&gt;Focus on identifying imporovement opportunities, not recrimination&lt;/li&gt;
      &lt;li&gt;purposde of inspections is to uncover defects, not recommend remedial actions&lt;/li&gt;
      &lt;li&gt;allow inspectors to take breaks. too much concentration leads to defects being missed&lt;/li&gt;
      &lt;li&gt;desseminate and act on recommended actions quickly&lt;/li&gt;
      &lt;li&gt;monitor remedial action to make sure it addresses the identified problems&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Strats for identifying defects
    &lt;ul&gt;
      &lt;li&gt;adhoc&lt;/li&gt;
      &lt;li&gt;checklist directed&lt;/li&gt;
      &lt;li&gt;senarios&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Linus’ Law&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Given enough eyeballs, all bugs are shallow&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Key Point&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Inspections are an essential quality assurance tool&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;video-lecture-27&quot;&gt;Video Lecture 27&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-27a&quot;&gt;Video Lecture 27a&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-28&quot;&gt;Video Lecture 28&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-29&quot;&gt;Video Lecture 29&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-30&quot;&gt;Video Lecture 30&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-30a&quot;&gt;Video Lecture 30a&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-31&quot;&gt;Video Lecture 31&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-32&quot;&gt;Video Lecture 32&lt;/h4&gt;

&lt;h4 id=&quot;video-lecture-33&quot;&gt;Video Lecture 33&lt;/h4&gt;

</description>
        <pubDate>Sat, 23 Sep 2017 19:50:00 +0100</pubDate>
        <link>https://fireredninja.github.io/cs-notes//cs-notes/level3/semester1/2017/09/23/professional-software-development.html</link>
        <guid isPermaLink="true">https://fireredninja.github.io/cs-notes//cs-notes/level3/semester1/2017/09/23/professional-software-development.html</guid>
        
        
        <category>Level3</category>
        
        <category>Semester1</category>
        
      </item>
    
      <item>
        <title>Interactive Systems</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory - edit this post and re-build (or run with the &lt;code class=&quot;highlighter-rouge&quot;&gt;-w&lt;/code&gt; switch) to see your changes!
To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention: YYYY-MM-DD-name-of-post.ext.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sat, 23 Sep 2017 19:50:00 +0100</pubDate>
        <link>https://fireredninja.github.io/cs-notes//cs-notes/level3/semester1/2017/09/23/interactive-systems.html</link>
        <guid isPermaLink="true">https://fireredninja.github.io/cs-notes//cs-notes/level3/semester1/2017/09/23/interactive-systems.html</guid>
        
        
        <category>Level3</category>
        
        <category>Semester1</category>
        
      </item>
    
      <item>
        <title>Data Fundamentals</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory - edit this post and re-build (or run with the &lt;code class=&quot;highlighter-rouge&quot;&gt;-w&lt;/code&gt; switch) to see your changes!
To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention: YYYY-MM-DD-name-of-post.ext.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sat, 23 Sep 2017 19:50:00 +0100</pubDate>
        <link>https://fireredninja.github.io/cs-notes//cs-notes/level3/semester1/2017/09/23/data-fundamentals.html</link>
        <guid isPermaLink="true">https://fireredninja.github.io/cs-notes//cs-notes/level3/semester1/2017/09/23/data-fundamentals.html</guid>
        
        
        <category>Level3</category>
        
        <category>Semester1</category>
        
      </item>
    
      <item>
        <title>Advanced Programming</title>
        <description>&lt;h4 id=&quot;lecture-1&quot;&gt;Lecture 1&lt;/h4&gt;
&lt;h4 id=&quot;introduction&quot;&gt;Introduction&lt;/h4&gt;

&lt;h5 id=&quot;application-level&quot;&gt;Application Level&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Java - Strong Types&lt;/li&gt;
  &lt;li&gt;Python - Auto Memory Mgt&lt;/li&gt;
  &lt;li&gt;Haskel - Abstract Resources&lt;/li&gt;
  &lt;li&gt;… - IDE
&lt;!--excerpt--&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;systems-level&quot;&gt;Systems Level&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Languages: C, Rust, OCaml&lt;/li&gt;
  &lt;li&gt;Used for:
    &lt;ul&gt;
      &lt;li&gt;OS&lt;/li&gt;
      &lt;li&gt;Communications&lt;/li&gt;
      &lt;li&gt;Numerical&lt;/li&gt;
      &lt;li&gt;Drivers&lt;/li&gt;
      &lt;li&gt;Embedded Systems&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;C/C++ most heavily used programming language&lt;/li&gt;
  &lt;li&gt;Used in OS and embeded systems&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;edit---compile---link---execute-cycle&quot;&gt;Edit - Compile - Link - Execute Cycle&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Source Files &amp;gt; Compiler &amp;gt; Bin &amp;gt; Linker &amp;gt; Executable
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;test.o
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;memory-layout&quot;&gt;Memory Layout&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Higher Mem address
    &lt;ul&gt;
      &lt;li&gt;stack&lt;/li&gt;
      &lt;li&gt;heap&lt;/li&gt;
      &lt;li&gt;bss segment
        &lt;ul&gt;
          &lt;li&gt;stores uninitialized variables&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;data segment
        &lt;ul&gt;
          &lt;li&gt;initialized data is stord&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;test segment
        &lt;ul&gt;
          &lt;li&gt;read-only, holds instructions that the processor understands&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Lower mem adress&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;stack &amp;amp; heap shared memory&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;makefiles&quot;&gt;Makefiles&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;makes compiling bigger programs easier
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; mod_a.c
gcc &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; mod_b.c
gcc &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; mod_a.o mod_b.o &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; app_x
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;becomes&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Makefile&quot;&gt;app_x: mod_a.o mod_b.o
	gcc mod_a.o mod_b.o -o app_x

mod_a.o: mod_a.c global.h
	gcc -c mod_a.c

mod_b.o: mod_b.c global.g
	gcc -c mod_a.c
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CFLAGS = -W -Wall
%.o : %.c
	gcc -c $(CFLAGS) $&amp;lt; -o $@
OBJECTS = mod_a.o mod_b.o

app_x: $(OBJECTS)
	gcc $(OBJECTS) –o app_x

mod_a.o: mod_a.c global.h
mod_b.o: mod_b.c global.h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;lecture-2&quot;&gt;Lecture 2&lt;/h1&gt;
&lt;h1 id=&quot;overview-of-c&quot;&gt;Overview of C&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Must contain main()
    &lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;int main(){
  // something
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
printf()
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;char - 8 bits&lt;/li&gt;
  &lt;li&gt;short - 16 bits&lt;/li&gt;
  &lt;li&gt;long - 32 bits&lt;/li&gt;
  &lt;li&gt;float - 32 bit&lt;/li&gt;
  &lt;li&gt;long long - 64 bits&lt;/li&gt;
  &lt;li&gt;double - 64-bit&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;printf-formatting&quot;&gt;printf formatting&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;%d - print as a decimal integer&lt;/li&gt;
  &lt;li&gt;%6d - print as a decimal integer at least 6 characters wide with leading blanks&lt;/li&gt;
  &lt;li&gt;%06d - print as a decimal integer at least 6 characters wide with leading zeros&lt;/li&gt;
  &lt;li&gt;%f - print as a floating point number&lt;/li&gt;
  &lt;li&gt;%6f - print as a floating point number at least 6 characters wide&lt;/li&gt;
  &lt;li&gt;%.2f - print as a floating point number with 2 digits after the decimal point&lt;/li&gt;
  &lt;li&gt;%6.2f - print as a floating point number at least 6 characters wide with 2 digits after the decimal point&lt;/li&gt;
  &lt;li&gt;%c - print as a character&lt;/li&gt;
  &lt;li&gt;%s - print as a string&lt;/li&gt;
  &lt;li&gt;%x - print as a hexadecimal integer&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;while(condition) {
	statement;
}

for (int = i; i &amp;lt; length; ++i) {
	statement;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;//Constant
#define LOWER 0
#define UPPER 300
#define STEP 20
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// Character input
#include &amp;lt;stdio.h&amp;gt;
...
for (c = getchar(); c!=EOF;c=getchar()){
	statement;
}
// or
while ((c = getchar()) != EOF) {
	statement;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;arrays&quot;&gt;Arrays&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;int numbers[10];
numbers[4];
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;functions&quot;&gt;Functions&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// Must use prototype before
return-type function-name (parameter declarations, if any);
....
return-type function-name (parameter declarations, if any) {
	statements;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;call by value
    &lt;ul&gt;
      &lt;li&gt;manipulate actual values&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;call by reference
    &lt;ul&gt;
      &lt;li&gt;cannot manipulate actual values&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;arrays passewd by reference&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;/// External Variables
extern type varName;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;signed
    &lt;ul&gt;
      &lt;li&gt;can be negative or positive ($2^-(n-1)$ to $2^(n-1)$)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;unsigned
    &lt;ul&gt;
      &lt;li&gt;always positive or 0&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;escape-sequences&quot;&gt;escape sequences&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\a - alert (bell) character
\b - backspace
\f - formfeed
\n - newline
\r - carriage return
\t - horizontal tab
\v - vertical tab
\\ - backslash
\?
\'
\&quot;
\ooo - octal number
\xhh - hexadecimal number
\0 - null character (EOS)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;‘x’ - integer representing value of letter x&lt;/li&gt;
  &lt;li&gt;“x” - array of 2 chars, ‘x’ and ‘\0’&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// enum
enum months {JAN = 1; FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC};
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;variables-default-initialized&quot;&gt;Variables default initialized&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;external
    &lt;ul&gt;
      &lt;li&gt;0&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;automatic
    &lt;ul&gt;
      &lt;li&gt;undefined&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;“const” can be used with array arguments to functions, to tell the function not to change the array
    &lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;int strlen(const char[])
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;Conversion takes place across assignments; the value of the right hand side is converted to the type of the left hand side, which is the type of the result&lt;/li&gt;
  &lt;li&gt;Longer integers are converted to shorter ones by dropping the excess high order bits&lt;/li&gt;
  &lt;li&gt;float to int conversions cause truncation of any fractional part&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;cast&quot;&gt;cast&lt;/h4&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expression&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;++n // increments before value us used
n++ // increments after value is used
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;bitwise-operations&quot;&gt;Bitwise operations&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&amp;amp; - AND&lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;- OR&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;^ - EXOR&lt;/li&gt;
  &lt;li&gt;« - left shift&lt;/li&gt;
  &lt;li&gt;
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;ul&gt;
          &lt;li&gt;right shift&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;~ - one’s complement&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;n = n &amp;amp; 0xff;
/*sets all bits of n to 0 except the low order 8 bits */
n = n &amp;amp; ~0xff;
/* zeroes the low order 8 bits */
n = n | 0x11;
/* sets bits 0 and 4 to 1, leaving all others alone */
n = n ^ 0x11;
/* if n’s bit 0 has a value of 0, set it to 1; if it is 1, set it to
0; same for bit 4 */
n = n &amp;lt;&amp;lt; 2;
/* shift n’s value 2 bits left, filling with 0’s; equivalent to
multiplying by 4 */
n = n &amp;gt;&amp;gt; 3;
/* shift n’s value 3 bits right; if n is signed, fill vacated
bits with the sign bit; if unsigned, fill with 0; equivalent
to division by 8 */
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;x = expr1 ? expr2 : expr3;
// is the same as
if (expr1) {
	x = expr2;
} else {
	x = expr3;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Operations&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Associativity&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;() [] -&amp;gt; .&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;! ~ ++ – + - * &amp;amp; (type) sizeof&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;right to left&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;* / %&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;+ -&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;« »&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&amp;lt; &amp;lt;= &amp;gt; &amp;gt;=&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;== !=&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&amp;amp;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;^&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;|&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&amp;amp;&amp;amp;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;||&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;?;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;right to left&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;= += -= *= /= %= &amp;amp;= ^= |= «= »=&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;right to left&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;,&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;chapter-3&quot;&gt;Chapter 3&lt;/h1&gt;
&lt;h2 id=&quot;control-statements&quot;&gt;Control statements&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;if (/* condition */) {
	/* code */
} else if (/* condition */) {
	/* code */
} else {
	/* code */
}

while (/* condition */) {
	/* code */
}

for (size_t i = 0; i &amp;lt; count; i++) {
	/* code */
}

do {
	/* code */
} while(/* condition */);

switch (/* expression */) {
	case /* value */:
		/* statement */;
		break;
	default /* value */ :
		/* statement */;
		break;
}

for (. . .)
	for (. . .) {
		. . .
		if (disaster)
			goto error;
		. . .
	}

error:
/* cleanup the mess */
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;chapter-4&quot;&gt;Chapter 4&lt;/h1&gt;
&lt;h2 id=&quot;functions-1&quot;&gt;Functions&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// always use prototypes
return-type name(/* arguments */);

return-type name(/* arguments */) {
	/* code */
	return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;if funciton doesn’t have a type, it is set to int as default&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;static-variables&quot;&gt;Static Variables&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;static int sp;
// can only use this variable inside the file it's declared in
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;internal static variables are local to a particular function, just as automatic variables are, but unlike automatics, they remain in existence rather than coming and going each time that the function is activated&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;register-variables&quot;&gt;Register Variables&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;The keyword register hints to compiler that a given variable can be put in a register. It’s compiler’s choice to put it in a register or not&lt;/li&gt;
  &lt;li&gt;Registers are faster than memory to access, so the variables which are most frequently used in a C program can be put in registers using register keyword&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;register int x;
int f(register unsigned m, register long n) {…}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;preprocessor&quot;&gt;Preprocessor&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// file inclusion
#include &quot;filename&quot;
#include &amp;lt;filename&amp;gt;

// macro substitution
#define name replacement-text
// use &quot;\&quot; to continue for multiple lines
#define name replacement-textreplacement-textreplacement-textreplacement-text\
replacement-textreplacement-textreplacement-text\
replacement-textreplacement-textreplacement-text
// ## can concatenate arguments
#define paste(front, back) front ## back
paste(name, 1);
// will give
name1;

// Conditional evaluation
#if
	#endif
	#else
	#elif
// eg
#if SYSTEM == SYSV
	#define HDR “sysv.h”
#elif SYSTEM == BSD
	#define HDR “bsd.h”
#elif SYSTEM == MSDOS
	#define HDR “msdos.h”
#else
	#define HDR “default.h”
#endif /* SYSTEM */
#include HDR


#ifdef
#ifndef
// ifdef/ifndef is the same as checks if contents of a header file is only included once
#if !defined(_HDR_H_)
#define _HDR_H_
/* contents of hdr.h go here */
#endif /*_HDR_H_ */
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;Automatic variable
    &lt;ul&gt;
      &lt;li&gt;lives inside function&lt;/li&gt;
      &lt;li&gt;allocated upon function call&lt;/li&gt;
      &lt;li&gt;deallocated upon function return&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;External variable
    &lt;ul&gt;
      &lt;li&gt;lives outside functions&lt;/li&gt;
      &lt;li&gt;allocated upon program start&lt;/li&gt;
      &lt;li&gt;never deallocated&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;visibility-of-variables&quot;&gt;Visibility of variables&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;As default all top-level names are visible everywhere&lt;/li&gt;
  &lt;li&gt;use static to restrict visibility&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;chapter-5&quot;&gt;Chapter 5&lt;/h2&gt;
&lt;h3 id=&quot;pointers&quot;&gt;pointers&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// points to a value of type int
int*;
// points to a value of type int*
int**;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;purpose&quot;&gt;purpose?&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;call-by-reference&lt;/li&gt;
  &lt;li&gt;linked data structures&lt;/li&gt;
  &lt;li&gt;array indexing&lt;/li&gt;
  &lt;li&gt;higher order functions - functions that call some of their own arguments&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// stores address of int X in P
int *P = &amp;amp;X;

// writes 42 to the address pointed to by P
*P = 42;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;&amp;amp; cannot be used for register variables or complex expressions&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;int x = 1, y = 2;
int z[10];
int *p, *q; /* p and q are pointers to int */

p = &amp;amp;x; /* p now points to x */
y = *p; /* y is now 1 */
*p = 0; /* x is now 0 */
q = &amp;amp;z[3]; /* q now points to z[3] */
p = q; /* p now points to z[3] */
while (p == q) /* loop exits on 1st iter */
	break;
if (p != NULL) /* address of z[3] != 0 */
	p = &amp;amp;z[0]; /* p now points to z[0] */
if (q)
	q = &amp;amp;z[0]; /* q now equals p; */
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;Use pointers to call by reference
    &lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;swap(&amp;amp;a[i], &amp;amp;a[j])
// instead of
swap(intx , int y)
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;int a[10];
int *pa;

pa = a; // points to a[0]
pa++; // points to a[1]

// given pointers q, p that points to the same array
q-p; // is the number of array elements between pointers p ad q

//-------------

char amsg[] = &quot;this is a string&quot;; // array of 17 characters including '\0'
char *pmsg = &quot;this is a string&quot; // pointer to an array of the same 17 chars
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;pmsg can be resized but amsg can’t;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;memory-management&quot;&gt;Memory management&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;malloc(); // requests given no. of bytes adn returns a void * to the first byte
sizeof(t); // no. of bytes required to store a value of type t

free(); // deallocates memory that was malloced;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;given
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./program hello world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// in int main(int argc *argv[]);
argc == 3
argv[0] == &quot;./program&quot;;
argv[1] == &quot;hello&quot;;
argv[2] == &quot;world&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;function-pointers&quot;&gt;Function pointers&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;void sort(char *lineptr[], int left, int right, int (*comp)(void *, void *));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;chapter-7&quot;&gt;Chapter 7&lt;/h2&gt;
&lt;h4 id=&quot;standard-input-and-output&quot;&gt;Standard Input and output&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;#include &amp;lt;stdio.h&amp;gt;

int getchar(void); // read one character at a time
int getchat(); // return next input char, returns EOF on end
int putchar(int ch); // prints ch to stdout
printf(); // prints to stdout
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;formated-io&quot;&gt;Formated I/O&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// Format string determines type of remaining arguments
int printf(const char *format, ...);
printf(&quot;%d\n&quot;, 8);

int scanf(char *format, ...); // same as printf formatting
int day, year;
char monthname[20];
scanf(“%d %s %d”, &amp;amp;day, monthname, &amp;amp;year);
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Character&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Input Data&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;d&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;decimal int&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;i&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;integer. integer may be octal(leading 0) or hexadecimal(leading 0x/0X)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;o&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;octal int(with/without leading 0)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;u&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;unsigned int&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;x&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;hexadecimal int&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;c&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;char&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;s&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;string&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;e,f,g&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;floating point with optional sight/decimal point/exponential&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;%&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;literal %, no assignment is made&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;file-io&quot;&gt;File I/O&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;FILE *fopen(char *name, char *mode);
int getc(FILE *fp);
int putc(int c, FILE *fp);
int fclose(FILE *fp);

// printf and scanf variants
int fscanf(FILE *fp, char *format, ...);
int fprintf(FILE *fp, char *format, ...);

// line buffered input/output
char *fgets(char *line, int maxline, FILE *fp);
int fputs(char *line, FILE *fp);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;chapter-6&quot;&gt;Chapter 6&lt;/h2&gt;
&lt;h4 id=&quot;structs&quot;&gt;Structs&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;struct [tag] {
	member declarations
};

struct point {
	int x;
	int y;
};

struct point p = {320, 200};
struct point q;
struct point *r;

q = p; // struct assignment
r = &amp;amp;q; // address of struct variable q

q.y; // access struct member y
r-&amp;gt;x; // dereference
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;Legal Operations
    &lt;ul&gt;
      &lt;li&gt;copying&lt;/li&gt;
      &lt;li&gt;passing to a function&lt;/li&gt;
      &lt;li&gt;returning from a function&lt;/li&gt;
      &lt;li&gt;taking the address with &amp;amp;&lt;/li&gt;
      &lt;li&gt;accessing members&lt;/li&gt;
      &lt;li&gt;assigning to members&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Illegal Operations
    &lt;ul&gt;
      &lt;li&gt;arithmetic&lt;/li&gt;
      &lt;li&gt;comparisons&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;self-referential-structs&quot;&gt;Self-referential structs&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;struct tnode {
	int value; // payload
	struct tnode *left; // ptr to left child
	struct tnode *right; // ptr to right child
};

struct tnode *;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;typedefs&quot;&gt;Typedefs&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;create new data type synonyms
    &lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;typedef type synonym;
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;```C
typedef int Length; // Length is synonym for int
typedef char *String; // String is synonym for char *&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Length len, maxlen; // Length variables
Length *lengths; // ptr to (array of) Length
String lineptr[MAXLINES]; // array of String
Length strlen(String s); // prototype&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
#### Unions
- Variable that may hold objects of different types and sizes
```C
union const_value { // type declaration
	int ival;
	double dval;
	char *sval;
};
union const_value val; // variable definition
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;assignment to any union member turns all other members into garbage&lt;/li&gt;
  &lt;li&gt;compiler doesn’t track this&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;differences-between-java-and-c&quot;&gt;Differences between Java and C&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Interface support
    &lt;ul&gt;
      &lt;li&gt;Java compiler checks that a class implements its interface&lt;/li&gt;
      &lt;li&gt;C compiler doesn’t check that .c file defines what .h declares&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Memory management
    &lt;ul&gt;
      &lt;li&gt;Java garbage collector&lt;/li&gt;
      &lt;li&gt;In C unused memory mused be freed explicitly&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Memory protection
    &lt;ul&gt;
      &lt;li&gt;Java - private attributes cannot be tampered with&lt;/li&gt;
      &lt;li&gt;Pointers to opaque structs can still be dereferenced
        &lt;ul&gt;
          &lt;li&gt;never leak pointers to internal data structures, for security reasons.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;threads-and-concurrency&quot;&gt;Threads and Concurrency&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Concurency&lt;/em&gt; means multiple computations are happening at the same time.&lt;/p&gt;

&lt;h4 id=&quot;process&quot;&gt;Process&lt;/h4&gt;
&lt;p&gt;A &lt;em&gt;process&lt;/em&gt; is an instance of a running program that is isolated from other processes on the same machine. In particular, it has its own private section of the machine’s memory.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Processes has:
    &lt;ul&gt;
      &lt;li&gt;An address space&lt;/li&gt;
      &lt;li&gt;A collection of OS state&lt;/li&gt;
      &lt;li&gt;A CPU context - a thread of control&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;threads&quot;&gt;Threads&lt;/h4&gt;
&lt;p&gt;A &lt;em&gt;thread&lt;/em&gt; is a locus of control inside a running program. Think of it as a place in the program that is being run, plus the stack of method calls that led to that place (so the thread can go back up the stack when it reaches return statements).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Why use threads?
    &lt;ul&gt;
      &lt;li&gt;Split program into routines to execute in parallel&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Shares a process address space with &amp;gt;= 0 threads&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;thread-models&quot;&gt;Thread Models&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Manager/Worker
    &lt;ul&gt;
      &lt;li&gt;Manager handles I/O and assignes work to worker threads&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Peer
    &lt;ul&gt;
      &lt;li&gt;similar to manager/worker, but after the main thread creates other threads it participates in the work&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Pipeline
    &lt;ul&gt;
      &lt;li&gt;Each thread handles a different stage of an assemply line&lt;/li&gt;
      &lt;li&gt;Threads hand word to each other in producer-consumer relationship&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;generic-threading-concepts&quot;&gt;Generic Threading Concepts&lt;/h2&gt;
&lt;h4 id=&quot;thread-lifecycle&quot;&gt;Thread Lifecycle&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Must be able to:
    &lt;ul&gt;
      &lt;li&gt;Create new thread
        &lt;ul&gt;
          &lt;li&gt;Create thread context&lt;/li&gt;
          &lt;li&gt;Associate thread with function&lt;/li&gt;
          &lt;li&gt;Pass arguments to function&lt;/li&gt;
          &lt;li&gt;Recieve identifier to be used in other lifecycle calls&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Start new thread executing&lt;/li&gt;
      &lt;li&gt;Interupt thread&lt;/li&gt;
      &lt;li&gt;Wait for another thread to terminate&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;critical-regions&quot;&gt;Critical Regions&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Inconsistent data when accessing concurrently&lt;/li&gt;
  &lt;li&gt;To keep data consistent we need mechanisms to make sure threads are executed in order&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;locks&quot;&gt;Locks&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Prevents other threads from accessing data&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;If another thread owns a lock, and your thread is requesting the lock, it will be blocked until the owning thread releases the lock&lt;/li&gt;
  &lt;li&gt;When your thread gets the lock and its not owned, it will own the lock&lt;/li&gt;
  &lt;li&gt;When done with execution, the thread releases the lock&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Any threads blocked will now own the lock&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Avoid Problems
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Deadlock&lt;/strong&gt;: when neither thread can make progress (eg. if a thread wants access but another thread is stuck in infinity loop)&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Livelock&lt;/strong&gt;: when threads are constantly changing and none of them can make progress&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Starvation&lt;/strong&gt;: when threads are denied the necessary resources for it to work&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;conditional-variables&quot;&gt;Conditional Variables&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Can be called only if the thread owns the lock
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wait()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Releases the lock and blocked until another thread calls &lt;code class=&quot;highlighter-rouge&quot;&gt;signal()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;When unblocked, the thread owns the lock again&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;signal()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;If any threads are blocked waiting for a condition, then &lt;em&gt;one&lt;/em&gt; of the blocked threads will be unblocked&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;broadcast()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;If any threads are blocked waiting for a condition, the  &lt;em&gt;all&lt;/em&gt; of the blocked threads will be unblocked&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;java-support-for-multi-threading&quot;&gt;Java support for multi-threading&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Provide a Runnable object&lt;/li&gt;
  &lt;li&gt;Allows your class to subclass another class&lt;/li&gt;
  &lt;li&gt;More general
    &lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;public class TestRunnable implements Runnable {
  public void run() {
      // stuff
  }

  publoc static void main(String[] args) {
      Thread t = new Thread(new testRunnable());
      t.start();
  }
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;Subclass Thread&lt;/li&gt;
  &lt;li&gt;Simpler easier&lt;/li&gt;
  &lt;li&gt;Less general
    &lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;public class TestSubclass extends Thread {
  public void run() {
      // stuff
  }

  public static void main(String[] args) {
      Thread t = new TestSubclass();
      t.start();
  }
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;t.start(); // Start thread
t.interupt(); // Interupt Thread
t.join(); // Wait to terminate
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;class Object defines wait(), notify(), notifyAll()&lt;/li&gt;
  &lt;li&gt;Which is same as wait(), signal(), broadcast()
    &lt;h2 id=&quot;pthreads&quot;&gt;PThreads&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;thread-safe-adts&quot;&gt;Thread Safe ADTs&lt;/h2&gt;

&lt;h2 id=&quot;memory-management-1&quot;&gt;Memory Management&lt;/h2&gt;

&lt;h2 id=&quot;openmp&quot;&gt;OpenMP&lt;/h2&gt;

</description>
        <pubDate>Sat, 23 Sep 2017 19:50:00 +0100</pubDate>
        <link>https://fireredninja.github.io/cs-notes//cs-notes/level3/semester1/2017/09/23/advanced-programming.html</link>
        <guid isPermaLink="true">https://fireredninja.github.io/cs-notes//cs-notes/level3/semester1/2017/09/23/advanced-programming.html</guid>
        
        
        <category>Level3</category>
        
        <category>Semester1</category>
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory - edit this post and re-build (or run with the &lt;code class=&quot;highlighter-rouge&quot;&gt;-w&lt;/code&gt; switch) to see your changes!
To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention: YYYY-MM-DD-name-of-post.ext.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sun, 10 Nov 2013 10:18:00 +0000</pubDate>
        <link>https://fireredninja.github.io/cs-notes//cs-notes/thriller/comedy/horror/2013/11/10/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">https://fireredninja.github.io/cs-notes//cs-notes/thriller/comedy/horror/2013/11/10/welcome-to-jekyll.html</guid>
        
        
        <category>Thriller</category>
        
        <category>Comedy</category>
        
        <category>Horror</category>
        
      </item>
    
  </channel>
</rss>
